%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: bunny-2d-AABB-Moving.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: tanglei
%%CreationDate: 2015-05-18, 19:56:15
%%BoundingBox: -1 0 379 155
%%HiResBoundingBox: 0 0 378.6414 154.8296
%%CropBox: 0 0 378.6414 154.8296
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1198 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2015-04-04T00:42:46+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2010 Trial"
   xmp:ModifyDate="2015-05-18T19:56:06+08:00"
   xmp:MetadataDate="2015-05-18T19:56:06+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2010 Trial"
   xmpMM:DocumentID="uuid:2e915503-7d9d-415e-95d5-96eef97b0ede"
   xmpMM:InstanceID="uuid:53cd010a-8fca-486d-b947-4228e88ad40b">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Windows 用户</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -154.83 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 154.83 li
378.641 154.83 li
378.641 0 li
cp
clp
[1 0 0 1 -73.1101 0 ]ct
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
91.5 142.756 mo
228 142.756 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
233.25 142.756 mo
226.5 146.506 li
226.61 146.156 li
227.64 144.096 227.64 141.676 226.61 139.616 cv
226.5 139.756 li
233.25 142.756 li
cp
ef
91.5 142.756 mo
90.75 7.75562 li
@
90.75 2.50562 mo
93.75 9.25562 li
94.012 9.09564 li
91.948 8.07562 89.525 8.08563 87.472 9.12561 cv
87.75 9.25562 li
90.75 2.50562 li
cp
ef
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f710b77c000000cc000000606376
742008fab09e0000012c0000079c6670676d4d5f5868000008c800000634
676c79669c2b986100009e500008e56668656164e074353600000efc0000
0036686865610e310ee000000f3400000024686d74784f8cd97a00000f58
00002fe46c6f6361346f231000003f3c00002fe86d617870119304140000
6f24000000206e616d65dc719c8700006f44000023ee70726570ab1cb91f
0000933400000b1b67646972000000000000000000000000000303370190
00050008059a0533002c0125059a0533004c03a000660212010502020503
050405090304e0000eff400078430000000100000000544d432000010020
fffc058efe460133072101bb400001bfdff700000371054c000000200004
058e0000054c001f054c001c037100180000ffe10000ffe80000ffe8fe4a
fffc056b0023fe68ffe2033e000000950000009500000000000000000025
00a8008e010b007d00820045003200a400ca006b0070005100af003c00f0
01d700470004002500770029004000fd00160161004601370029008e0017
ffca0025005bffe902e600020099008100f2007500d6006300c60006009a
01330024003800cc003dff67001305d8003600860095ffdb0007043400a5
00d8ffdcfffe004800a200d8013c01530380053e0057007a007c008c0117
012a0138017c0026003c007800bd00c0021009b5000c004d004e00540058
006700b4040100020005005000af01d5034300240058008b013501c0ffac
002000250026002d00410136022bffba001e002a0034003b003f00850094
009800d7012e013d033104b900170040006100b9010e0116012201bfff9c
001f001f004d005c0086008c009600aa00cb00cb011f0154022f036005a9
fee8000e006f007c007d008b00d500f1010a0157017802b803adfe3fff6a
ffb3ffc4001f0037003f0044004a0078007d009700a200a700b600c000c1
00c600d8011d0150019701ee04740532fd81fed1fee0ff16fff1000f002d
00550068006e007f00890095009e00c200da00e400f801040108011101c2
023002da030e049e0517ff00ff8700000020002f00410057007800870088
008800b900c200c5012001280133017401d6020e020f026c027e02ab02ec
038903b103e304e7ff43ffa8ffc3ffdcffe9000700230023002600520077
007d0081008f009900ac00ae00b500b800c800ea00f000f40135016a018b
01b101b501f7021402ad02d504fc05d805f0ff9dfffc000b00240025002c
0030003000330040004700490057006e009a00bd00c900cd00dc00fa00fa
011b0139017e0187018a018e0195019601df01f6028602cf02de039603a9
03b003c804010432046a058b05e006510761fe96fe9aff4bff8700130025
00340038003e004a0065006b0073007a009c00a200b200b700bf00f000f7
00fb0104011301200124013b01520178017c0181018f01a001d90248026a
026f02700301031d032303270388041f04ab04d104da057a058bfe26fe59
ff2e00010002000a003b003b004700580058005f0066006b007a007a008b
009900af00bc00c000c700cc00e900f200f500fb00fb0102010a010b0115
0121012701450145015501570158015e01610168017d01a301ab01da01ee
021002180222028f029402a302d202e703710393039b03b303d303fe04ff
050b05320532054b0559058b05ab05f2065506890742076207a708ccfd2a
fdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffaf
ffc00000000000030094001d001f002000200027002e0048004b004c005e
005f006b0071007c008a00900091009100a700af00b300b400c400c600d1
00d200de00df00df00e600e800ea00eb00f200f500f500fc010201180123
013101330137015c016201660170017a017a017a018201980199019b01b0
01bf01c001ca01d301d701d801e001e001f601f701f802120213022f0237
02440247024f0252026302650270027f0298029b02a602b702ba02c502cf
02d602d702e502fe031c031d03450348035d035e03710379038103a103b7
03d403d503d803e103f803fe0404041f042104230425043a0467048304e0
0528054b0564056a059f059f05c2060b066a06af06b306cb06e807060728
0748075007a607b207ff009500af00920096000000000000000000000000
017e01a80129025b0212020301c302b4019301cd02b204ed020e0159017a
0300022d042c00c8004d00e602890325013e0378011b00f1018d00490203
007c000e029d02470024000000000052004400330038005405d3041501a7
000002860168005000cf0002004b0024008800ba0025ffd800110091ff6b
00b5011700260065ff9900490080014b01c000f40167027102ea04fc0310
017c01e103d9015501e601ee0434019606cb005c022b0099003d009f0016
0039002700de00790120022e005a00990388009400210019002a046c05e8
000001f203b200aa0296028902b4ffc9020000ec0005005a0447010004e0
0000052a001f01eb00ae016800ca02d3028901b5040601a1014f014b011c
0308005e00c70024029d006503750104028002f304d800d90239025a032c
01f204310303005002e50283005901eb010800ac019602f8012100950180
004400e501eb02e5007400f301ff02fd038f026801c801c70116022b0142
033000fe02e101620200002400ee05170108023700660006010201e602aa
0366019b00d305c203dc044d03b6000401be013702fc03200244014d0338
ffed002506f8030dfed5ff43004402ffff92040bfdef0155017100d9ffc4
032d0461044afbb5fbcf02170192036d0558fff2fe7d0583023e006605e9
073d00790243002500cf00fd00af002a01ef021a0026001f0025003a0000
01170490fbfb0251001d02f001f50078018f005f00240044005400bf00af
006701a8002600050006003f009800fa02ab00c2004d0375004a00b600c4
01bf017c006f00130263000c006801520002012e0104001f001f009a0000
00f1046900790080005000bd056b00ab0080001e05a5fe4000ce006e0056
004800db018b00b3004802390458005300820082002203d703f104704042
5554403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524
232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706
0504030201002c4523466020b02660b004262348482d2c452346236120b0
2661b004262348482d2c45234660b0206120b04660b004262348482d2c45
23462361b0206020b02661b02061b004262348482d2c45234660b0406120
b06660b004262348482d2c4523462361b0406020b02661b04061b0042623
48482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d
44235920b0ed51582320b04d44235920b09051582320b00d44235921212d
2c20204518684420b001602045b04676688a4560442d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b102
17453ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0
004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a
8cb8100062602b0c642364615c58b00361592d2c45b0112bb0172344b017
7ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b017
7ae41b038a45186920b01723448a8a8720b0a05158b0112bb0172344b017
7ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01
182f2d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b802ee23701020b802ee4520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab903b003b08a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1230188
51b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b
014b5258b2020802436042591bb940000080885458b202040243604259b9
4000008063b80100885458b202080243604259b94000010063b802008854
58b202100243604259b12601885158b94000020063b80400885458b20240
0243604259b94000040063b80800885458b202800243604259b128018851
58b94000080063b81000885458ba00020100000243604259595959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00010000
0006deb825c0ec785f0f3cf50819080000000000a31fb8bd00000000cf71
5306fc05fd8c0aaa0830000200090001000100000000000100000721fe45
00570a3afc05fa500aaa001800070000000000000000000000000bf90639
011c00000000020000000200000002aa009a035c01260400009304000056
06aa00900639006201b6010d02aa008c02aaff2104000122056600be0200
ffeb02aa0036020000450239ffbb0400007a0400007d0400002004000044
040000400400004904000081040000e80400004e0400003b02aa007a02aa
002405660096056600c805660096040000c6075c006104e3ff9c04e3ffd1
0556008a05c7ffc304e3ffd204e3ffce05c7008e05c7ffca02aaffc0038d
ffba0556ffc90473ffbe06aaffbd0556ffc705c7007a04e3ffcf05c70061
04e3ffd10400000e0473008f05c700da04e3010006aa00f904e3ff770473
00b80473fffc031d000d023900da031dff33036000380400ffef02aa0168
0400003004000036038d003804000027038d00400239fe9b0400ffc90400
0029023900580239fea0038d00140239004f05c70023040000270400003c
0400ff1e0400002d031d002a031dffed023900540400003c038d002c0556
0023038dffb8038dff5c031dffc70333008d023300ed0333ff6704540014
04e3ff9c04e3ff9e0556008a04e3ffd20556ffc705c7007a05c700da0400
00300400003004000030040000300400003004000030038d003c038d0040
038d0040038d0040038d0040023900580239005802390058023900580400
00270400003c0400003c0400003c0400003c0400003c0400003c0400003c
0400003c0400003c040000dd033300d404000072040000310400fffc02cd
00ad042f006c0400feb70614008b0614008b07d700be02aa019902aa010c
04640019071dff9405c7004805b40035046400350464005e0464005a0400
fff2049cffd203f4004005b4002b069600920464004802310000023500b2
027b00e40625005b0556002d0400000504000049031d0090056600960464
0054040000020464001e04e5ffc40400005404000025071d010a04e3ff9c
04e3ff9c05c7007a078d002d055600360400ffee071dffed0473018a0473
017502aa01b202aa01910464003503f4002f038dff60047300b70156feab
0400001102aa007402aa002e0400fe7d0400fe7d0400ffe3020000d202aa
00410473001e0800007f04e3ff9c04e3ffd204e3ff9c04e3ffd204e3ffd2
02aaffc002aaffc002aaffc002aaffc005c7007a05c7007a05c7007a05c7
00da05c700da05c700da0239005802aa00fe02aa00c602aa00f602aa0126
02aa01c102aa017d02aaffdb02aa012f02aa001102aa01520473ffc60239
00330400000e031dfff00473fffc031dffc7023300ed05c7ffd004000037
047300b7038dff6004e3ffcf0400ff1e056600960566017a026600a30266
006f02660084060000a1060000a1060000820400ffce05c7008e0400ffc9
02aaffc00400000e031dffed0556008a038d003c0556008a038d003c0400
0027040000c502ab01ee04e3ff9c0400003004e3ff9c0400003005c7ffc3
04de002705c7ffd004e3ffd2038d004004e3ffd2038d00400473ffbe0239
004f0473ffbe02e9004e0473ffbe029500490556ffc7040000270556ffc7
0400002705c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a0400
000e031dffed0473008f0239ffbd0473008f02e9005605c700da0400003c
05c700da0400003c0473fffc031dffc70473fffc031dffc7048dffb605c7
007d0617009d0433003c03b800300327001603f2003602dd0033046d004a
0400ffef0495009a0285001407eb002f0800004f040000990800004f0400
00990800004f040000980400009807d5016a05c700c0056600c604cd0099
0566009804d5022204d5010505abffe904ed01c005ab027e05abffe905ab
027e05abffe905ab027e05abffe905abffe905abffe905abffe905abffe9
05ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905ab02d605ab006605abffea05d5ffff04d500920800
000007eb013007eb012007eb013007eb012004d500b204d5008004d5002a
082b0198086b01b807550010060000f40600006f0440003a0540003704c0
003f0415004004000025060000550600ffc30401004b049e007301c0010d
0355012606ab006c0355001e04d5009202d6008302d6008304d500b202d6
007004e3ff9c040000300556008a038d003a0556008a038d003a04e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004005c7008e0400ffc905c7
008e0400ffc905c7008e0400ffc805c7ffca0400002905c7ffca04000029
02aaffc00239005402aaffc00239005802aaffc00239005402aaffc00239
ffc6038dffba0239fea00556ffc9038d0014038d00140473ffbe0239ffb6
0556ffc7040000270592ffc003db002705c7007a0400003c05c7007a0400
003c04e3ffd1031dff980400000e031dffed04730093023a003105c700da
0400003c05c700da0400003c05c700da0400003c05c700da0400003c06aa
00f905560023047300b8038dff5e0239fe9d04e3ffa504000030071dff94
0556002d05c700480400000502aa014d06aa00f90556002306aa00f90556
002306aa00f905560023047300b8038dff5e02aa01bd02aa00b704000031
04cd005a060000a10600008206000084060000e802aa004c02aaffdb02aa
019902aa00b404e3ff9c056f005d065600590337004d05c7007a0548005e
05cf00200239005404e3ff9c04e3ffd104b2ffa704e3ffd20473fffc05c7
ffca02aaffc00556ffc904d5ff8f06aaffbd0556ffc7051dfff205c7007a
05c7ffc504e3ffcf04c1ffb90473008f047300b804e3ff7705a0011305c9
001b02aaffc0047300bc0433003c0327001603f8003a0239005503ac0035
03fcff7703270031033d002f03f8003a03ee005a0239005503d7001f0377
ffc00404ff94038d002c036d00250400003c03d7ff6f033f003f03ac0035
0385ff4004f8008f05a600480239005503ac00350400003c03ac00350595
003f04e3ffce066000c1048dffb6055a008e0400000e02aaffc002aaffc0
038dffba076bffbb075effc2066400c60550ffc7056200e105c7ffcd04e3
ff9c04b8ffc604e3ffd1048dffb60517ff2d04e3ffd20754ff9003f6fffe
05c7ffcc05c7ffcc0550ffc7056bffb906aaffbd05c7ffca05c7007a05c7
ffc504e3ffcf0556008a0473008f056200e1066f009504e3ff7705c7ffcc
058300e70858ffe40858ffe40568007606faffc604b8ffc6053d001e0842
ffbe0542ff9104000030040600490379003f031f0002040c003d038d0040
0771ffff031fffce0400003c0400003c03be0025037dffa5051bffa403f8
00290400003c040000270400ff1e038d003805c70023038dff5c05ae003c
038dffb80400003c03d10056060a0040060a00400427003c056b006603a4
00660387000f05a4002a03b8ff84038d003c03d500280304ffaa037d0036
031dffed02390058023900550239fea0056fffa605b2002a0400002903be
0025038dff5c040000250385ffc30285005608000041078bffa804020032
0000fefb0000ff3a0000ff380000ff380000ff3a0000ff3a0000ff3a0000
ff380000ff38000000770000ff3a000000f70000feb502f700c00000fff3
02aa005f0000037a0000003602aa007a03d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00bf0208002903c4fffa03d3005901ef00c6038000c1
0349ffc7037000c703c8ffe403c3ffde020b004a023cff9d03b1006b0383
ffcd0372004f036effd5039000c50397fff0038eff8f039500bc04f500c2
03cbff85043800bf040b00c603de00c60186009b02f1009b064c0010021c
00bf038000c10380009c0370000a0370000a0383ffd104f500c204f500c2
04f500c204f500c203d3ffd503d3ffd503d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00670225000303d3005901ef0067038000c10349ffc7
037000c703c3ffde023cff9d03b1006b0372004f036effd50397fff0038e
ff8f039500bc04f500c203cbff85021c00bf037fffc50349ffc7036effd5
0448004a0000ffdc0000ff250000ffdc0000fe510400005a0800000005c7
007a0445003c060800da045d003c0000ff1a0000fdf20000fdb40000ff91
0000fef60000fee40000ff780000ff8a0000fe880000fefb0000fea20000
fe6e0000fdf4000000350000001f0000fe47041a0078060000a10600006f
0000ff2b0000fe6c0000fe8a0000fdd20000ff1e0000fe380000fdcd0000
fd190000fce70000fd710000fd3f0000fcf90000fccd0000fc050000fc05
0000fc550000fc0f0000ff190000ffa20000fe310000fc550000fcef0000
fd9c0000fdda0000fca10000fd530000fcef0000fcb30000fd0d0000fcb3
0000fdba0000fd940000fd7e0000fd300239005804e3ff9c0400003004e3
ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c04000030
04e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400
003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3
ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d0040
02aaffc00239005802aaffc00239003105c7007a0400003c05c7007a0400
003c05c7007a0400003c05c7007a0400003c05c7007a0400003c05c7007a
0400003c05c7007a0400003c05c7007a0445003c05c7007a0445003c05c7
007a0445003c05c7007a0445003c05c7007a0445003c05c700da0400003c
05c700da0400003c060800da045d003c060800da045d003c060800da045d
003c060800da045d003c060800da045d003c047300b8038dff5c047300b8
038dff5c047300b8038dff5c04e3ff9c0400003002aaffc00239005805c7
007a0400003c05c700da0400003c05c700da0400003c05c700da0400003c
05c700da0400003c05c700da0400003c000000be000000be000000be0000
00be048dffb6031f00020754ff900771ffff0550ffc703be00250550ffc7
03be002505c7ffca03f80029047300b804000003047300b80400ffdf04e3
ff77038dffb8058300e703d100560583ffca04000029058f007a038d001b
05c7007a0400003c01ef00b70000ffd50336ffea03de006204000036054b
003904b8ffc60400003604b8ffc604000036055600330556008a038d0038
05c7ffd0063d003904b800260400002703b8000804e3ffe603f6003b04e3
fecd05c7008e05a30100060e00290239004f02aaffc00556ffc9038d0014
0239004a0377ffc0064500870556fecd03f8003a05c7007a0766008e0568
003c054d00390400ff1e04e3ffcf04000013031d001604c1ffb90222004f
0239ff5e0473008f02390054047300cd05c9007a056f00da049d00dd0416
ff5c0473fffc031dffc70453ff5d0453ffdd038dffad038dfff004000020
03b200490311ffb30296ffed042eff1e019a00a1023f00a101fe000a02aa
009a0a3affc308e4ffc3071d00270800ffbe06acffbe0472004f08e6ffc7
078fffc706390027038d001b04e3ff9c04000030000000f304e3ff9c0400
0030071dff940556002d05c7008e0400ff6d05c7008e0400ffc90556ffc9
038d001405c7007a0400003c05c7007a0400003c0453ff5d038dff6a0239
fea00a3affc308e4ffc3071d002705c7008e0400ffc90794ffca04c7ff41
0556ffc70400002704e3ff9c0400003004e3ff9c0400003004e3ffd2038d
004004e3ffd2038d004002aaffc00239002102aaffc00239005805c7007a
0400003c05c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a05c7
00da0400003c05c700da0400003c0400000e031dffed0473008f0239ffd4
04f2ff940321ff4905c7ffca040000290546ffc404e50033045100500473
fffc031dffc704e3ff9c0400003004e3ffd2038d004005c7007a0400003c
000000b305c7007a0400003c05c7007a0400003c05c7007a0400003c0473
00b8038dff6003890048040000300400003004000036038d0011038dffb6
0400002704000027038dffdf04bd001b03270016031fffce0467ffce03bf
003a0239fea00400ffcd0400ffcd03f5003c03cf005803a700750400003c
04000029040000290239000b023900580226ffc6023900460239004f0239
0006046b004805c7003c05c7003c05c700230400fe8404000027040fffe8
0400003c0563003c05a600480456003c031dffdc031dffdc031dffdc031d
ffab031dfffc02df002702df0091038effc603d6ffc6031dffa8024bfea0
024bfea002040014024bfec80239fff702390006040000070429003d03eb
0035038d001205560013038d001203050038031dffc7031dffc7038dff6a
038dffbe034a0007034a007c034a00000389ffe905c7007a0370ffc603bf
000603f5003c0418ffc60239fe9c038dffbd031effc60400002d034a0007
034a007c060c0027065c0027060a0027047b005a0395ffea051d005405cf
fe9b045c004f041a004f041d004603d9ffc00245006f0245006f0151ffa9
01c7006f01c7003d01c7003d02470040031d0081020a000801b6010d035c
012602aa01b202aa019102aa01bd02aa01dd02aa01dd022d00cb022d00e2
0566002705660025056600c4056600c402aa020702aa019902aa016802aa
00a302aaff5902aaffff02aafff6023900610239013302aa00f702aa00f7
02aa00a602aa00a602aa00a602aa000802aa0003030e0105025700aa0117
006f01b000560242005a022d00e203100096031000960310009603100096
0310009602aa006202aa006202aaffbe02aa00ae04730175045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000ff9a0000ff890000fef40000ffe8
000000720000ffcf0000001b0000fffd000000090000008f0000001f0000
ff6a0000ffe80000ffe8000000500000002a00000074000000e80000fec0
0000fea30000fea30000fea30000ff7a000000ad0000feed0000fea30000
fea30000fea30000fdfd0000fe5f0000ffd40000fe370000fea60000fe9a
0000fe8b0000ff380000ff3b0000fdfa0000fe2c0000fe7e0000fde70000
fe570000fdfd0000fe0c0000fe0a0000fd250000fe2f0000fefe0000fee5
0000fe170000fefa0000fe910000feed0000fdfa0000fead0000fe1c0000
ffe5000000650000fef40000fff00000004f0000ff990000002a0000ff55
0000fef80000ff5c0000fd180000fec00000fea30000ff9a0000ffcf0000
ff8d0000fe060000fea30000fd1f00000046000000460000ff530000ff6b
0000ff750000ffff0000ff5b0000ff600000ff740000ff6a0000ff5a0000
fece0000ff9a0000fffa0000ff770000ff4302aa019902aaff9b02aa0041
03fc003d03ed0000051700b506120064051700b50424003c05a6001f047f
000305c7007a0400002d055600a0038e002c04e3ffce03b5ffa70422004d
039c002d059d00b6042d00a10645fffd05c7fff704a5007a042700970630
ffca037effa3045600320456003204f6ffed04320048059b007603f5003c
0322fffc02b6000c047f0003040f00070391003c0239fea405c7007a0339
003c0339ffa104e3ffd205c7ffcc038d00400400003c0916007a0517009b
056600740556002707b2ffc00564ffc60593ff8f0456ff960827ffc00640
ffc606d9ff740516ff840981ffc00714ffc603f6ff56031fff2d05a000db
04f8007005c7007a0400003c055c01000471002c055c01000471002c08dd
007a071b003c06420052049c00280916007a0676003c0000fe370916007a
0517009b0556008a038d0038023cffbb0000ff760000ffae000000640000
003c0000fc2b0000fc4c05c7ffcc0400003c04b8ffc603a4006604e3ffcf
0400ff1e0516ffb6038effaa03f6fffe031fffa40550ffc703be002505ff
00760438003c06f2ffca04fa00290822ffc5058700270556008e038d003a
0556008a038dfff40473009005c7002305c7ffcc0400003c058300e703d1
005606840040045f000106840040045f000102aaffc00754ff900771ffff
0550ffc703be0010056bffb9037dffa505c7ffca03f8ffbc05c7ffca03f8
0029058300e703d1005606aaffbd051bffa4044801cd04e3ff9c04000030
04e3ff9c04000030071dff940556002d04e3ffd2038d0040058f007a038d
001b0754ff900771ffff03f6fffe031fffce03f6fffe038dff6a05c7ffcc
0400003c05c7ffcc0400003c05c7007a0400003c05c7007a0400003c053d
001e0387000f056200e1038dff60056200e1038dff60056200e1038dff60
058300e703d1005606faffc6056b006604b80047040000270669004705a2
0027063700ea052d0082042800ea031f0082073affb90526ffa50794ffca
0590002905c7008e03f5003c056e00cd075a00230000fe2a000000030000
002400000073000000000000fe3e000000630000ffb80000ff730000ff84
0000fe4f000000110000010e0000ffb70000ff35000000020000000d0000
fe6a0000fe8a0000fe400000fde00000fe7900000063000000240000fe55
0000005a0000002d0000ff380000fec00000006500000042000000a30000
00a3000000b3000000b3000001440000010d000000a304e3ff9c04000030
04e3ffd10400003604e3ffd10400003604e3ffd1040000210556008a038d
003c05c7ffc30400002705c7ffc30400002705c7ffc30400000d05c7ffc3
0400002705c7ffc30400000304e3ffd2038d004004e3ffd2038d004004e3
ffd2038dffc704e3ffd2038d000004e3ffd2038d004004e3ffce0239fe9b
05c7008e0400ffc905c7ffca0400002905c7ffca0400002905c7ffca0400
002905c7ffca0400ff9f05c7ffca0400002902aaff880239ff7402aaffc0
023900580556ffc9038d00140556ffc9038d00140556ffc9038d00140473
ffbe023900130473ffbe023900130473ffbe0239ff4f0473ffbe0239feff
06aaffbd05c7002306aaffbd05c7002306aaffbd05c700230556ffc70400
00270556ffc7040000270556ffc70400fff90556ffc70400000305c7007a
0400003c05c7007a0400003c05c7007a0400003c05c7007a0400003c04e3
ffcf0400ff1e04e3ffcf0400ff1e04e3ffd1031d002a04e3ffd1031d002a
04e3ffd1031d002a04e3ffd1031dff090400000e031dffed0400000e031d
ffed0400000e031dffed0400000e031dffed0400000e031dffed0473008f
023900540473008f02390013047300350239ff59047300170239fef505c7
00da0400003c05c700da0400002805c700da0400000305c700da0400003c
05c700da0400003c04e30100038d002c04e300b3038d002c06aa00f90556
002306aa00f90556002304e3ff77038dffb804e3ff77038dffb8047300b8
038dff600473fffc031dffc70473fffc031dffc70473fffc031dff810400
ffe50239005405560023038dff60040000300239fe9d0433003c0433003c
0433003c0433003c0433003c0433003c0433003c0433003c04e3ff9c04e3
ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3ff9c03270016
032700160327001603270016032700160327001605ab008d05ab009a06d7
007f06d700b906d7007f06d700b903f8003a03f8003a03f8003a03f8003a
03f8003a03f8003a03f8003a03f8003a068f008d068f009207bb007f07bb
00b907bb007f07bb00b907bb00d007bb00d0023900580239005802390043
02390058023900580239005802390058023900580372008803720088049e
007f049e00b9049e007f049e00b9049e00d0049e00d00400003c0400003c
0400003c0400003c0400003c0400003c068f00c9068f00f507bb007f07bb
00b906f3007f06f300b903ac003503ac003503ac003503ac003503ac0035
03ac003503ac003503ac0035053b009106cb00b906cb00b906cb00d005a6
004805a6004805a6004805a6004805a6004805a6004805a6004805a60048
069100c9069100e307bd007f07bd00b906f5007f06f500b906f500d006f5
00d00433003c0433003c032700160327001603f8003a03f8003a02390058
023900580400003c0400003c03ac003503ac003505a6004805a600480433
003c0433003c0433003c0433003c0433003c0433003c0433003c0433003c
04e3ff9c04e3ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3
ff9c03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb
03f8fffb068f008d068f009207bb007f07bb00b907bb007f07bb00b907bb
00d007bb00d005a6004805a6004805a6004805a6004805a6004805a60048
05a6004805a60048069100c9069100e307bd007f07bd00b906f5007f06f5
00b906f500d006f500d00433003c0433003c0433003c0433003c0433003c
0433003c0433003c04e3ff9c04e3ff9c04e3ff9c04e3ff9c04e3ff9c02aa
019102aa004102aa019102aa00c602aa010c03f8fffb03f8fffb03f8fffb
03f8003a03f8fffb060f00fe060f00d106f300f606f300d105c7ffca02aa
00e302aa00e302aa013402390058023900580239003c0239003c02390058
0239005802aaffc002aaffc003d600ec03d600d102aa011d02aa011d02aa
013403ac003503ac003503ac003503ac003503d7ff6f03d7ff6f03ac0035
03ac0035047300b8047300b806030104060300d105ab009702aa00b402aa
00b402aa016805a6004805a6004805a6004805a6004805a6004806f30104
05c7007a06f5010405c9001b05c9001b02aa019902aa01bd04ef00ba0556
008a0556008a05c700230556ffc70871ffd106aa00590556ffc90473008f
0800ffbe0400ffad04c10066000000460000004600000046000000460239
000b0239fea00400ffc404e3ffcf040000270239ff40040000270239ffb6
044affe3044affe302aafffd02aafffe02aa002402aa003402aa000202aa
009502aa001402aa002102aaff6c02aa00ff02aa019f02aa019102aa000a
02aaffef032effa6032effa402aaffb000000033000000680000ffb60000
fea60000feed0000fee70000fe1a0000006800000046000000460000fe0a
04e3ffcf0400ff1e0330ff900491ff900556002d0343ffc7039d003c0411
ffc60411ffc6031fffc6031fffce023900090307002a03abffc60332ffda
04ccffda040bffc60400003c03c8003c042a003c042a003c0497003c0556
00360385003c03ee003c03ee003c0346ffc603efffc603370014030a0044
03ec00840471006a057d008004ef00b7035e008c049e008c0337fff102d1
ffdc033600000466ffba032dffc60331ff900403ffc60346ffc603f60092
03a2ffbc0354006304940063035b0089035a008903d60089034100890341
008f03a400de02dbfffa0217008902b900a803f200830332008204880084
03ac008a03f3008503cd00de02b200ad031f0082037b0084031700f203fe
0138048b014d033000e7033000e7033000e7032800850227006a027b0089
021900870219008601e4007801e40070024900350144005b0240006f0356
006e022a006e0249007b0214007202490083024900780243ffda01580098
02580085028b009103720085023d008a02d900690246000301d80080023b
00830271007d0227fff80144000a01f8ffe20258ffe9023dfffc0246ff72
01d8ffe00246ffc90271ffdc0227ff5d0509ffd5048300bd04faffd10475
ffc7049c00c704f4ffe404cb00bc04f7ff85048300250000ff3a0000ff38
0000ff380400ffee0473018a035c00db0400000008000000040000000800
000002ab000002000000015500000400000002000000019a000000ab0000
000000000556008a06aaffbd04ccff5f05cf003c060500270608002d04e3
ff9c0556008a040000720473ffbe0473ffa5031dffed031d000403e50061
000001cf0000feb60000fe140000003c0000ffcb03d7ff340556008a0556
008a0556008a048dffb6031f00020000fe54000000770000fee40270ffd3
0000ff3804000036040000270239fe9b05c7000b040000140400fefa031d
ffae02dfff9f031dffed0239ffcf031dffc70400ff750258002803c5ffaa
059affc30226ffc60239000b0400ff1e03ec00290429ffe3040000360400
002702d6fe9b04bbffc9038d00140239ffac05c70023040000270400ff1e
031dff1a031dffed02d1fea0038d002c038dffb8031dffc7040000300400
003004000027038d004003270016031fff65038d001b02390058038dffa6
024bfec40400003c038dffad033000e7021a007b021a002f0252007b01e4
00700164ff960164ffaf0288007b0258008d0144006b0144009301440048
014400480144ff970144006b0144002b01c5002c032b0065032b0072022a
ff61022a006f022a00340249007a027b007b01cf00310164ff9c01580001
0258006a0262007b025800aa02580083023d008101ef005601ef0057021b
005601effff2024900910000ff510000ff540000fee10000ffa002aa007a
0257ffed0219ffe30249ffe50246ffcb0219ffe005c7008e04e3ff9c0400
00130556008a02aaffed0433003c0433003c0433003c0433003c0433003c
0433003c0433003c0433003c023900580239005802390058023900580239
005802390058023900580239005803ac003503ac003503ac003503ac0035
03ac003503ac003503ac003503ac00350239005802390058023900580239
005803ac003503ac003503ac003503ac0035037d003804e3ffd105c70066
04d5ff8f04e3ffd2038d0040038dffba0239fea005aa008e0400002d04e3
ffd1031d0015047300a2038dff5c039100140391003c039100140239004f
048dffb6031f000204e3ff77038dffb804e3ff77038dffb803f6003b037d
0017056bffb9037dffa50000ffbe0000ffb50000ffdc0000ff950000ff54
0000ff330000febc000000500000fe1a070e0020031fffde039100140473
ffbe023900350473ffbe04e3ffcf04e3004c040000300239ff9005c7ffca
040000290556ffc9038d00140473fffc031dffc7038d003a04ccffca0345
0029046d004a0000006a000000a6000000270000000a0000ffa70000fe6e
023900580592ffc00556ffc70592006e0000fecc0000ff1c0000fee20000
fef70000fedd0000fee60000fec50000fefa0000fee50000fec50000feb2
05c700610400002d06aa00f9055600230579ffb10000ff8305be007a0474
002c06aa00f90665002302aa00b0033d007701b600a201b600f004000099
0400009902aa018102aa017b02aa010a02aaff7404730077040000910400
005a02f2001e03df001103cfffe60400001703aeffd504180084040000b4
0400006b04180036043900970323001404000020039f00260400004003c0
00290400008103b800be0400004e0400003b023900580471fe980695fea9
0692feab0435fe9c068afea903c9ff8803e2ffbc0434004e04a8ffbc03a9
ffbc036cffbc0476004e04c7ffbc0257ffbc0298ffc30462ffbc038affbc
0533ffbe049affc70476004903b3ffbc04760048040affbc0334fffe03a8
006f049b009603c3007605dc008b0405ff9903f6008b0405ffc90548ffa6
05dc0049038affbc0476ffe703b3ffbc04a8ffbc0466ffb003c9ff8803c9
ff8803c9ff8803c9ff8803c9ff8803c9ff880434004e03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0257ffbc0257ffbc0257ffbc0257ffbc049affc70476
004904760049047600490476004904760049049b0096049b0096049b0096
049b009603f6008b03c9ff8803c9ff8803c9ff880434004e0434004e0434
004e0434004e04a8ffbc04a8ffbc03a9ffbc03a9ffbc03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0476004e0476004e0476004e04c7ffbc0476004e04ac
ffbc0257ffbc0257ffbc0257ffbc0257ff8f0257ffbc04b2ffbc0298ffc3
0462ffbc038affbc038affbc038affbc038affbc049affc7049affc7049a
ffc7047effbc047600490476004904760049040affbc040affbc040affbc
0334fffe0334fffe0334fffe0334fffe0334fffe03a8006403a8006f03a8
006f03b20079049b0096049b0096049b0096049b0096049b0096049b0096
05dc008b05dc008b05dc008b05dc008b03f6008b03f6008b03f6008b0405
ffc90405ffc90405ffc903c9ff880548ffa60476ffe703c9ff8803e2ffbc
0356ffbc03d7ffb403a9ffbc0405ffc904c7ffbc047600480257ffbc0462
ffbc0414ffab0533ffbe049affc703e3ffd00476004904c1ffb603b3ffbc
03b3ffbf03a8006f03f6008b047f00350405ff9904a400bd048dffc503c9
ff8803a9ffbc04c7ffbc0257ffbc04760049048dffc503f6008b0257ffbc
03f6008b03a9ffbc04c200720356ffbc0437004e0334fffe0257ffbc0257
ffbc0298ffc305a3ffad05c8ffbc04ba0069044affbe0435005504c8ffbe
03c9ff8803cbffba03e2ffbc0356ffbc045cff4d03a9ffbc05b0ffa5035c
ffe804c6ffbe04c6ffbe044affbe045bffad0533ffbe04c7ffbc04760049
04c1ffb603b3ffbc0434004e03a8006f04350055048600350405ff9904c9
ffb6044c00a5068dffcd0694ffcd0491007905b1ffba03ccffba04370013
0659ffbc0437ff890356ffbc02560056025600850256004a025600540256
00480256004a02560052025600a60256004c025600560256005602560085
0256004a02560054025600480256004a02560052025600a60256004c0256
005604cf003007bdffc407bdffc407bdffc407bdffc407bdffc407bdffc4
07bdffc406b4003c0513007a0513007a0749003c06ad003c06ad003c06ad
003c06ad003c06ad003c0664003c05cb008d0794ffc40487003c0487003c
0487003c0487003c0487003c048effc40723003c050dffe7050dffe709d7
ffc407bcffc407bcffc405a7007905a7007905a7007905a7007905a70079
05a70079062b0054062b00540672003c05c7007d06e6003c043dffb5043d
ffb505a2003c06eb003c06eb003c06eb003c06eb003c06eb003c0612003c
0811003c0673ffc404ad007c04ad007c04ad007c04d9fff104d9fff10759
005e07bdffc407bdffc407bdffc40513007a0513007a0513007a0513007a
0749003c06ad003c06ad003c06ad003c06ad003c06ad003c05cb008d05cb
008d05cb008d05cb008d0794ffc40794ffc40487003c0487003c0487003c
0487003c0487003c048effc40723003c050dffe7050dffe7050dffe7050d
ffe707bcffc407bcffc407bcffc405a7007905a7007905a7007906e6003c
06e6003c06e6003c043dffb5043dffb50400000e0400000e05a2003c05a2
003c05a2003c05a2003c06eb003c06eb003c06eb003c06eb003c06eb003c
06eb003c0811003c0811003c0811003c0811003c04ad007c04ad007c04d9
fff104d9fff10723003c0774008f0884003c0428ffca031c003c0473008f
0423007b05c7006204400027052effc9040000c60400006b0400fffd07db
ffb90553ffa5074cffcf058fff1e0781ff910591ff840556ffc903d7001f
07f2ffb90504ffa5084cffca0577002905c7ffc5040000270583ffca0400
00270239fe9b0239fe9b03b800300688ffc00438004f046b007a03ae003c
04fdffce03bbfec306aaffbd04e3010a05be003704700040031dfff10400
003c031fffe60151fefa035e010b0400000e0473fffc0239ffc60400ffab
05c500d40590ffa605d400c405f30049058100d405c4002904faffb0059e
ffa60722ffa806170055054fffb00412ffb00770ffb005de0089059a00e4
04b7ffd005cf004d05c4004905c1002f068500d505aa007b05a200b90587
005e05b8ffa6059300cb06a4003f05b5001b0657ffa605b800d505e90053
052f005b0570ffa605860068047dffb5063f0088066f000605e800800679
00670199013201fe01430154008d00f7009001a8009201da0065047501d9
05c9003e03cfff200420003f03fe002903e800410416003d0339001803fa
ffaa0516ff200442004703fdff2001ffffae05f5ff2003fc004603c80047
03e7001703d7003a03fd002903d40039040c003b01d3fe8403e6004702e9
ff0d03fa00290239ff2c05b5003c037eff670438002903fa003b03f8003d
05e0003c03faff2003d1fff70287002d05c5003b042aff2a040d00400575
003704b100410239007a02f400bf077a0045077a00450616004907f2003b
07f4003b0809003b07de003d0a01003b0000ff7d0291ff7e035700bd03ce
ffd103cbff850000003a0000ffc80400ffda000000000000006800000068
000000680000006800000116000001fe0000040c0000065e000007ec0000
099c00000a0e00000a8e00000b1600000ce800000d5c00000dd000000e08
00000e5200000eb800000fbe000010ea0000120200001356000014e60000
16140000174c000018220000197600001ab200001b3600001be600001c9a
00001cf400001db200001eec00002140000023540000259a000026a40000
281a00002a6c00002c4800002db6000030a20000329e00003406000036a8
0000383200003af400003ce800003e0800003fbe00004196000043c00000
45c0000047580000494800004b2200004dae00004fda000051fc0000535e
000054500000549c000055bc000056240000565a000056ca000059460000
5ac200005c4600005ebe00006032000062640000644c00006642000067e6
0000696000006bba00006d440000707e000072b2000073b8000075a60000
77860000790400007a5400007bc000007e0a00007f80000081800000835a
0000851a0000871a0000881a000088560000896400008a0c00008a400000
8a8000008aae00008af600008b2e00008b6000008b9800008bc800008bf8
00008c2800008c5a00008c8e00008cca00008cf800008d2600008d5a0000
8d8a00008dba00008dea00008e1a00008e5600008e8600008ec000008ef0
00008f2000008f5000008f8400008fba00008fec0000901a0000904c0000
907e000091b000009238000093b800009558000096c600009734000097ea
000099d600009be000009d8c0000a0340000a0920000a1280000a20e0000
a4ee0000a6ac0000a8060000a8a60000a9ae0000aaa60000ad120000aeae
0000afa60000b0de0000b1c40000b3660000b47a0000b5de0000b6560000
b7e00000b9c80000bb8a0000bc7c0000bd480000bd920000be380000bfec
0000c1200000c1aa0000c28e0000c3680000c4100000c4420000c4720000
c4a20000c6f40000c8a80000c8de0000c9160000c9f00000cac60000cb30
0000cba20000cc520000cd0c0000cd500000cd8a0000cddc0000cf3c0000
cf9e0000cffa0000d1fa0000d4020000d5d00000d6120000d6860000d75a
0000d98a0000d9ba0000d9ee0000da1e0000da520000da8e0000dac00000
daf00000db2e0000db620000db920000dbcc0000dbfc0000dc400000dc8a
0000dcc00000ddb40000de240000debe0000defc0000df780000dfc40000
e0320000e0d80000e1740000e1e20000e2520000e41e0000e57e0000e5b0
0000e5e00000e6120000e6440000e6a80000e82c0000e9a00000e9d60000
ea0a0000eba00000ed2a0000ed600000ee380000ef5e0000f0460000f142
0000f3540000f59a0000f7e00000f9ac0000f9dc0000fa0a0000fa440000
fa720000fa9e0000face0000fafe0000fb380000fb720000fd580000fd92
0000fdd80000fe080000fe360000fe5c0000fe820000feb20001008a0001
009a000100c2000100e80001011c0001016400010194000101c600010346
00010486000104bc000104fe000105300001056400010594000105d40001
06220001066e0001069e000106d80001070a0001074200010778000107b0
000107d6000107fa00010840000109a8000109dc00010a1a00010a660001
0ab200010ae200010b1c00010b5400010b8600010c9400010e520001105a
00011182000112be00011416000114fa000115fe0001177a000117e40001
180c0001195800011c6a00011ce200011d6200011ddc00011e5800011efe
00011fae00012088000120de0001218e00012218000122be0001230a0001
238e00012412000124480001246400012484000124a4000124c4000124e4
0001250a00012530000125560001257c000125ac000125d4000125fc0001
26260001265000012684000126ae000126da000127100001273800012764
00012798000127c2000127ec000128200001284e00012882000128c40001
28f4000129280001296a0001299e000129d000012a1200012a4600012a76
00012ab800012afc00012b4200012b9e00012bba00012bd600012bf00001
2c0a00012c2400012d920001303c000132ac000132c6000132e0000132fa
00013316000133320001334e000133aa000133e40001344c000135240001
35c8000136a000013720000137a800013816000138ac0001390400013944
000139a200013a0400013a4600013ac600013b0c00013b1c00013b2c0001
3ce800013e2400013e4e00013e6a00013e9600013ece00013f1a00013f5e
00013f9200013fc200013ff80001402800014056000140a0000140d20001
4102000141360001416c000141a4000141d8000142080001423800014266
0001428c000142be000142ee000143300001461e00014818000148640001
489a000148d8000149060001494c00014982000149a6000149ca000149fe
00014b4e00014b7400014b9800014d9000014db600014ddc00014e020001
4e2600014ff0000151da000152100001524000015274000152a4000152ca
000152f0000153240001535200015534000156f800015738000157680001
5798000157d60001582a0001585a00015880000158a6000158d600015906
000159360001596400015a7200015ac200015af200015b2200015b520001
5b8200015bb200015bfc00015c2c00015c5c00015c8c00015cbc00015cf0
00015d2800015d5c00015d8a00015e1000015e480001604e000161600001
63940001658800016768000169100001697400016a0c00016a1c00016ade
00016cca00016ee80001710a000172320001732800017570000177820001
79060001791600017926000179f800017a0800017a1800017a2800017a38
00017a4800017b8200017b9200017ba200017dde00017dee00017f6a0001
7f7a000180d6000180e6000180f6000181060001833a0001854200018576
000185b4000185e4000186120001864200018672000186b2000188140001
893000018a6200018bf600018cfc00018d0c00018ef20001901c0001916c
0001917c0001930e0001931e0001944e0001957000019690000198000001
9a0a00019b6800019b9800019bec00019c1c00019c5200019c8600019cba
00019eda00019f0a0001a0120001a0220001a0320001a0660001a0760001
a26c0001a5320001a7440001a7740001a9840001abfa0001ac0a0001ae26
0001ae360001ae460001afaa0001afba0001b2da0001b4000001b6d00001
b9fc0001bbba0001bd100001bd200001bd300001bd400001bd500001bd60
0001bd700001bd800001bef20001c1420001c1520001c3a80001c5720001
c7940001c9de0001cb280001cda80001cf720001d0b60001d3320001d4b6
0001d4c60001d60a0001d7200001d8120001d8ec0001d8fc0001daec0001
dc160001dc260001dece0001e05a0001e1d80001e3c60001e52c0001e53c
0001e54c0001e55c0001e56c0001e57c0001e58c0001e7b20001e7c20001
ea400001eb960001edcc0001f0540001f1b80001f3cc0001f5280001f632
0001f77c0001f9540001f9840001fafe0001fc5c0001fd800001fd900001
fda00001fdd00001fde00001ff4e0002013a0002014a0002017a00020332
00020540000206d2000207e80002081c00020a7600020c2200020c9e0002
0dc000020e5a00020f2800020f6e00020fe600021098000210c00002112a
00021170000212240002126a00021294000212bc000212e40002131e0002
1360000213a200021420000215ca000216ac000217dc0002187e000219a4
00021a3800021ae200021c0000021d2800021dd600021e7c00021f160002
20360002211000022238000222e0000223980002248c0002260e0002272a
000228320002297400022ae400022c0800022c9800022e6e00022f580002
305e0002319a000232be000233400002341e000235140002352c00023544
0002355c000235720002358e000237220002373a00023752000237720002
3792000237aa000237c2000237da000237f0000238060002381c00023834
0002384c000238640002387c00023894000238aa000238c0000238d60002
38ee000239060002391e000239360002394e000239660002397e00023994
000239ac000239c4000239dc000239f400023a0c00023a2400023c360002
3c6000023d7a00023e2c00023ed60002401c00024362000244f200024630
000247fc00024a2800024aaa00024b0000024b5800024bee00024c820002
4cda00024d9c00024ea200024f600002502c000250dc000251c20002525e
00025322000253d600025416000255de000257bc00025964000259b80002
5a0c00025a6000025ab400025b5800025bf400025ca000025d4c00025df8
00025e8c00025f2000025fb400025fc600025fd800025fea00025ffc0002
600e00026064000260bc0002615000026162000261740002618600026196
000261a8000261ba000261cc000261de000261f000026202000262e80002
63940002647a00026526000266260002665000026680000266b8000266e4
0002672c00026790000267ec0002683600026888000268f6000269480002
6998000269da00026a2c00026a7a00026aba00026b0c00026b5c00026ba6
00026bf000026c3000026c7400026cba00026d0200026d4200026d680002
6da200026dd000026e0400026e5600026ebe00026f1800026f7e00026fbe
0002701a00027090000270ec0002713200027198000271d6000272160002
724e00027290000272cc000272f2000273240002735c000273a200027402
0002745e000274bc000274fe00027556000275d400027624000276700002
76b4000277000002773c00027776000277ae000277de000278160002785c
0002788c000278c6000278ec000279200002795a00027980000279b60002
79f000027a3000027a6800027aa000027af200027b2c00027b6000027ba4
00027bdc00027c1600027c3c00027c7800027c9e00027ce600027d2c0002
7d6e00027dc600027e0c00027e5e00027e9800027ee000027f1a00027f6c
00027faa0002800e00028040000280f200028124000281ba000281ec0002
8288000282ba0002836e000284680002859a000286f40002881a00028936
00028a4400028cdc00028ef2000290c40002927e0002947e000296960002
9854000299b4000299c400029ae800029c5000029dae00029f420002a0d2
0002a2940002a4400002a5760002a5860002a68c0002a7620002a87a0002
a9500002a9680002a9b60002a9de0002a9f40002ab7e0002ad260002aea8
0002afca0002b1020002b1fc0002b34e0002b4a00002b5d60002b5e60002
b7640002b8c80002ba2e0002bb800002bd000002be2a0002bf760002c0e4
0002c26a0002c3ee0002c3fe0002c5400002c72a0002c8d40002ca060002
cb580002cda40002cf020002d01a0002d02a0002d1900002d2f80002d44e
0002d5c40002d7620002d91a0002daac0002dabc0002dba80002dd320002
de3a0002df600002e0860002e25a0002e3920002e4e80002e6300002e74a
0002e85e0002e9800002ea860002eb8a0002ecec0002edce0002eec00002
efd40002f13e0002f2660002f28e0002f2ce0002f3420002f3520002f394
0002f3d60002f4180002f43e0002f4660002f49a0002f4c20002f4ec0002
f5280002f5fa0002f6240002f6740002f6dc0002f7040002f7520002f782
0002f7b20002f95e0002fba00002fbd00002fbfe0002fc2e0002fc5e0002
fc840002fcaa0002fcec0002fd2e0002fd5e0002fd8c0002fed40002fefa
0002ff200002ff460002ff760002ffa6000301e000030318000303480003
0376000303aa000303de0003040e0003043e00030472000304a6000304d6
000305060003053a0003056e0003059e000305ce00030602000306360003
066600030696000306ca000306fe0003072e0003075e00030792000307c6
000307f6000308260003084c0003087000030894000308b800030a480003
0b7800030ba800030bd800030d3000030eb800030ff8000310c20003119e
000311ce000311fe000314240003158c000315b600031608000316c40003
16ec0003173e0003176e0003179e000317c6000318140003184400031872
000319d4000319e400031b2600031c6000031d2800031e5200031fe00003
217a00032268000323cc000324f60003262a000327c8000328ee00032a1e
00032bcc00032d2a00032e5e00032fd6000330ec0003325e000333c00003
353c000336d6000336e6000337ac0003393e00033aae00033b8000033d40
00033f80000341a4000343d8000345980003473a000348d8000348e80003
4afc00034c4400034dee00034f20000350520003519e000352c60003544c
000354cc00035564000356ce0003584200035a1600035af000035c340003
5d2800035e3800035f2000036012000362160003634800036492000365b6
0003671200036874000369c000036ad400036bfe00036d0e00036e580003
6fa0000370c0000371e8000372bc00037410000375620003767e00037818
000379b800037af200037ca000037d9400037f2c000380ba0003822e0003
843e000386c60003890600038ab600038c9800038e70000390e200039294
000393e2000395ae0003967200039824000399f800039ad200039c040003
9d5000039ea40003a0b00003a2240003a3a00003a3b00003a3c00003a3d0
0003a3e00003a3f00003a4ac0003a57a0003a6ac0003a79a0003a7aa0003
a7ba0003a81e0003a8880003a8b80003a8c80003a8d80003a9040003a934
0003a9880003a9de0003aa3c0003aa740003ab380003ac0e0003ac440003
ac7c0003acc40003acf60003ad880003ae4a0003b0480003b11e0003b35c
0003b54e0003b6640003b69a0003b6de0003b7220003b7660003b79c0003
b7ce0003b8100003b8820003b8d40003b8e40003b95c0003b9e20003ba52
0003bab40003bb3a0003bb9a0003bc040003bc780003bce80003bd460003
bdec0003be840003bef00003bf7e0003bfd80003c0460003c0f00003c196
0003c22c0003c29c0003c31e0003c3820003c42e0003c4ec0003c5980003
c62a0003c6880003c6f40003c74a0003c7cc0003c84a0003c8d00003c95c
0003c9b60003ca220003ca920003cb000003cb700003cbf40003cc840003
ccea0003cd640003cde00003ce580003cefe0003cf960003d0260003d084
0003d1220003d19e0003d2300003d2d40003d37e0003d4160003d4720003
d4c60003d52e0003d5d40003d67e0003d7480003d7ee0003d8500003d8a8
0003d9080003d9960003da1c0003daaa0003db0a0003db6e0003dbd80003
dc400003dca80003dd200003dda80003de3c0003dea80003df100003df74
0003e0200003e0e00003e18e0003e21c0003e27a0003e2e60003e3560003
e3fa0003e4a00003e5640003e6060003e66a0003e6fa0003e76c0003e804
0003e8820003e8fc0003e9680003e9f60003ea520003eab00003eb360003
ebb20003ec1a0003ec7e0003ecd20003ed400003eda80003ee260003ee9c
0003ef160003ef960003eff20003f0580003f0bc0003f15c0003f1fe0003
f2bc0003f36c0003f3c80003f4400003f49e0003f5280003f5c00003f64e
0003f6b40003f7120003f7a00003f8120003f8ac0003f9400003f9b00003
fa200003fa980003faf60003fb560003fbd00003fc2a0003fc8a0003fce4
0003fd400003fda80003fe140003fe460003fe700003febe0003ff020003
ff720003ffda0004002800040096000400c60004011000040166000401e2
0004022800040288000402f00004033e000403a6000403d80004040a0004
043e00040474000404a6000404fa000405c6000405fc0004063000040676
000406a60004072a000407b40004082000040884000408d6000409440004
09b0000409de00040a2200040a8e00040b0000040b7000040bc000040c0c
00040c9a00040cca00040cf200040d3400040dc400040df600040e280004
0e7a00040ec200040f8400040fc800041004000410800004119a00041208
0004124c00041280000412b600041346000413ae000414400004149c0004
14e2000415260004156e0004159c000416d4000417c2000418c400041914
0004195000041c7000041cd200041d2200041d6200041e9400041f760004
2074000421840004232e000423f60004257a0004272c000429b400042ae6
00042c1600042d1800042f0a00042f1a00042f4c00042fa8000431160004
329400043406000434380004346c000435b6000436fc0004391c00043aae
00043c0a00043d0800043df800043f1a0004401200044134000441be0004
434200044462000446aa000448e800044a4800044bac00044d5000044e82
00044ffc0004510600045250000453da0004551a00045620000457b60004
58dc00045a4a00045bce00045c7800045c8800045c9800045d3200045dea
00045e1a00045e4a00045e7800045ea6000460aa000461f6000463980004
650a00046702000468e000046afa00046d0400046fd20004728800047486
00047620000478ec00047b6600047dec0004804600048234000483800004
84e8000486340004873e000488320004898c00048ad800048d0200048edc
00049064000491cc0004944a0004960c0004966c0004969c000496cc0004
98120004991a00049a4a00049ab000049b0600049b5400049bbc00049d86
00049f960004a1ba0004a3b40004a4e80004a6040004a7820004a94a0004
aaf80004ac920004ae080004af720004b1800004b3300004b52e0004b67e
0004b86c0004b99e0004bb960004bdba0004bf900004c0ee0004c25e0004
c3720004c4ba0004c7100004c8fc0004c92c0004cade0004cc4a0004cd94
0004ced40004d06c0004d1b20004d1c20004d1f20004d2220004d42a0004
d5ae0004d71c0004d8760004da740004db8a0004ddba0004df160004e0bc
0004e22a0004e4000004e5d60004e6460004e6760004e6a40004e6d80004
e70c0004e71c0004e72c0004e75c0004e78a0004e7be0004e7f00004e824
0004e8580004e88c0004e8be0004e9d80004e9e80004ea180004ea460004
ea7a0004eaac0004eae00004eb140004eb480004eb7c0004ebb00004ebe2
0004ec120004ec400004ec740004eca60004ecda0004ed0e0004ed420004
ed740004eda80004eddc0004eef40004ef040004f0820004f1fc0004f380
0004f4e00004f6760004f8140004f95e0004fa720004fc6e0004fdc20004
fef60005001c0005013e0005037a000503e000050496000505000005056c
000505fc00050640000506760005076e000507b0000507ec000508640005
08a8000508ec0005096800050b4000050be600050c4600050c7c00050cb8
00050cfc00050d7800050dec00050e3000050ed200050f3800050f740005
0faa00050fee000510c00005111c00051158000511e60005127200051346
0005144a000514ae00051554000515ee000516160005163e0005166e0005
1694000516ba000516e0000517060005172c0005176e000517b0000517e0
000518060005182c00051852000518780005189e000518c4000518ea0005
1910000519360005196a000519b2000519e600051a3600051a5c00051a82
00051aa800051ace00051afe00051b2e00051b5e00051b9a00051bca0005
1bf800051c2800051c5800051c7e00051ca400051cd800051d0c00051d34
00051d5800051d7e00051da400051dca00051df000051e2600051e7a0005
1eaa00051eda00051f0000051f2600051f4c00051f7200051f9800051fc0
0005200200052052000520780005209e000520c4000520ec0005211c0005
214c0005217c000521ac000521d2000521f800052228000522560005227c
000522a2000522c8000522ee000523140005233a0005236e000523c00005
23f60005246000052494000524dc000525100005256000052590000525c0
000525f00005261e0005264e0005267c000526a2000526c80005270a0005
274a0005277000052794000527c4000527f2000528180005283e00052872
000528be000528f20005293e00052980000529c0000529f000052a200005
2a4600052a6c00052a9200052ab600052adc00052b0200052b2a00052b52
00052b7800052b9e00052bc400052bea00052c1e00052c7000052ca60005
2d0600052d3600052d6400052d8a00052db000052de000052e1000052e36
00052e5c00052e8c00052eba00052eee00052f2000052f5000052f7e0005
2fae00052fdc00053002000530280005304e0005307200053098000530cc
00053100000531320005316000053190000531be000531ec0005321e0005
325000053284000532b8000532ea0005331c0005334c0005337c000533ae
000533e0000534120005344400053476000534a8000534d6000535040005
3536000535680005359a000535cc00053600000536460005367a000536ae
000536e2000537160005374600053776000537a8000537da0005380e0005
384200053876000538aa000538de00053912000539460005397a000539ae
000539e200053a1600053a4a00053a7800053aa600053ada00053b0e0005
3b4000053b7200053ba400053bd600053c0a00053c3e00053c7200053ca6
00053cda00053d0e00053d4200053d7600053da600053dd600053e080005
3e3a00053e6e00053ea200053ed400053f0600053f3800053f6a00053f9e
00053fd2000540000005402e0005406000054092000540c6000540fa0005
412c0005415e00054192000541c6000541fa0005422e0005425e0005428e
000542c2000542f60005432a0005435e00054392000543c6000543f80005
442a0005445c0005448e000544c2000544f6000545280005455a00054588
000545b8000545e6000546140005464200054672000546a2000546d00005
46fe0005472e0005475c0005478c000547bc000547ec0005482c0005486c
000548ae000548f00005493400054978000549ba000549fc00054a3e0005
4a8000054ac400054b0800054b4c00054b9000054bd400054c1800054c58
00054c9800054cd800054d1800054d5a00054d9c00054dde00054e200005
4e6600054eac00054ef200054f3800054f7e00054fc40005500a00055050
00055092000550d4000551180005515c000551a0000551e4000552280005
526c000552b0000552f4000553380005537c000553c2000554080005544c
00055490000554be000554ec0005552c0005555200055594000555c40005
5606000556360005566600055696000556c6000556ec00055754000557b0
000557c00005583e0005591c0005595a0005597e000559be000559ee0005
5a2e00055a6000055a9400055ac600055afa00055b2000055bb000055c52
00055d2a00055d5a00055d8a00055dbe00055df200055e2200055e560005
5e8600055eb600055ee800055f1c00055f9000056012000560ce000560fc
0005612a0005615e00056192000561c2000561f00005621e000562520005
6282000562b2000562e4000563180005634c000563e000056476000564aa
000564ec000565120005655400056584000565c6000565f6000566280005
665800056680000566a6000566dc0005672a0005694800056b5800056d52
00056f7400057294000572ba0005761e0005783c00057a0e00057cd80005
7e5200058068000580a2000580da00058126000581700005828a0005833e
00058526000587460005890c000589ee00058b8200058c9400058dca0005
8f3200058f7800058fbe000590060005904a000590b0000590e20005913a
000591940005921400059290000592c2000592f200059322000593520005
9398000593d20005943a0005947e000594d600059554000595d200059618
0005965a000596d0000597280005977a000597ac000597dc000597ec0005
97fc0005991000059aca00059c7a00059de200059ea400059f8c0005a0d6
0005a2420005a2520005a3320005a4080005a5d40005a74e0005a91c0005
aab00005aac00005ab640005ac3e0005acfc0005ae4c0005afce0005b096
0005b12a0005b1c20005b2c60005b4200005b5660005b64a0005b7900005
b8a60005ba120005bbea0005bcca0005be800005bf160005bfea0005c0e2
0005c1b20005c2740005c35c0005c4800005c4900005c6880005c7940005
c8a60005ca7e0005cc0e0005cdf00005cf200005d0740005d1a80005d2fc
0005d4fa0005d5ea0005d6de0005d8d40005d9ce0005dbf80005dda60005
df5a0005e0c60005e1f40005e33a0005e50a0005e6040005e7b20005e958
0005ea7c0005ebac0005ebbc0005eda20005eea00005f0120005f0de0005
f1a40005f3060005f44e0005f6280005f7320005f8c80005fb260005fcb4
0005fdac0005fe560005fef60005ff960006011e000602160006037a0006
04c20006069e000607b40006088a00060a4400060b1200060c4e00060dac
00060f0c00060fe20006111800061288000613a400061568000616300006
1846000619c600061b1e00061cb800061d5000061e3000061eae00061f7c
00062056000620e2000621b8000621f60006221600062236000622560006
228c000622b2000622f60006230600062316000623260006233600062346
0006235600062366000623760006238600062396000623a6000623a60006
24780006262a000627fa00062a0400062b8200062d4a00062f5000063104
000631140006327600063404000636360006371a000638340006386e0006
3926000639e600063a7e00063ace00063c2600063cf600063dfe00063f02
0006402200064176000641dc0006421e0006425c000642fa000643600006
45040006471e000648e600064bf000064e3c00065032000651c6000652f6
0006550800065682000657e2000659c800065bbe00065cf400065fde0006
610800066214000663b600066572000667620006692000066b0400066ca2
00066f1c000671000006720c00067456000675e8000677d6000679320006
7b2000067c6600067dd800067ffa0006810a0006828a0006840a00068596
000686e000068866000689f600068b5600068ca600068dbc00068ee60006
90aa000691d000069300000693c8000694e40006965000069798000698ba
000699ba00069ac600069c6600069dc200069e9200069f600006a0820006
a1900006a24a0006a33a0006a4240006a6940006a8c40006aa9a0006ac18
0006ae020006aefa0006b0c20006b2880006b35c0006b4f00006b6b00006
b8860006b9e00006bb5c0006bc980006bda40006bf200006c0ca0006c250
0006c3800006c4180006c4b00006c5ae0006c6000006c6ea0006c8180006
c8e00006c9ec0006cc140006ccdc0006cefc0006d0c40006d29e0006d446
0006d4e40006d52e0006d5780006d5c20006d60c0006d6560006d6a00006
d6ea0006d7340006d77e0006d7c80006d8120006d85c0006d8a40006d8ec
0006d9340006d97c0006d9c40006da0c0006da540006da9c0006dae40006
db2c0006db740006dbbc0006dc360006dcac0006dd300006ddb80006de30
0006dea40006df260006dfac0006e0b60006e24e0006e44a0006e45a0006
e67e0006e8240006e96e0006eaa40006ebca0006ed100006eea40006f008
0006f1d60006f34e0006f3f20006f4300006f46e0006f47e0006f5ec0006
f7540006f91a0006face0006fcca0006fed20006fee20006fff20007010a
0007021a0007025c000702a0000702e20007032600070398000704040007
0496000704de000705560007080c00070948000709ec00070b5000070c70
00070dee00070f56000710d200071258000713dc0007159a000717100007
18d200071a8c00071b3600071c3000071d4600071e6800071f1c0007204c
0007209a0007214600072196000721c60007220a0007224c0007227c0007
2400000725d4000727680007282c000728c20007295000072a2400072ac2
00072b5a00072c3a00072ca400072d7c00072e6200072ed600072ee60007
2ef600072f0600072f16000730880007309a000731e6000732ee0007348c
00073646000736bc0007370000073764000737cc0007381c0007386c0007
38da0007394a000739ba00073a2c00073ab000073ba000073c9c00073d6a
00073e5e00073fcc0007407c000741980007432e000743a20007458c0007
475200074762000747720007478200074792000747a2000747b2000747c2
000747d2000747e2000747f20007480200074abe00074e08000751620007
53940007572600075852000759d000075b2000075c5e00075dae00075eea
0007607200076208000762d0000763b20007658600076670000768460007
69b600076acc00076bf000076dba00076f36000770f4000771c400077330
00077440000775d2000777b800077914000779f400077c0800077de40007
7f4e000781100007827600078414000785bc000785ea0007861a00078648
00078678000786aa000786d0000786f60007872400078754000787840007
87b8000787e6000788140007884200078874000788a4000788d400078904
000789340007896400078998000789c8000789f800078a2800078a5c0007
8a8c00078aba00078aea00078b1000078b4000078b7000078ba000078bd0
00078c0000078c1000078c4000078c7000078ca000078cc600078cf60007
8d2400078d5400078d8400078daa00078dda00078e0a0007900a00079038
0007906600079094000790ba000790e8000791000007912e000791540007
9182000791a8000791ce000791f4000792240007924a0007927a0007940e
0007943e0007946e000794a2000794d2000794f800079528000795560007
9584000795a8000795d6000795fa00079620000796460007967600079798
000797c8000797f8000798280007985c0007989000079a5c00079a8c0007
9abc00079aec00079b2000079b5000079b8400079bb200079be200079c12
00079c4200079c7a00079caa00079cda00079cea00079cfa00079dd40007
9e5800079e6800079e7800079e880007a0340007a0440007a0540007a14c
0007a15c0007a16c0007a2b40007a2c40007a3cc0007a3dc0007a4c80007
a4d80007a4e80007a6a40007a6b40007a8c40007aa760007aaa60007aad6
0007ab060007ab340007ab640007ab940007abc40007abf60007ac2a0007
ac5e0007adc40007adf40007af5a0007af6a0007af7a0007afac0007afbc
0007b19c0007b3a80007b5320007b5620007b5900007b7260007b7360007
b8640007b8740007b8840007b9d80007b9e80007bd0c0007be320007bfd0
0007bffe0007c20e0007c3820007c3920007c3a20007c3b20007c3c20007
c3d20007c3e20007c3f20007c57e0007c71a0007c72a0007c89c0007ca3e
0007cbfa0007cdda0007cefa0007d0ca0007d1e20007d3280007d55c0007
d7060007d7c80007d8d80007d9900007da5e0007db6e0007dc1c0007dcf2
0007ddf00007de620007df8c0007e0a00007e0b20007e0c40007e0d60007
e0e80007e0fa0007e10c0007e11e0007e1300007e1420007e1540007e376
0007e5660007e5960007e5c60007e5f60007e6260007e65a0007e6a20007
e8f40007ea400007ebc40007eda60007efc20007eff20007f0220007f052
0007f0860007f2780007f4700007f7020007f8840007f8b40007f8e40007
f9140007f9480007fb6a0007fe640008002400080286000805180008076a
0008079a0008094800080978000809a8000809d800080a0800080a3c0008
0c8200080cb200080e96000810c8000813680008159e000815ce0008173c
000819380008196800081998000819c8000819fc00081b8c00081dc80008
1fe40008215800082188000821bc0008236a0008239a000826e600082716
000827460008276c0008279c000827cc000827fc0008282c0008285c0008
288c000828bc000828ec000829140008294400082974000829a400082bee
00082c1e00082c4e00082f5a00082f8a00082fba00082fea000830100008
30400008307000083096000830c6000830ec000831120008313800083168
0008318e000831be000831ee0008321e0008325200083282000832a80008
32d800083308000833380008335e00083384000833aa000833d000083586
000835b6000835e600083616000836460008367a000836ae000838ee0008
391e0008394e0008397e000839b2000839e200083a1200083a4200083a72
00083a9800083c6600083f1600083ffc000840ac00084184000842780008
438a000844b6000846bc000848280008496a00084c6000084ec6000850c0
000852f800085558000857640008595e00085ba400085d6a00085f6a0008
610c0008639600086548000866ae0008684a000869c600086b6000086d0e
00086e8800086e9800087002000871d20008734000087506000876700008
7802000879aa00087ad800087bfe00087d5600087ea600087fdc00088102
000881da000882be000884a80008857e000885a200088776000888c00008
89bc00088aaa00088ba400088c9800088d7000088e4200088f2200089044
0008912800089226000892c0000893e6000894d0000895ca000896600008
9790000898600008993600089a0e00089b3400089c2200089d1200089ddc
00089ede00089fb80008a0a80008a1a20008a26c0008a3640008a4760008
a5380008a6600008a7120008a8140008a9360008a9c60008aac40008ab16
0008ab780008aba80008ac280008ac540008acca0008ad060008ae460008
af3c0008b0240008b1180008b1fa0008b2bc0008b3600008b4600008b5b0
0008b6680008b77a0008b7f40008b9580008ba300008bb000008bbe40008
bd080008bdda0008beea0008c0380008c0ea0008c2100008c2a60008c394
0008c42c0008c5640008c63e0008c70a0008c7f20008c8f00008ca3a0008
cb4e0008cc3a0008cc9a0008ce320008cf560008cfe00008d1160008d1c8
0008d1d80008d23a0008d4b40008d7360008d8600008dac40008dce40008
df320008e1440008e3e40008e3f40008e40c0008e4240008e43c0008e454
0008e4640008e47e0008e566000100000bf900f2003c0097000600020010
002f0056000004ed02580004000200>
<0000005303ea0000000300000000021a00000000000300000001001e021a
0000000300000002000c0238000000030000000300560244000000030000
0004002c025600000003000000050018029a0000000300000006003002b2
0000000300000007007602e200000003000000080030000e000000030000
000900860358000000030000000d0d2603de0001000000000000010d1104
0001000000000001000f1211000100000000000200061220000100000000
0003002b122600010000000000040016122f0001000000000005000c1251
00010000000000060018125d0001000000000007003b1275000100000000
00080018110b0001000000000009004312b0000100000000000d069312f3
0003000104030002000e19860003000104030004002e1994000300010405
0002000e19c20003000104050004002e19d00003000104060002000c19fe
0003000104060004002c1a0a0003000104070002000c1a36000300010407
0004002c1a420003000104080002000c1a6e0003000104080004002c1a7a
0003000104090000021e1aa60003000104090001001e021a000300010409
0002000c02380003000104090003005602440003000104090004002c0256
00030001040900050018029a0003000104090006003002b2000300010409
0007007602e200030001040900080030000e000300010409000900860358
000300010409000d0d2603de00030001040a0002000e1cc400030001040a
0004002e1cd200030001040b000200141d0000030001040b000400341d14
00030001040c000200101d4800030001040c000400301d5800030001040e
000200081d8800030001040e000400281d900003000104100002000e1db8
0003000104100004002e1dc60003000104130002000e1df4000300010413
0004002e1e020003000104140002000c1a360003000104140004002c1a42
0003000104150002000e1e300003000104150004002e1e3e000300010416
0002000e1e6c0003000104160004002e1e7a0003000104190002000c1ea8
0003000104190004002c1eb400030001041b0002000e1ee000030001041b
0004002e1eee00030001041d0002000c1a3600030001041d0004002c1a42
00030001041f0002000c1f1c00030001041f0004002c1f28000300010424
0002000e1f540003000104240004002e1f6200030001042a0002000e1f90
00030001042a0004002e1f9e00030001042d0002000c1fcc00030001042d
0004002c1fd800030001080a0002000e1cc400030001080a0004002e1cd2
0003000108160002000e1e6c0003000108160004002e1e7a000300010c0a
0002000e1cc4000300010c0a0004002e1cd2000300010c0c000200101d48
000300010c0c000400301d5800a900200032003000310034002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0020
000d000d0048006500620072006500770020004f00700065006e00540079
007000650020004c00610079006f007500740020006c006f006700690063
00200063006f0070007900720069006700680074002000a9002000320030
003000330020002600200032003000300037002c002000520061006c0070
0068002000480061006e0063006f0063006b002000260020004a006f0068
006e00200048007500640073006f006e002e002000540068006900730020
006c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020006900730020006f00700065006e00200073006f00750072
0063006500200073006f00660074007700610072006500200075006e0064
0065007200200074006800650020004d004900540020004c006900630065
006e00730065003b002000730065006500200065006d0062006500640064
006500640020006c006900630065006e0073006500200064006500730063
00720069007000740069006f006e00200066006f00720020006400650074
00610069006c0073002e00540069006d006500730020004e006500770020
0052006f006d0061006e004900740061006c00690063004d006f006e006f
0074007900700065003a00540069006d006500730020004e006500770020
0052006f006d0061006e0020004900740061006c0069006300200028004d
006900630072006f0073006f00660074002900560065007200730069006f
006e00200036002e0038003700540069006d00650073004e006500770052
006f006d0061006e00500053002d004900740061006c00690063004d0054
00540069006d006500730020004e0065007700200052006f006d0061006e
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e004d
006f006e006f007400790070006500200054007900700065002000440072
006100770069006e00670020004f006600660069006300650020002d0020
005300740061006e006c006500790020004d006f007200690073006f006e
002c00200056006900630074006f00720020004c0061007200640065006e
0074002000310039003300320059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
00680065002000450055004c004100200066006f00720020007400680065
002000700072006f006400750063007400200069006e0020007700680069
006300680020007400680069007300200066006f006e0074002000690073
00200069006e0063006c007500640065006400200074006f002000640069
00730070006c0061007900200061006e00640020007000720069006e0074
00200063006f006e00740065006e0074002e002000200059006f00750020
006d006100790020006f006e006c0079002000280069002900200065006d
0062006500640020007400680069007300200066006f006e007400200069
006e00200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
0065006d00620065006400640069006e0067002000720065007300740072
0069006300740069006f006e007300200069006e0063006c007500640065
006400200069006e0020007400680069007300200066006f006e0074003b
00200061006e006400200028006900690029002000740065006d0070006f
0072006100720069006c007900200064006f0077006e006c006f00610064
0020007400680069007300200066006f006e007400200074006f00200061
0020007000720069006e0074006500720020006f00720020006f00740068
006500720020006f00750074007000750074002000640065007600690063
006500200074006f002000680065006c00700020007000720069006e0074
00200063006f006e00740065006e0074002e000d000a000d000a00540068
006500200066006f006c006c006f00770069006e00670020006c00690063
0065006e00730065002c0020006200610073006500640020006f006e0020
0074006800650020004d004900540020006c006900630065006e00730065
002000280068007400740070003a002f002f0065006e002e00770069006b
006900700065006400690061002e006f00720067002f00770069006b0069
002f004d00490054005f004c006900630065006e007300650029002c0020
006100700070006c00690065007300200074006f00200074006800650020
004f00700065006e00540079007000650020004c00610079006f00750074
0020006c006f00670069006300200066006f00720020004200690062006c
006900630061006c00200048006500620072006500770020201c004c0061
0079006f007500740020004c006f006700690063201d0020006100730020
006a006f0069006e0074006c007900200064006500760065006c006f0070
00650064002000620079002000520061006c00700068002000480061006e
0063006f0063006b00200061006e00640020004a006f0068006e00200048
007500640073006f006e002e0020000d000a000d000a005000650072006d
0069007300730069006f006e002000690073002000680065007200650062
00790020006700720061006e007400650064002c00200066007200650065
0020006f00660020006300680061007200670065002c00200074006f0020
0061006e007900200070006500720073006f006e0020006f006200740061
0069006e0069006e00670020006100200063006f007000790020006f0066
00200074006800650020004f00700065006e00540079007000650020004c
00610079006f007500740020006c006f00670069006300200066006f0072
0020004200690062006c006900630061006c002000480065006200720065
007700200061006e00640020006100730073006f00630069006100740065
006400200064006f00630075006d0065006e0074006100740069006f006e
002000660069006c00650073002000280074006800650020201c004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
0077006100720065201d0029002c00200074006f0020006400650061006c
00200069006e00200074006800650020004c00610079006f007500740020
004c006f00670069006300200053006f0066007400770061007200650020
0077006900740068006f0075007400200072006500730074007200690063
00740069006f006e002c00200069006e0063006c007500640069006e0067
00200077006900740068006f007500740020006c0069006d006900740061
00740069006f006e00200074006800650020007200690067006800740073
00200074006f0020007500730065002c00200063006f00700079002c0020
006d006f0064006900660079002c0020006d0065007200670065002c0020
007000750062006c006900730068002c0020006400690073007400720069
0062007500740065002c0020007300750062006c006900630065006e0073
0065002c00200061006e0064002f006f0072002000730065006c006c0020
0063006f00700069006500730020006f006600200074006800650020004c
00610079006f007500740020004c006f00670069006300200053006f0066
00740077006100720065002c00200061006e006400200074006f00200070
00650072006d0069007400200070006500720073006f006e007300200074
006f002000770068006f006d00200074006800650020004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
007200650020006900730020006600750072006e00690073006800650064
00200074006f00200064006f00200073006f002c0020007300750062006a
00650063007400200074006f002000740068006500200066006f006c006c
006f00770069006e006700200063006f006e0064006900740069006f006e
0073003a000d000a000d000a005400680065002000610062006f00760065
00200063006f00700079007200690067006800740020006e006f00740069
0063006500200061006e0064002000740068006900730020007000650072
006d0069007300730069006f006e0020006e006f00740069006300650020
007300680061006c006c00200062006500200069006e0063006c00750064
0065006400200069006e00200061006c006c00200063006f007000690065
00730020006f00720020007300750062007300740061006e007400690061
006c00200070006f007200740069006f006e00730020006f006600200074
006800650020004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065002e000d000a000d000a0054
0048004500200053004f0046005400570041005200450020004900530020
00500052004f005600490044004500440020002700410053002000490053
0027002c00200057004900540048004f0055005400200057004100520052
0041004e005400590020004f004600200041004e00590020004b0049004e
0044002c002000450058005000520045005300530020004f005200200049
004d0050004c004900450044002c00200049004e0043004c005500440049
004e004700200042005500540020004e004f00540020004c0049004d0049
00540045004400200054004f002000540048004500200057004100520052
0041004e00540049004500530020004f00460020004d0045005200430048
0041004e0054004100420049004c004900540059002c0020004600490054
004e00450053005300200046004f00520020004100200050004100520054
004900430055004c0041005200200050005500520050004f005300450020
0041004e00440020004e004f004e0049004e004600520049004e00470045
004d0045004e0054002e00200049004e0020004e004f0020004500560045
004e00540020005300480041004c004c0020005400480045002000410055
00540048004f005200530020004f005200200043004f0050005900520049
00470048005400200048004f004c00440045005200530020004200450020
004c004900410042004c004500200046004f005200200041004e00590020
0043004c00410049004d002c002000440041004d00410047004500530020
004f00520020004f00540048004500520020004c0049004100420049004c
004900540059002c0020005700480045005400480045005200200049004e
00200041004e00200041004300540049004f004e0020004f004600200043
004f004e00540052004100430054002c00200054004f005200540020004f
00520020004f00540048004500520057004900530045002c002000410052
004900530049004e0047002000460052004f004d002c0020004f00550054
0020004f00460020004f005200200049004e00200043004f004e004e0045
004300540049004f004e0020005700490054004800200054004800450020
0053004f0046005400570041005200450020004f00520020005400480045
00200055005300450020004f00520020004f005400480045005200200044
00450041004c0049004e0047005300200049004e00200054004800450020
0053004f004600540057004100520045002ea9203230313420546865204d
6f6e6f7479706520436f72706f726174696f6e2e20416c6c205269676874
732052657365727665642e200d0d486562726577204f70656e5479706520
4c61796f7574206c6f67696320636f7079726967687420a9203230303320
2620323030372c2052616c70682048616e636f636b2026204a6f686e2048
7564736f6e2e2054686973206c61796f7574206c6f67696320666f722042
69626c6963616c20486562726577206973206f70656e20736f7572636520
736f66747761726520756e64657220746865204d4954204c6963656e7365
3b2073656520656d626564646564206c6963656e73652064657363726970
74696f6e20666f722064657461696c732e54696d6573204e657720526f6d
616e4974616c69634d6f6e6f747970653a54696d6573204e657720526f6d
616e204974616c696320284d6963726f736f66742956657273696f6e2036
2e383754696d65734e6577526f6d616e50532d4974616c69634d5454696d
6573204e657720526f6d616e20697320612074726164656d61726b206f66
20546865204d6f6e6f7479706520436f72706f726174696f6e2e4d6f6e6f
7479706520547970652044726177696e67204f6666696365202d20537461
6e6c6579204d6f7269736f6e2c20566963746f72204c617264656e742031
393332596f75206d617920757365207468697320666f6e74206173207065
726d6974746564206279207468652045554c4120666f7220746865207072
6f6475637420696e207768696368207468697320666f6e7420697320696e
636c7564656420746f20646973706c617920616e64207072696e7420636f
6e74656e742e2020596f75206d6179206f6e6c792028692920656d626564
207468697320666f6e7420696e20636f6e74656e74206173207065726d69
747465642062792074686520656d62656464696e67207265737472696374
696f6e7320696e636c7564656420696e207468697320666f6e743b20616e
6420286969292074656d706f726172696c7920646f776e6c6f6164207468
697320666f6e7420746f2061207072696e746572206f72206f7468657220
6f75747075742064657669636520746f2068656c70207072696e7420636f
6e74656e742e0d0a0d0a54686520666f6c6c6f77696e67206c6963656e73
652c206261736564206f6e20746865204d4954206c6963656e7365202868
7474703a2f2f656e2e77696b6970656469612e6f72672f77696b692f4d49
545f4c6963656e7365292c206170706c69657320746f20746865204f7065
6e54797065204c61796f7574206c6f67696320666f72204269626c696361
6c2048656272657720d24c61796f7574204c6f676963d3206173206a6f69
6e746c7920646576656c6f7065642062792052616c70682048616e636f63
6b20616e64204a6f686e20487564736f6e2e200d0a0d0a5065726d697373
696f6e20697320686572656279206772616e7465642c2066726565206f66
206368617267652c20746f20616e7920706572736f6e206f627461696e69
6e67206120636f7079206f6620746865204f70656e54797065204c61796f
7574206c6f67696320666f72204269626c6963616c204865627265772061
6e64206173736f63696174656420646f63756d656e746174696f6e206669
6c6573202874686520d24c61796f7574204c6f67696320536f6674776172
65d3292c20746f206465616c20696e20746865204c61796f7574204c6f67
696320536f66747761726520776974686f7574207265737472696374696f
6e2c20696e636c7564696e6720776974686f7574206c696d69746174696f
6e207468652072696768747320746f207573652c20636f70792c206d6f64
6966792c206d657267652c207075626c6973682c20646973747269627574
652c207375626c6963656e73652c20616e642f6f722073656c6c20636f70
696573206f6620746865204c61796f7574204c6f67696320536f66747761
72652c20616e6420746f207065726d697420706572736f6e7320746f2077
686f6d20746865204c61796f7574204c6f67696320536f66747761726520
6973206675726e697368656420746f20646f20736f2c207375626a656374
20746f2074686520666f6c6c6f77696e6720636f6e646974696f6e733a0d
0a0d0a5468652061626f766520636f70797269676874206e6f7469636520
616e642074686973207065726d697373696f6e206e6f7469636520736861
6c6c20626520696e636c7564656420696e20616c6c20636f70696573206f
72207375627374616e7469616c20706f7274696f6e73206f662074686520
4c61796f7574204c6f67696320536f6674776172652e0d0a0d0a54484520
534f4654574152452049532050524f564944454420274153204953272c20
574954484f55542057415252414e5459204f4620414e59204b494e442c20
45585052455353204f5220494d504c4945442c20494e434c5544494e4720
425554204e4f54204c494d4954454420544f205448452057415252414e54
494553204f46204d45524348414e544142494c4954592c204649544e4553
5320464f52204120504152544943554c415220505552504f534520414e44
204e4f4e494e4652494e47454d454e542e20494e204e4f204556454e5420
5348414c4c2054484520415554484f5253204f5220434f50595249474854
20484f4c44455253204245204c4941424c4520464f5220414e5920434c41
494d2c2044414d41474553204f52204f54484552204c494142494c495459
2c205748455448455220494e20414e20414354494f4e204f4620434f4e54
524143542c20544f5254204f52204f54484552574953452c204152495349
4e472046524f4d2c204f5554204f46204f5220494e20434f4e4e45435449
4f4e20574954482054484520534f465457415245204f5220544845205553
45204f52204f54484552204445414c494e475320494e2054484520534f46
54574152452e006300750072007300690076006100540069006d00650073
0020004e0065007700200052006f006d0061006e00200063007500720073
006900760061006b00750072007a00ed0076006100540069006d00650073
0020004e0065007700200052006f006d0061006e0020006b00750072007a
00ed00760061006b0075007200730069007600540069006d006500730020
004e0065007700200052006f006d0061006e0020006b0075007200730069
0076004b0075007200730069007600540069006d006500730020004e0065
007700200052006f006d0061006e0020004b0075007200730069007603a0
03bb03ac03b303b903b100540069006d006500730020004e006500770020
0052006f006d0061006e002003a003bb03ac03b303b903b100a900200032
00300031003400200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e0020000d000a000d000a00480065006200720065
00770020004f00700065006e00540079007000650020004c00610079006f
007500740020006c006f00670069006300200063006f0070007900720069
006700680074002000a90020003200300030003300200026002000320030
00300037002c002000520061006c00700068002000480061006e0063006f
0063006b002000260020004a006f0068006e00200048007500640073006f
006e002e002000540068006900730020006c00610079006f007500740020
006c006f00670069006300200066006f00720020004200690062006c0069
00630061006c00200048006500620072006500770020006900730020006f
00700065006e00200073006f007500720063006500200073006f00660074
007700610072006500200075006e00640065007200200074006800650020
004d004900540020004c006900630065006e00730065003b002000730065
006500200065006d0062006500640064006500640020006c006900630065
006e007300650020006400650073006300720069007000740069006f006e
00200066006f0072002000640065007400610069006c0073002e00430075
0072007300690076006100540069006d006500730020004e006500770020
0052006f006d0061006e00200043007500720073006900760061004b0075
0072007300690076006f00690074007500540069006d006500730020004e
0065007700200052006f006d0061006e0020004b00750072007300690076
006f006900740075004900740061006c006900710075006500540069006d
006500730020004e0065007700200052006f006d0061006e002000490074
0061006c006900710075006500440151006c007400540069006d00650073
0020004e0065007700200052006f006d0061006e002000440151006c0074
0043006f0072007300690076006f00540069006d006500730020004e0065
007700200052006f006d0061006e00200043006f0072007300690076006f
004300750072007300690065006600540069006d006500730020004e0065
007700200052006f006d0061006e00200043007500720073006900650066
006b00750072007300790077006100540069006d006500730020004e0065
007700200052006f006d0061006e0020006b007500720073007900770061
0049007400e1006c00690063006f00540069006d006500730020004e0065
007700200052006f006d0061006e00200049007400e1006c00690063006f
041a0443044004410438043200540069006d006500730020004e00650077
00200052006f006d0061006e0020041a04430440044104380432004b0075
0072007a00ed0076006100540069006d006500730020004e006500770020
0052006f006d0061006e0020004b00750072007a00ed0076006101300074
0061006c0069006b00540069006d006500730020004e0065007700200052
006f006d0061006e0020013000740061006c0069006b0050006f01610065
0076006e006f00540069006d006500730020004e0065007700200052006f
006d0061006e00200050006f016100650076006e006f006e006700680069
00ea006e006700540069006d006500730020004e0065007700200052006f
006d0061006e0020006e00670068006900ea006e006700450074007a0061
006e006100540069006d006500730020004e0065007700200052006f006d
0061006e002000450074007a0061006e00610000410c005403cd02b0001d
001f03cd03cd03cc03cb003c001f03cbb3061d1f00410c03bc003003bc00
4003bc00a003bc00b003bc0005ffc003bbb345453240b803bbb32b2e3240
b803bbb2282932b9ffc003bbb31a263280411303bb009f03bb00af03bb00
cf03bb0004000003bb001f03bb000203bb02af0027001fffc003b9b2161b
32b9ffc003b8b2424232b9ffc003b8b2363832b9ffc003b8b32a2d32df41
0a03b800ef03b8000203b803b90028001fffc003b9b3282e32f0410f03b9
0001000003b7000103b700030800001f03be03bf002b001fffc003bfb224
2a32b903b60381b23a1f0f411703b3001003b2002003b2005003b2007003
b200e003b2000600cf03b300df03b300ef03b300ff03b30004001203a8b2
e2891fbe039f016b019a001f039800930801400c1f7f047f05027f027f03
025fbb02b00001ffc00117b2196632b8ffc0b3651a6632b9ff800173b219
6632bd038401170800001fffc002afb2313340b802afb22e3340b802afb3
28293240b802afb326273240b802afb321253240b802afb31c203240b802
afb2233340b802afb21933a0bc02af00b002af00e002afb5034003212932
b8fff2b33a263d32bc038203820382003a0800b51f40255c331eb80381b2
5c6432b8ffeeb3252e3314b80381b32b2e3269be03810001008a03810001
000e0381b32b2f3210b80381b3515b320cb80381b34e513222b80381b347
4d320eb80381b246330ab80381400926473212254358320cb80381b23233
10b80381b22a3312b80381b3373d3212bb0381003d0033fff44015253d33
1825355b32102526343206252a330c252e33b8fffe4024252d330c3a2f33
329925aa25ba25c92504052536330c25323832193a293a383a03182517b8
0381b42825382504bc0381038103810025080040101f0f1f2b2e32691f78
1f020b1f303332b8fff1b31f263d32bc038003800380001f080040151f37
5f07af07025f06af060222ac2b2e3209ac2f33b8ffdc400aac1f22322223
2b52320eb8037fb229330eb8037fb2223314b8037fb21e2032b8ffe7b71e
2b33321e2b2f32b9ffc0037fb64c4f3232262c33410affee037f00390033
fff8037f002b0033ffea037fb23a3320b8037fb33f46321eb8037fb32f3a
3212b8037fb22e331eb8037fb32a2d320eb8037fb2263304b8037fb3494a
3404b8037fb2463304b8037fb2213318b8037f400c1d3322263032322226
333832b8fff8400a262b2f3209261b21328abe037f0001037f037f037f00
260800402e1f371f062f063f06039f02af02bf02cf02049f03af03bf03cf
03046f037f038f03031f032f033f034f035f03050f413a02ed0001005f02
ed009f02ed00df02ed0003002f02ed003f02ed006f02ed000300af02af00
01004f02af009f02af0002002f02af003f02af0002003f02b00001000f02
b0001f02b00002004f02af005f02af0002002f02af003f02af0002007003
b2000103b203b202ed02ed02b002b002af02af401a370100300140010201
0100090102000800171700000012110840410b027b02230034000d013d00
34000d01370034000d011b401a340d8f340d84340d68340d59340d54340d
48340d2c340d28340d411002350020000d021b0020000d01fc0020000d01
c30020000d01500020000d012c401a200df0200dbe200d94200d79200d6a
200d61200d5f200d44200d410d013e0138000d003d0138000d0030013800
0d001d0138000d01fdb40f4d0f0009bf01fd004d000d03b1037f0015001f
0215b226341fb80214b2263f1fb80208b21ebb1f41190206001e0801001f
0205001f02ab001f0204001f02ab001f0203001f0401001f02010031019a
001f01fb00230156001f01aeb2262a1fb801adb2262a1fb801abb226341f
411501a8002602ab001f01a5001e0125001f01a400ab02ab001f01a20031
02ab001f01a1003102ab001f019db2236c1fb8019cb2236c1f4109019b00
230401001f019a0033019a001f0176b2262e1fb8016cb231721f4111016b
0023019a001f016800240401001f014500260801001f013f00230401001f
0123b21e9e1fbc0121001e0201001f0100b426791ffd1fb80125b21ffa33
b80801b21ff924b802abb21fe826b80101b21fe51fb8019ab21fe431b801
01400b1fe331e41fe231891fd226b80201b61fd026cd1fcd25b80401b21f
b731b8019ab21fae26b80801b21fac1eb80401400b1f9e315e1f97269e1f
9333b80801b21f8a24b8019ab21f831fb802ab40131f82236c1f7523e41f
7026cd1f6423721f5e25b80401b21f5d23b802abb21f55e6b80401b21f53
24b80201b21f4f33b802abb21f4e26b8040140131f4731671f4626ab1f43
31cd1f3e235e1f3a1fb80401b61f3924e41f3723b80801b21f2e23b80401
b21f2a1eb80125400b1f2923ab1f2731ab1f5537bc01c60007018a000701
2b402e077f077107690766074b074007380736072d072207210714081208
10080e080c080a080808060804080208000814b8ffe0402b000001001406
100000010006040000010004100000010010020000010002000000010000
02010802004a00b013034b024b5342b0372b4bb807ff52b0382b4bb00950
5b58b101018e59014bb0c063004b6220b0f65323b8010a515ab005234201
b0124b004b544218b0382bb00288b801005458b801ffb101018e851bb012
4358b900010140858d1bb900010159858d59590016763f183f123e113946
443e113946443e113946443e113946443e11394660443e11394660442b2b
2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b
5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b9027d027b4544b9
027c027b45445958b90146027d455258b9027d01464459594bb04753205c
58b9001e027c4544b90026027c45445958b9017f001e455258b9001e017f
4459594bb05e53205c58b9001f027d4544b90025027d45445958b901a800
1f455258b9001f01a84459594bb8010153205c58b1ab1f4544b11f1f4544
5958b9047000ab455258b900ab04704459594bb8012553205c58b1e61f45
44b11f1f45445958b9051000e6455258b900e605104459594bb01753205c
58b124244544b1312445445958b12224455258b124224459594bb0515320
5c58b124244544b1232445445958b17d24455258b1247d4459594bb06e53
205c58b124244544b1332445445958b1aa24455258b124aa4459592b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b45695342014b5058b108004259435c58b1
080042591610703eb0124358b911b53d801bba011c03d9000b2b59b00a23
42b00b2342003f3f182b103c012f5d060cb0062342b0072342b0124358b9
3b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d
411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba
01a80400000b2b59b0102342b0112342002b4bb02e5358b8016b45b02a60
b8016b234459001845694445694418456944456944737373737375757573
737475757575752b4bb026534bb03d515a58b1262645b0196044592b4518
6944742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
004bb02a534bb03f515a58b1070745b04060445973732b2b451869442b2b
752b2b4518694475752b2b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
74752b2b2b2b2b451869442b002b732b2b2b2b2b2b2b2b2b012b2b2b0073
73732b2b2b01435c58b8ffdeb31e1c3318b8037fb52b3318262b33b9fff0
0381b112332b2b2b2b590173742b2b2b002b73752b2b732b2b2b2b2b7375
2b2b2b2b73002b2b4569442b2b0000>
[15881 15801 15881 16357 16281 15405 16017 16333 16245 16357 16089 15833 15353
16137 16289 16117 15813 15469 14373 16057 16361 16065 16373 16325 15709 16089
16349 15329 15277 14621 16009 15293 16021 15413 15321 16377 12031 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 13482 82 <0002003cffe803b30389000d001900ad404108020903060a03a413ae18a0
1bb212b216be18065b18591985138c1895139d18a5120736133a19471349
19570856125413070a0c0c11240b070305051724040b14b8038140120780
4b5334078043358f079f070207191a0eb8038140270040170e3f00404b53
34004043350040323500401e350000200030004000a0000500c31b2bc318
2b4e10f65d2b2b2b2b2b4de94e10f45d2b2b4de9003fed3c103c3fed3c10
3c3130015d5d5d005d011402042322263534122433321607342623220215
141633321203b39ffee48689ada9011b8484aba65b4893f760498df70250
96fedaacaf8b930128acae465d63fe5bd05f6701a300>TimesNewRomanPS-ItalicMT AddT42Char 
4 1472 91 <0001ffb8ffe8038003890046010840630d40120b3f0700072a003d013e14
001601240023014a1b56018919a301a919aa2aa83daf3f10484010351017
63217321c919cb210509230c2a52230304191a1a022a2a2b3e403e3c4028
2122021a1a1f2840142828403e2a1904041135428a46c60011b80395401f
153a0a0a000735c639272e2e260b042a193e218a9f22cf220222c90d02e4
45ba014700400124b21a8228b8019f401d19e43e403b4b343e401d353e3e
47200d400d8f0daf0d040d1a48321947b80114b1de182b4e10e410e65d12
392f2b2b4dedf4edf4e6ed10f45ded11123939003f3c10fde43f3c10fde4
10f4ed11121739870e2e2b0e7d10c40110c90708103c083c870e10c4c431
30005d5d012b5d2b01161716173736363736333216151407062322272623
220706071316163332373637170607062322272603020706232227263534
363332171633323736363726272626232207350163311912295823642618
1d2b330f1c2415182f1018213e5652131a0d151c3727233f613726382115
429c5e3d392821182c2020241a0e0c132fa2193e05174a48171e03893434
2499843057100a2e21260e1909101c3495fea84f1f172e4a12764e2c3f27
0129fef14e321d1625212c20171026fc38f30e4136022400>TimesNewRomanPS-ItalicMT AddT42Char 
4 1946 92 <0001ff60fe460386038900380113405b9b310131183a3509191a1929193d
19a602b402ba1ab428b832c603c604ca19ca1a0d491b591b691b03043130
2f2f051d2b1e1a311a1104302f2e2d2b281c1b08213105060708090a0b0c
081704358a38c614000724c92b271e0f21b801c040373111400b12340f11
1f110211280c751740170e3f9017a0170250178017b01703201730174017
0317493a3849bf37013f374f375f370337b80323400d04e531401c113f31
401e123f31b8ffc040172529349031a031ef310350318031022031303140
310331b8021cb33932de182b10f65d5d5d2b2b2bedf65d5de410f45d5d5d
2bfde45d2b10e4003ffdec3f3cf4ed011112173911121739111239001239
111239870e7d10c404c43c3130015d5d2b01720116161713363736373637
3635342e0235343633321615140600070606232226353436333217161617
163332373637363703262623220727014b221a0d2c3c723751310b060e3b
2730242c3e6cfeccdb9792341f2f4126140d0813080507060f3749602e38
0e384215360903893a6594fe14489c4c83502010110b0e13332129324940
4fcbfe5cf8ab592f1f274009052f08050a224a623e027a9d44062500>TimesNewRomanPS-ItalicMT AddT42Char 
2 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>TimesNewRomanPS-ItalicMT AddT42Char 
TimesNewRomanPS-ItalicMT /CharStrings get begin
/o 82 def
/x 91 def
/y 92 def
end
TimesNewRomanPS-ItalicMT /Encoding get
dup 111 /o put
dup 120 /x put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/UKNMIZ+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/UKNMIZ+TimesNewRomanPS-ItalicMT*1 
[111{/.notdef}rp /o 8{/.notdef}rp /x /y 134{/.notdef}rp]
UKNMIZ+TimesNewRomanPS-ItalicMT nf
UKNMIZ+TimesNewRomanPS-ItalicMT*1 [12.0002 0 0 -12.0002 0 0 ]msf
221.27 139.396 mo
(x)sh
82.376 14.6756 mo
(y)sh
95.504 139.396 mo
(o)sh
/UKNMIZ+TimesNewRomanPS-ItalicMT*1 uf
/UKNMIZ+TimesNewRomanPS-ItalicMT uf
/TimesNewRomanPS-ItalicMT uf
gsave
148.8 49.1056 mo
151.24 57.2456 148.34 61.4956 141.75 64.7556 cv
141.91 64.5156 li
138.15 66.2856 133.18 67.6456 129 69.2556 cv
129.12 69.3456 li
126.14 70.6056 123.66 72.0456 121.5 74.5056 cv
121.72 74.1956 li
118.62 77.6156 116.93 82.8356 116.25 88.0056 cv
116.36 87.9556 li
116.06 90.6556 116.07 93.3356 116.25 96.2556 cv
116.25 96.3756 li
116.42 99.2556 116.74 102.456 117.75 104.506 cv
117.83 104.186 li
118.59 105.406 119.74 105.896 120.75 107.506 cv
120.8 107.196 li
121.73 108.326 122.6 110.076 122.25 111.256 cv
122.56 111.316 li
122.52 113.016 120.78 113.786 120 115.006 cv
119.9 115.346 li
118.79 117.336 119.05 120.606 120 122.506 cv
120.21 122.806 li
121.71 125.656 124.74 126.686 128.25 127.756 cv
128.14 127.446 li
132.75 128.466 138.04 128.996 142.5 127.756 cv
142.31 127.476 li
145.28 126.426 147.75 124.386 150.75 122.506 cv
150.4 122.496 li
155.04 119.196 160.23 116.336 165 113.506 cv
164.9 113.396 li
170.73 109.716 175.73 105.896 181.5 102.256 cv
181.37 101.936 li
184.23 99.9256 187.24 97.8756 191.25 96.2556 cv
190.98 96.2356 li
193.21 95.2456 195.71 94.4156 195 93.2556 cv
195.12 93.0356 li
194.6 91.8356 191.7 90.2156 189.75 89.5056 cv
189.75 89.6856 li
186.66 88.8456 185.94 90.7356 184.5 89.5056 cv
184.32 89.8456 li
183.22 89.2356 181.7 87.3356 181.5 85.7556 cv
181.5 85.8856 li
181.29 84.2556 182.72 83.1956 183.75 81.2556 cv
183.68 81.5756 li
185.14 79.1356 185.54 75.4356 185.25 72.2556 cv
185.52 71.9156 li
185.5 67.8556 184.92 64.0156 183 61.0056 cv
182.85 60.9556 li
181.26 58.6056 178.8 56.7056 177.75 53.5056 cv
177.98 53.8556 li
177.25 51.3256 177.8 48.0456 176.25 46.0056 cv
176.57 45.8556 li
175.17 43.3256 171.42 42.2256 169.5 40.0056 cv
169.49 39.8056 li
168 37.9256 167.6 35.2456 166.5 34.0056 cv
166.17 34.2256 li
164.96 33.3656 163 33.6756 162 33.2556 cv
161.72 33.3956 li
160.72 33.1756 160.13 32.5956 159.75 31.0056 cv
159.62 31.3756 li
158.35 28.3456 157.6 21.4056 155.25 18.2556 cv
155.25 18.2356 li
153.2 15.4756 149.92 15.6056 147.75 16.0056 cv
148.02 16.1456 li
146.56 16.5756 145.92 17.2456 146.25 19.7556 cv
146.2 19.9356 li
146.51 22.9756 147.98 28.5856 150 32.5056 cv
149.71 32.2256 li
150.83 34.5956 152.07 36.1256 152.25 37.0056 cv
152.15 37.0556 li
152.35 39.4456 144.86 37.7956 138.75 36.2556 cv
139.04 36.4656 li
134.64 35.4656 131.19 34.6356 128.25 34.7556 cv
128.23 34.5556 li
126.24 34.5056 124.47 34.7956 121.5 34.0056 cv
121.39 34.2456 li
120.06 34.0156 118.48 33.6156 117.75 34.0056 cv
117.56 33.7756 li
115.9 34.0556 116.36 36.1156 117 38.5056 cv
116.97 38.1956 li
117.84 41.2056 119.01 44.2656 120.75 46.0056 cv
120.88 46.1656 li
127.63 53.0156 143.52 44.9256 148.5 49.0056 cv
cp
eclp
120.7 132.236 mo
200.35 118.196 li
181.19 9.53564 li
101.54 23.5756 li
cp
/1 
[/DeviceCMYK] /CSA add_res
level3{
gsave
[1 0 0 -1 0 525.256 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [160.52 400.04 141.37 508.7 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~$jd4?$jd4?$jd4?$OI+>$OI+>$O@"<$O@"<$4$n;$4$n;$4$n;$3pe9$3pe9#mU\8#mU\8#mU\8#mLS6
#R1J5#R1J5#R1J5#R1J5#R1J5#6b82#6b82#6b82#6b82"pG/1"pG/1"p>&/"p>&/"U"r."U"r."U"r.
"U"r."U"r."U"r."Tni,"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+"9JW)!s/N(!s/N(!s/N(!s/N(!WiE'
!W`<%!W`<%!W`<%!W`<%!<E3$!<E3$!<<*"!<<*"zzzzzzz!!!!!~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 0 525.256 ]ct
/0 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~$O[=M$O[=M$O[=M$OR4J$47+I$47+I$47+I$4."F#mgnE#mgnE#mgnE#mgnE#m^eB#RC\A#RC\A#RC\A
#RCY?#6tJ=#6tJ=#6tJ=#6tJ=#6tG;"pP89"pP89"pP89"pP57"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1
"9\i1"9\i1"9\i1"9\i1"9\i0!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE(
!<E3%!<E3%!<E3%!<E3%!<E3%zzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89"pG/6
"U,&5"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%zzzzzzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89"pG/6
"U,&5"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%zzzzzzzzzzzzzz!!!!!~>
0 ]
>>
160.52 400.04 141.37 508.7 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
.25 lw
148.8 49.1056 mo
151.24 57.2456 148.34 61.4956 141.75 64.7556 cv
141.91 64.5156 li
138.15 66.2856 133.18 67.6456 129 69.2556 cv
129.12 69.3456 li
126.14 70.6056 123.66 72.0456 121.5 74.5056 cv
121.72 74.1956 li
118.62 77.6156 116.93 82.8356 116.25 88.0056 cv
116.36 87.9556 li
116.06 90.6556 116.07 93.3356 116.25 96.2556 cv
116.25 96.3756 li
116.42 99.2556 116.74 102.456 117.75 104.506 cv
117.83 104.186 li
118.59 105.406 119.74 105.896 120.75 107.506 cv
120.8 107.196 li
121.73 108.326 122.6 110.076 122.25 111.256 cv
122.56 111.316 li
122.52 113.016 120.78 113.786 120 115.006 cv
119.9 115.346 li
118.79 117.336 119.05 120.606 120 122.506 cv
120.21 122.806 li
121.71 125.656 124.74 126.686 128.25 127.756 cv
128.14 127.446 li
132.75 128.466 138.04 128.996 142.5 127.756 cv
142.31 127.476 li
145.28 126.426 147.75 124.386 150.75 122.506 cv
150.4 122.496 li
155.04 119.196 160.23 116.336 165 113.506 cv
164.9 113.396 li
170.73 109.716 175.73 105.896 181.5 102.256 cv
181.37 101.936 li
184.23 99.9256 187.24 97.8756 191.25 96.2556 cv
190.98 96.2356 li
193.21 95.2456 195.71 94.4156 195 93.2556 cv
195.12 93.0356 li
194.6 91.8356 191.7 90.2156 189.75 89.5056 cv
189.75 89.6856 li
186.66 88.8456 185.94 90.7356 184.5 89.5056 cv
184.32 89.8456 li
183.22 89.2356 181.7 87.3356 181.5 85.7556 cv
181.5 85.8856 li
181.29 84.2556 182.72 83.1956 183.75 81.2556 cv
183.68 81.5756 li
185.14 79.1356 185.54 75.4356 185.25 72.2556 cv
185.52 71.9156 li
185.5 67.8556 184.92 64.0156 183 61.0056 cv
182.85 60.9556 li
181.26 58.6056 178.8 56.7056 177.75 53.5056 cv
177.98 53.8556 li
177.25 51.3256 177.8 48.0456 176.25 46.0056 cv
176.57 45.8556 li
175.17 43.3256 171.42 42.2256 169.5 40.0056 cv
169.49 39.8056 li
168 37.9256 167.6 35.2456 166.5 34.0056 cv
166.17 34.2256 li
164.96 33.3656 163 33.6756 162 33.2556 cv
161.72 33.3956 li
160.72 33.1756 160.13 32.5956 159.75 31.0056 cv
159.62 31.3756 li
158.35 28.3456 157.6 21.4056 155.25 18.2556 cv
155.25 18.2356 li
153.2 15.4756 149.92 15.6056 147.75 16.0056 cv
148.02 16.1456 li
146.56 16.5756 145.92 17.2456 146.25 19.7556 cv
146.2 19.9356 li
146.51 22.9756 147.98 28.5856 150 32.5056 cv
149.71 32.2256 li
150.83 34.5956 152.07 36.1256 152.25 37.0056 cv
152.15 37.0556 li
152.35 39.4456 144.86 37.7956 138.75 36.2556 cv
139.04 36.4656 li
134.64 35.4656 131.19 34.6356 128.25 34.7556 cv
128.23 34.5556 li
126.24 34.5056 124.47 34.7956 121.5 34.0056 cv
121.39 34.2456 li
120.06 34.0156 118.48 33.6156 117.75 34.0056 cv
117.56 33.7756 li
115.9 34.0556 116.36 36.1156 117 38.5056 cv
116.97 38.1956 li
117.84 41.2056 119.01 44.2656 120.75 46.0056 cv
120.88 46.1656 li
127.63 53.0156 143.52 44.9256 148.5 49.0056 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
116.25 128.506 mo
195 128.506 li
195 16.0056 li
116.25 16.0056 li
116.25 128.506 li
@
.75 lw
293.25 150.256 mo
441.75 150.256 li
1 /0 /CSD get_res sepcs
1 sep
@
446.25 150.256 mo
440.25 153.256 li
439.92 153.246 li
440.95 151.186 440.95 148.766 439.92 146.706 cv
440.25 146.506 li
446.25 150.256 li
cp
ef
293.25 150.256 mo
293.25 10.0056 li
@
293.25 5.50562 mo
297 12.2556 li
296.66 11.9456 li
294.6 10.9156 292.17 10.9156 290.12 11.9456 cv
290.25 12.2556 li
293.25 5.50562 li
cp
ef
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f710b77c000000cc000000606376
742008fab09e0000012c0000079c6670676d4d5f5868000008c800000634
676c79669c2b986100009e500008e56668656164e074353600000efc0000
0036686865610e310ee000000f3400000024686d74784f8cd97a00000f58
00002fe46c6f6361346f231000003f3c00002fe86d617870119304140000
6f24000000206e616d65dc719c8700006f44000023ee70726570ab1cb91f
0000933400000b1b67646972000000000000000000000000000303370190
00050008059a0533002c0125059a0533004c03a000660212010502020503
050405090304e0000eff400078430000000100000000544d432000010020
fffc058efe460133072101bb400001bfdff700000371054c000000200004
058e0000054c001f054c001c037100180000ffe10000ffe80000ffe8fe4a
fffc056b0023fe68ffe2033e000000950000009500000000000000000025
00a8008e010b007d00820045003200a400ca006b0070005100af003c00f0
01d700470004002500770029004000fd00160161004601370029008e0017
ffca0025005bffe902e600020099008100f2007500d6006300c60006009a
01330024003800cc003dff67001305d8003600860095ffdb0007043400a5
00d8ffdcfffe004800a200d8013c01530380053e0057007a007c008c0117
012a0138017c0026003c007800bd00c0021009b5000c004d004e00540058
006700b4040100020005005000af01d5034300240058008b013501c0ffac
002000250026002d00410136022bffba001e002a0034003b003f00850094
009800d7012e013d033104b900170040006100b9010e0116012201bfff9c
001f001f004d005c0086008c009600aa00cb00cb011f0154022f036005a9
fee8000e006f007c007d008b00d500f1010a0157017802b803adfe3fff6a
ffb3ffc4001f0037003f0044004a0078007d009700a200a700b600c000c1
00c600d8011d0150019701ee04740532fd81fed1fee0ff16fff1000f002d
00550068006e007f00890095009e00c200da00e400f801040108011101c2
023002da030e049e0517ff00ff8700000020002f00410057007800870088
008800b900c200c5012001280133017401d6020e020f026c027e02ab02ec
038903b103e304e7ff43ffa8ffc3ffdcffe9000700230023002600520077
007d0081008f009900ac00ae00b500b800c800ea00f000f40135016a018b
01b101b501f7021402ad02d504fc05d805f0ff9dfffc000b00240025002c
0030003000330040004700490057006e009a00bd00c900cd00dc00fa00fa
011b0139017e0187018a018e0195019601df01f6028602cf02de039603a9
03b003c804010432046a058b05e006510761fe96fe9aff4bff8700130025
00340038003e004a0065006b0073007a009c00a200b200b700bf00f000f7
00fb0104011301200124013b01520178017c0181018f01a001d90248026a
026f02700301031d032303270388041f04ab04d104da057a058bfe26fe59
ff2e00010002000a003b003b004700580058005f0066006b007a007a008b
009900af00bc00c000c700cc00e900f200f500fb00fb0102010a010b0115
0121012701450145015501570158015e01610168017d01a301ab01da01ee
021002180222028f029402a302d202e703710393039b03b303d303fe04ff
050b05320532054b0559058b05ab05f2065506890742076207a708ccfd2a
fdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffaf
ffc00000000000030094001d001f002000200027002e0048004b004c005e
005f006b0071007c008a00900091009100a700af00b300b400c400c600d1
00d200de00df00df00e600e800ea00eb00f200f500f500fc010201180123
013101330137015c016201660170017a017a017a018201980199019b01b0
01bf01c001ca01d301d701d801e001e001f601f701f802120213022f0237
02440247024f0252026302650270027f0298029b02a602b702ba02c502cf
02d602d702e502fe031c031d03450348035d035e03710379038103a103b7
03d403d503d803e103f803fe0404041f042104230425043a0467048304e0
0528054b0564056a059f059f05c2060b066a06af06b306cb06e807060728
0748075007a607b207ff009500af00920096000000000000000000000000
017e01a80129025b0212020301c302b4019301cd02b204ed020e0159017a
0300022d042c00c8004d00e602890325013e0378011b00f1018d00490203
007c000e029d02470024000000000052004400330038005405d3041501a7
000002860168005000cf0002004b0024008800ba0025ffd800110091ff6b
00b5011700260065ff9900490080014b01c000f40167027102ea04fc0310
017c01e103d9015501e601ee0434019606cb005c022b0099003d009f0016
0039002700de00790120022e005a00990388009400210019002a046c05e8
000001f203b200aa0296028902b4ffc9020000ec0005005a0447010004e0
0000052a001f01eb00ae016800ca02d3028901b5040601a1014f014b011c
0308005e00c70024029d006503750104028002f304d800d90239025a032c
01f204310303005002e50283005901eb010800ac019602f8012100950180
004400e501eb02e5007400f301ff02fd038f026801c801c70116022b0142
033000fe02e101620200002400ee05170108023700660006010201e602aa
0366019b00d305c203dc044d03b6000401be013702fc03200244014d0338
ffed002506f8030dfed5ff43004402ffff92040bfdef0155017100d9ffc4
032d0461044afbb5fbcf02170192036d0558fff2fe7d0583023e006605e9
073d00790243002500cf00fd00af002a01ef021a0026001f0025003a0000
01170490fbfb0251001d02f001f50078018f005f00240044005400bf00af
006701a8002600050006003f009800fa02ab00c2004d0375004a00b600c4
01bf017c006f00130263000c006801520002012e0104001f001f009a0000
00f1046900790080005000bd056b00ab0080001e05a5fe4000ce006e0056
004800db018b00b3004802390458005300820082002203d703f104704042
5554403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524
232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706
0504030201002c4523466020b02660b004262348482d2c452346236120b0
2661b004262348482d2c45234660b0206120b04660b004262348482d2c45
23462361b0206020b02661b02061b004262348482d2c45234660b0406120
b06660b004262348482d2c4523462361b0406020b02661b04061b0042623
48482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d
44235920b0ed51582320b04d44235920b09051582320b00d44235921212d
2c20204518684420b001602045b04676688a4560442d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b102
17453ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0
004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a
8cb8100062602b0c642364615c58b00361592d2c45b0112bb0172344b017
7ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b017
7ae41b038a45186920b01723448a8a8720b0a05158b0112bb0172344b017
7ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01
182f2d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b802ee23701020b802ee4520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab903b003b08a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1230188
51b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b
014b5258b2020802436042591bb940000080885458b202040243604259b9
4000008063b80100885458b202080243604259b94000010063b802008854
58b202100243604259b12601885158b94000020063b80400885458b20240
0243604259b94000040063b80800885458b202800243604259b128018851
58b94000080063b81000885458ba00020100000243604259595959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00010000
0006deb825c0ec785f0f3cf50819080000000000a31fb8bd00000000cf71
5306fc05fd8c0aaa0830000200090001000100000000000100000721fe45
00570a3afc05fa500aaa001800070000000000000000000000000bf90639
011c00000000020000000200000002aa009a035c01260400009304000056
06aa00900639006201b6010d02aa008c02aaff2104000122056600be0200
ffeb02aa0036020000450239ffbb0400007a0400007d0400002004000044
040000400400004904000081040000e80400004e0400003b02aa007a02aa
002405660096056600c805660096040000c6075c006104e3ff9c04e3ffd1
0556008a05c7ffc304e3ffd204e3ffce05c7008e05c7ffca02aaffc0038d
ffba0556ffc90473ffbe06aaffbd0556ffc705c7007a04e3ffcf05c70061
04e3ffd10400000e0473008f05c700da04e3010006aa00f904e3ff770473
00b80473fffc031d000d023900da031dff33036000380400ffef02aa0168
0400003004000036038d003804000027038d00400239fe9b0400ffc90400
0029023900580239fea0038d00140239004f05c70023040000270400003c
0400ff1e0400002d031d002a031dffed023900540400003c038d002c0556
0023038dffb8038dff5c031dffc70333008d023300ed0333ff6704540014
04e3ff9c04e3ff9e0556008a04e3ffd20556ffc705c7007a05c700da0400
00300400003004000030040000300400003004000030038d003c038d0040
038d0040038d0040038d0040023900580239005802390058023900580400
00270400003c0400003c0400003c0400003c0400003c0400003c0400003c
0400003c0400003c040000dd033300d404000072040000310400fffc02cd
00ad042f006c0400feb70614008b0614008b07d700be02aa019902aa010c
04640019071dff9405c7004805b40035046400350464005e0464005a0400
fff2049cffd203f4004005b4002b069600920464004802310000023500b2
027b00e40625005b0556002d0400000504000049031d0090056600960464
0054040000020464001e04e5ffc40400005404000025071d010a04e3ff9c
04e3ff9c05c7007a078d002d055600360400ffee071dffed0473018a0473
017502aa01b202aa01910464003503f4002f038dff60047300b70156feab
0400001102aa007402aa002e0400fe7d0400fe7d0400ffe3020000d202aa
00410473001e0800007f04e3ff9c04e3ffd204e3ff9c04e3ffd204e3ffd2
02aaffc002aaffc002aaffc002aaffc005c7007a05c7007a05c7007a05c7
00da05c700da05c700da0239005802aa00fe02aa00c602aa00f602aa0126
02aa01c102aa017d02aaffdb02aa012f02aa001102aa01520473ffc60239
00330400000e031dfff00473fffc031dffc7023300ed05c7ffd004000037
047300b7038dff6004e3ffcf0400ff1e056600960566017a026600a30266
006f02660084060000a1060000a1060000820400ffce05c7008e0400ffc9
02aaffc00400000e031dffed0556008a038d003c0556008a038d003c0400
0027040000c502ab01ee04e3ff9c0400003004e3ff9c0400003005c7ffc3
04de002705c7ffd004e3ffd2038d004004e3ffd2038d00400473ffbe0239
004f0473ffbe02e9004e0473ffbe029500490556ffc7040000270556ffc7
0400002705c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a0400
000e031dffed0473008f0239ffbd0473008f02e9005605c700da0400003c
05c700da0400003c0473fffc031dffc70473fffc031dffc7048dffb605c7
007d0617009d0433003c03b800300327001603f2003602dd0033046d004a
0400ffef0495009a0285001407eb002f0800004f040000990800004f0400
00990800004f040000980400009807d5016a05c700c0056600c604cd0099
0566009804d5022204d5010505abffe904ed01c005ab027e05abffe905ab
027e05abffe905ab027e05abffe905abffe905abffe905abffe905abffe9
05ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905ab02d605ab006605abffea05d5ffff04d500920800
000007eb013007eb012007eb013007eb012004d500b204d5008004d5002a
082b0198086b01b807550010060000f40600006f0440003a0540003704c0
003f0415004004000025060000550600ffc30401004b049e007301c0010d
0355012606ab006c0355001e04d5009202d6008302d6008304d500b202d6
007004e3ff9c040000300556008a038d003a0556008a038d003a04e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004005c7008e0400ffc905c7
008e0400ffc905c7008e0400ffc805c7ffca0400002905c7ffca04000029
02aaffc00239005402aaffc00239005802aaffc00239005402aaffc00239
ffc6038dffba0239fea00556ffc9038d0014038d00140473ffbe0239ffb6
0556ffc7040000270592ffc003db002705c7007a0400003c05c7007a0400
003c04e3ffd1031dff980400000e031dffed04730093023a003105c700da
0400003c05c700da0400003c05c700da0400003c05c700da0400003c06aa
00f905560023047300b8038dff5e0239fe9d04e3ffa504000030071dff94
0556002d05c700480400000502aa014d06aa00f90556002306aa00f90556
002306aa00f905560023047300b8038dff5e02aa01bd02aa00b704000031
04cd005a060000a10600008206000084060000e802aa004c02aaffdb02aa
019902aa00b404e3ff9c056f005d065600590337004d05c7007a0548005e
05cf00200239005404e3ff9c04e3ffd104b2ffa704e3ffd20473fffc05c7
ffca02aaffc00556ffc904d5ff8f06aaffbd0556ffc7051dfff205c7007a
05c7ffc504e3ffcf04c1ffb90473008f047300b804e3ff7705a0011305c9
001b02aaffc0047300bc0433003c0327001603f8003a0239005503ac0035
03fcff7703270031033d002f03f8003a03ee005a0239005503d7001f0377
ffc00404ff94038d002c036d00250400003c03d7ff6f033f003f03ac0035
0385ff4004f8008f05a600480239005503ac00350400003c03ac00350595
003f04e3ffce066000c1048dffb6055a008e0400000e02aaffc002aaffc0
038dffba076bffbb075effc2066400c60550ffc7056200e105c7ffcd04e3
ff9c04b8ffc604e3ffd1048dffb60517ff2d04e3ffd20754ff9003f6fffe
05c7ffcc05c7ffcc0550ffc7056bffb906aaffbd05c7ffca05c7007a05c7
ffc504e3ffcf0556008a0473008f056200e1066f009504e3ff7705c7ffcc
058300e70858ffe40858ffe40568007606faffc604b8ffc6053d001e0842
ffbe0542ff9104000030040600490379003f031f0002040c003d038d0040
0771ffff031fffce0400003c0400003c03be0025037dffa5051bffa403f8
00290400003c040000270400ff1e038d003805c70023038dff5c05ae003c
038dffb80400003c03d10056060a0040060a00400427003c056b006603a4
00660387000f05a4002a03b8ff84038d003c03d500280304ffaa037d0036
031dffed02390058023900550239fea0056fffa605b2002a0400002903be
0025038dff5c040000250385ffc30285005608000041078bffa804020032
0000fefb0000ff3a0000ff380000ff380000ff3a0000ff3a0000ff3a0000
ff380000ff38000000770000ff3a000000f70000feb502f700c00000fff3
02aa005f0000037a0000003602aa007a03d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00bf0208002903c4fffa03d3005901ef00c6038000c1
0349ffc7037000c703c8ffe403c3ffde020b004a023cff9d03b1006b0383
ffcd0372004f036effd5039000c50397fff0038eff8f039500bc04f500c2
03cbff85043800bf040b00c603de00c60186009b02f1009b064c0010021c
00bf038000c10380009c0370000a0370000a0383ffd104f500c204f500c2
04f500c204f500c203d3ffd503d3ffd503d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00670225000303d3005901ef0067038000c10349ffc7
037000c703c3ffde023cff9d03b1006b0372004f036effd50397fff0038e
ff8f039500bc04f500c203cbff85021c00bf037fffc50349ffc7036effd5
0448004a0000ffdc0000ff250000ffdc0000fe510400005a0800000005c7
007a0445003c060800da045d003c0000ff1a0000fdf20000fdb40000ff91
0000fef60000fee40000ff780000ff8a0000fe880000fefb0000fea20000
fe6e0000fdf4000000350000001f0000fe47041a0078060000a10600006f
0000ff2b0000fe6c0000fe8a0000fdd20000ff1e0000fe380000fdcd0000
fd190000fce70000fd710000fd3f0000fcf90000fccd0000fc050000fc05
0000fc550000fc0f0000ff190000ffa20000fe310000fc550000fcef0000
fd9c0000fdda0000fca10000fd530000fcef0000fcb30000fd0d0000fcb3
0000fdba0000fd940000fd7e0000fd300239005804e3ff9c0400003004e3
ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c04000030
04e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400
003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3
ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d0040
02aaffc00239005802aaffc00239003105c7007a0400003c05c7007a0400
003c05c7007a0400003c05c7007a0400003c05c7007a0400003c05c7007a
0400003c05c7007a0400003c05c7007a0445003c05c7007a0445003c05c7
007a0445003c05c7007a0445003c05c7007a0445003c05c700da0400003c
05c700da0400003c060800da045d003c060800da045d003c060800da045d
003c060800da045d003c060800da045d003c047300b8038dff5c047300b8
038dff5c047300b8038dff5c04e3ff9c0400003002aaffc00239005805c7
007a0400003c05c700da0400003c05c700da0400003c05c700da0400003c
05c700da0400003c05c700da0400003c000000be000000be000000be0000
00be048dffb6031f00020754ff900771ffff0550ffc703be00250550ffc7
03be002505c7ffca03f80029047300b804000003047300b80400ffdf04e3
ff77038dffb8058300e703d100560583ffca04000029058f007a038d001b
05c7007a0400003c01ef00b70000ffd50336ffea03de006204000036054b
003904b8ffc60400003604b8ffc604000036055600330556008a038d0038
05c7ffd0063d003904b800260400002703b8000804e3ffe603f6003b04e3
fecd05c7008e05a30100060e00290239004f02aaffc00556ffc9038d0014
0239004a0377ffc0064500870556fecd03f8003a05c7007a0766008e0568
003c054d00390400ff1e04e3ffcf04000013031d001604c1ffb90222004f
0239ff5e0473008f02390054047300cd05c9007a056f00da049d00dd0416
ff5c0473fffc031dffc70453ff5d0453ffdd038dffad038dfff004000020
03b200490311ffb30296ffed042eff1e019a00a1023f00a101fe000a02aa
009a0a3affc308e4ffc3071d00270800ffbe06acffbe0472004f08e6ffc7
078fffc706390027038d001b04e3ff9c04000030000000f304e3ff9c0400
0030071dff940556002d05c7008e0400ff6d05c7008e0400ffc90556ffc9
038d001405c7007a0400003c05c7007a0400003c0453ff5d038dff6a0239
fea00a3affc308e4ffc3071d002705c7008e0400ffc90794ffca04c7ff41
0556ffc70400002704e3ff9c0400003004e3ff9c0400003004e3ffd2038d
004004e3ffd2038d004002aaffc00239002102aaffc00239005805c7007a
0400003c05c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a05c7
00da0400003c05c700da0400003c0400000e031dffed0473008f0239ffd4
04f2ff940321ff4905c7ffca040000290546ffc404e50033045100500473
fffc031dffc704e3ff9c0400003004e3ffd2038d004005c7007a0400003c
000000b305c7007a0400003c05c7007a0400003c05c7007a0400003c0473
00b8038dff6003890048040000300400003004000036038d0011038dffb6
0400002704000027038dffdf04bd001b03270016031fffce0467ffce03bf
003a0239fea00400ffcd0400ffcd03f5003c03cf005803a700750400003c
04000029040000290239000b023900580226ffc6023900460239004f0239
0006046b004805c7003c05c7003c05c700230400fe8404000027040fffe8
0400003c0563003c05a600480456003c031dffdc031dffdc031dffdc031d
ffab031dfffc02df002702df0091038effc603d6ffc6031dffa8024bfea0
024bfea002040014024bfec80239fff702390006040000070429003d03eb
0035038d001205560013038d001203050038031dffc7031dffc7038dff6a
038dffbe034a0007034a007c034a00000389ffe905c7007a0370ffc603bf
000603f5003c0418ffc60239fe9c038dffbd031effc60400002d034a0007
034a007c060c0027065c0027060a0027047b005a0395ffea051d005405cf
fe9b045c004f041a004f041d004603d9ffc00245006f0245006f0151ffa9
01c7006f01c7003d01c7003d02470040031d0081020a000801b6010d035c
012602aa01b202aa019102aa01bd02aa01dd02aa01dd022d00cb022d00e2
0566002705660025056600c4056600c402aa020702aa019902aa016802aa
00a302aaff5902aaffff02aafff6023900610239013302aa00f702aa00f7
02aa00a602aa00a602aa00a602aa000802aa0003030e0105025700aa0117
006f01b000560242005a022d00e203100096031000960310009603100096
0310009602aa006202aa006202aaffbe02aa00ae04730175045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000ff9a0000ff890000fef40000ffe8
000000720000ffcf0000001b0000fffd000000090000008f0000001f0000
ff6a0000ffe80000ffe8000000500000002a00000074000000e80000fec0
0000fea30000fea30000fea30000ff7a000000ad0000feed0000fea30000
fea30000fea30000fdfd0000fe5f0000ffd40000fe370000fea60000fe9a
0000fe8b0000ff380000ff3b0000fdfa0000fe2c0000fe7e0000fde70000
fe570000fdfd0000fe0c0000fe0a0000fd250000fe2f0000fefe0000fee5
0000fe170000fefa0000fe910000feed0000fdfa0000fead0000fe1c0000
ffe5000000650000fef40000fff00000004f0000ff990000002a0000ff55
0000fef80000ff5c0000fd180000fec00000fea30000ff9a0000ffcf0000
ff8d0000fe060000fea30000fd1f00000046000000460000ff530000ff6b
0000ff750000ffff0000ff5b0000ff600000ff740000ff6a0000ff5a0000
fece0000ff9a0000fffa0000ff770000ff4302aa019902aaff9b02aa0041
03fc003d03ed0000051700b506120064051700b50424003c05a6001f047f
000305c7007a0400002d055600a0038e002c04e3ffce03b5ffa70422004d
039c002d059d00b6042d00a10645fffd05c7fff704a5007a042700970630
ffca037effa3045600320456003204f6ffed04320048059b007603f5003c
0322fffc02b6000c047f0003040f00070391003c0239fea405c7007a0339
003c0339ffa104e3ffd205c7ffcc038d00400400003c0916007a0517009b
056600740556002707b2ffc00564ffc60593ff8f0456ff960827ffc00640
ffc606d9ff740516ff840981ffc00714ffc603f6ff56031fff2d05a000db
04f8007005c7007a0400003c055c01000471002c055c01000471002c08dd
007a071b003c06420052049c00280916007a0676003c0000fe370916007a
0517009b0556008a038d0038023cffbb0000ff760000ffae000000640000
003c0000fc2b0000fc4c05c7ffcc0400003c04b8ffc603a4006604e3ffcf
0400ff1e0516ffb6038effaa03f6fffe031fffa40550ffc703be002505ff
00760438003c06f2ffca04fa00290822ffc5058700270556008e038d003a
0556008a038dfff40473009005c7002305c7ffcc0400003c058300e703d1
005606840040045f000106840040045f000102aaffc00754ff900771ffff
0550ffc703be0010056bffb9037dffa505c7ffca03f8ffbc05c7ffca03f8
0029058300e703d1005606aaffbd051bffa4044801cd04e3ff9c04000030
04e3ff9c04000030071dff940556002d04e3ffd2038d0040058f007a038d
001b0754ff900771ffff03f6fffe031fffce03f6fffe038dff6a05c7ffcc
0400003c05c7ffcc0400003c05c7007a0400003c05c7007a0400003c053d
001e0387000f056200e1038dff60056200e1038dff60056200e1038dff60
058300e703d1005606faffc6056b006604b80047040000270669004705a2
0027063700ea052d0082042800ea031f0082073affb90526ffa50794ffca
0590002905c7008e03f5003c056e00cd075a00230000fe2a000000030000
002400000073000000000000fe3e000000630000ffb80000ff730000ff84
0000fe4f000000110000010e0000ffb70000ff35000000020000000d0000
fe6a0000fe8a0000fe400000fde00000fe7900000063000000240000fe55
0000005a0000002d0000ff380000fec00000006500000042000000a30000
00a3000000b3000000b3000001440000010d000000a304e3ff9c04000030
04e3ffd10400003604e3ffd10400003604e3ffd1040000210556008a038d
003c05c7ffc30400002705c7ffc30400002705c7ffc30400000d05c7ffc3
0400002705c7ffc30400000304e3ffd2038d004004e3ffd2038d004004e3
ffd2038dffc704e3ffd2038d000004e3ffd2038d004004e3ffce0239fe9b
05c7008e0400ffc905c7ffca0400002905c7ffca0400002905c7ffca0400
002905c7ffca0400ff9f05c7ffca0400002902aaff880239ff7402aaffc0
023900580556ffc9038d00140556ffc9038d00140556ffc9038d00140473
ffbe023900130473ffbe023900130473ffbe0239ff4f0473ffbe0239feff
06aaffbd05c7002306aaffbd05c7002306aaffbd05c700230556ffc70400
00270556ffc7040000270556ffc70400fff90556ffc70400000305c7007a
0400003c05c7007a0400003c05c7007a0400003c05c7007a0400003c04e3
ffcf0400ff1e04e3ffcf0400ff1e04e3ffd1031d002a04e3ffd1031d002a
04e3ffd1031d002a04e3ffd1031dff090400000e031dffed0400000e031d
ffed0400000e031dffed0400000e031dffed0400000e031dffed0473008f
023900540473008f02390013047300350239ff59047300170239fef505c7
00da0400003c05c700da0400002805c700da0400000305c700da0400003c
05c700da0400003c04e30100038d002c04e300b3038d002c06aa00f90556
002306aa00f90556002304e3ff77038dffb804e3ff77038dffb8047300b8
038dff600473fffc031dffc70473fffc031dffc70473fffc031dff810400
ffe50239005405560023038dff60040000300239fe9d0433003c0433003c
0433003c0433003c0433003c0433003c0433003c0433003c04e3ff9c04e3
ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3ff9c03270016
032700160327001603270016032700160327001605ab008d05ab009a06d7
007f06d700b906d7007f06d700b903f8003a03f8003a03f8003a03f8003a
03f8003a03f8003a03f8003a03f8003a068f008d068f009207bb007f07bb
00b907bb007f07bb00b907bb00d007bb00d0023900580239005802390043
02390058023900580239005802390058023900580372008803720088049e
007f049e00b9049e007f049e00b9049e00d0049e00d00400003c0400003c
0400003c0400003c0400003c0400003c068f00c9068f00f507bb007f07bb
00b906f3007f06f300b903ac003503ac003503ac003503ac003503ac0035
03ac003503ac003503ac0035053b009106cb00b906cb00b906cb00d005a6
004805a6004805a6004805a6004805a6004805a6004805a6004805a60048
069100c9069100e307bd007f07bd00b906f5007f06f500b906f500d006f5
00d00433003c0433003c032700160327001603f8003a03f8003a02390058
023900580400003c0400003c03ac003503ac003505a6004805a600480433
003c0433003c0433003c0433003c0433003c0433003c0433003c0433003c
04e3ff9c04e3ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3
ff9c03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb
03f8fffb068f008d068f009207bb007f07bb00b907bb007f07bb00b907bb
00d007bb00d005a6004805a6004805a6004805a6004805a6004805a60048
05a6004805a60048069100c9069100e307bd007f07bd00b906f5007f06f5
00b906f500d006f500d00433003c0433003c0433003c0433003c0433003c
0433003c0433003c04e3ff9c04e3ff9c04e3ff9c04e3ff9c04e3ff9c02aa
019102aa004102aa019102aa00c602aa010c03f8fffb03f8fffb03f8fffb
03f8003a03f8fffb060f00fe060f00d106f300f606f300d105c7ffca02aa
00e302aa00e302aa013402390058023900580239003c0239003c02390058
0239005802aaffc002aaffc003d600ec03d600d102aa011d02aa011d02aa
013403ac003503ac003503ac003503ac003503d7ff6f03d7ff6f03ac0035
03ac0035047300b8047300b806030104060300d105ab009702aa00b402aa
00b402aa016805a6004805a6004805a6004805a6004805a6004806f30104
05c7007a06f5010405c9001b05c9001b02aa019902aa01bd04ef00ba0556
008a0556008a05c700230556ffc70871ffd106aa00590556ffc90473008f
0800ffbe0400ffad04c10066000000460000004600000046000000460239
000b0239fea00400ffc404e3ffcf040000270239ff40040000270239ffb6
044affe3044affe302aafffd02aafffe02aa002402aa003402aa000202aa
009502aa001402aa002102aaff6c02aa00ff02aa019f02aa019102aa000a
02aaffef032effa6032effa402aaffb000000033000000680000ffb60000
fea60000feed0000fee70000fe1a0000006800000046000000460000fe0a
04e3ffcf0400ff1e0330ff900491ff900556002d0343ffc7039d003c0411
ffc60411ffc6031fffc6031fffce023900090307002a03abffc60332ffda
04ccffda040bffc60400003c03c8003c042a003c042a003c0497003c0556
00360385003c03ee003c03ee003c0346ffc603efffc603370014030a0044
03ec00840471006a057d008004ef00b7035e008c049e008c0337fff102d1
ffdc033600000466ffba032dffc60331ff900403ffc60346ffc603f60092
03a2ffbc0354006304940063035b0089035a008903d60089034100890341
008f03a400de02dbfffa0217008902b900a803f200830332008204880084
03ac008a03f3008503cd00de02b200ad031f0082037b0084031700f203fe
0138048b014d033000e7033000e7033000e7032800850227006a027b0089
021900870219008601e4007801e40070024900350144005b0240006f0356
006e022a006e0249007b0214007202490083024900780243ffda01580098
02580085028b009103720085023d008a02d900690246000301d80080023b
00830271007d0227fff80144000a01f8ffe20258ffe9023dfffc0246ff72
01d8ffe00246ffc90271ffdc0227ff5d0509ffd5048300bd04faffd10475
ffc7049c00c704f4ffe404cb00bc04f7ff85048300250000ff3a0000ff38
0000ff380400ffee0473018a035c00db0400000008000000040000000800
000002ab000002000000015500000400000002000000019a000000ab0000
000000000556008a06aaffbd04ccff5f05cf003c060500270608002d04e3
ff9c0556008a040000720473ffbe0473ffa5031dffed031d000403e50061
000001cf0000feb60000fe140000003c0000ffcb03d7ff340556008a0556
008a0556008a048dffb6031f00020000fe54000000770000fee40270ffd3
0000ff3804000036040000270239fe9b05c7000b040000140400fefa031d
ffae02dfff9f031dffed0239ffcf031dffc70400ff750258002803c5ffaa
059affc30226ffc60239000b0400ff1e03ec00290429ffe3040000360400
002702d6fe9b04bbffc9038d00140239ffac05c70023040000270400ff1e
031dff1a031dffed02d1fea0038d002c038dffb8031dffc7040000300400
003004000027038d004003270016031fff65038d001b02390058038dffa6
024bfec40400003c038dffad033000e7021a007b021a002f0252007b01e4
00700164ff960164ffaf0288007b0258008d0144006b0144009301440048
014400480144ff970144006b0144002b01c5002c032b0065032b0072022a
ff61022a006f022a00340249007a027b007b01cf00310164ff9c01580001
0258006a0262007b025800aa02580083023d008101ef005601ef0057021b
005601effff2024900910000ff510000ff540000fee10000ffa002aa007a
0257ffed0219ffe30249ffe50246ffcb0219ffe005c7008e04e3ff9c0400
00130556008a02aaffed0433003c0433003c0433003c0433003c0433003c
0433003c0433003c0433003c023900580239005802390058023900580239
005802390058023900580239005803ac003503ac003503ac003503ac0035
03ac003503ac003503ac003503ac00350239005802390058023900580239
005803ac003503ac003503ac003503ac0035037d003804e3ffd105c70066
04d5ff8f04e3ffd2038d0040038dffba0239fea005aa008e0400002d04e3
ffd1031d0015047300a2038dff5c039100140391003c039100140239004f
048dffb6031f000204e3ff77038dffb804e3ff77038dffb803f6003b037d
0017056bffb9037dffa50000ffbe0000ffb50000ffdc0000ff950000ff54
0000ff330000febc000000500000fe1a070e0020031fffde039100140473
ffbe023900350473ffbe04e3ffcf04e3004c040000300239ff9005c7ffca
040000290556ffc9038d00140473fffc031dffc7038d003a04ccffca0345
0029046d004a0000006a000000a6000000270000000a0000ffa70000fe6e
023900580592ffc00556ffc70592006e0000fecc0000ff1c0000fee20000
fef70000fedd0000fee60000fec50000fefa0000fee50000fec50000feb2
05c700610400002d06aa00f9055600230579ffb10000ff8305be007a0474
002c06aa00f90665002302aa00b0033d007701b600a201b600f004000099
0400009902aa018102aa017b02aa010a02aaff7404730077040000910400
005a02f2001e03df001103cfffe60400001703aeffd504180084040000b4
0400006b04180036043900970323001404000020039f00260400004003c0
00290400008103b800be0400004e0400003b023900580471fe980695fea9
0692feab0435fe9c068afea903c9ff8803e2ffbc0434004e04a8ffbc03a9
ffbc036cffbc0476004e04c7ffbc0257ffbc0298ffc30462ffbc038affbc
0533ffbe049affc70476004903b3ffbc04760048040affbc0334fffe03a8
006f049b009603c3007605dc008b0405ff9903f6008b0405ffc90548ffa6
05dc0049038affbc0476ffe703b3ffbc04a8ffbc0466ffb003c9ff8803c9
ff8803c9ff8803c9ff8803c9ff8803c9ff880434004e03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0257ffbc0257ffbc0257ffbc0257ffbc049affc70476
004904760049047600490476004904760049049b0096049b0096049b0096
049b009603f6008b03c9ff8803c9ff8803c9ff880434004e0434004e0434
004e0434004e04a8ffbc04a8ffbc03a9ffbc03a9ffbc03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0476004e0476004e0476004e04c7ffbc0476004e04ac
ffbc0257ffbc0257ffbc0257ffbc0257ff8f0257ffbc04b2ffbc0298ffc3
0462ffbc038affbc038affbc038affbc038affbc049affc7049affc7049a
ffc7047effbc047600490476004904760049040affbc040affbc040affbc
0334fffe0334fffe0334fffe0334fffe0334fffe03a8006403a8006f03a8
006f03b20079049b0096049b0096049b0096049b0096049b0096049b0096
05dc008b05dc008b05dc008b05dc008b03f6008b03f6008b03f6008b0405
ffc90405ffc90405ffc903c9ff880548ffa60476ffe703c9ff8803e2ffbc
0356ffbc03d7ffb403a9ffbc0405ffc904c7ffbc047600480257ffbc0462
ffbc0414ffab0533ffbe049affc703e3ffd00476004904c1ffb603b3ffbc
03b3ffbf03a8006f03f6008b047f00350405ff9904a400bd048dffc503c9
ff8803a9ffbc04c7ffbc0257ffbc04760049048dffc503f6008b0257ffbc
03f6008b03a9ffbc04c200720356ffbc0437004e0334fffe0257ffbc0257
ffbc0298ffc305a3ffad05c8ffbc04ba0069044affbe0435005504c8ffbe
03c9ff8803cbffba03e2ffbc0356ffbc045cff4d03a9ffbc05b0ffa5035c
ffe804c6ffbe04c6ffbe044affbe045bffad0533ffbe04c7ffbc04760049
04c1ffb603b3ffbc0434004e03a8006f04350055048600350405ff9904c9
ffb6044c00a5068dffcd0694ffcd0491007905b1ffba03ccffba04370013
0659ffbc0437ff890356ffbc02560056025600850256004a025600540256
00480256004a02560052025600a60256004c025600560256005602560085
0256004a02560054025600480256004a02560052025600a60256004c0256
005604cf003007bdffc407bdffc407bdffc407bdffc407bdffc407bdffc4
07bdffc406b4003c0513007a0513007a0749003c06ad003c06ad003c06ad
003c06ad003c06ad003c0664003c05cb008d0794ffc40487003c0487003c
0487003c0487003c0487003c048effc40723003c050dffe7050dffe709d7
ffc407bcffc407bcffc405a7007905a7007905a7007905a7007905a70079
05a70079062b0054062b00540672003c05c7007d06e6003c043dffb5043d
ffb505a2003c06eb003c06eb003c06eb003c06eb003c06eb003c0612003c
0811003c0673ffc404ad007c04ad007c04ad007c04d9fff104d9fff10759
005e07bdffc407bdffc407bdffc40513007a0513007a0513007a0513007a
0749003c06ad003c06ad003c06ad003c06ad003c06ad003c05cb008d05cb
008d05cb008d05cb008d0794ffc40794ffc40487003c0487003c0487003c
0487003c0487003c048effc40723003c050dffe7050dffe7050dffe7050d
ffe707bcffc407bcffc407bcffc405a7007905a7007905a7007906e6003c
06e6003c06e6003c043dffb5043dffb50400000e0400000e05a2003c05a2
003c05a2003c05a2003c06eb003c06eb003c06eb003c06eb003c06eb003c
06eb003c0811003c0811003c0811003c0811003c04ad007c04ad007c04d9
fff104d9fff10723003c0774008f0884003c0428ffca031c003c0473008f
0423007b05c7006204400027052effc9040000c60400006b0400fffd07db
ffb90553ffa5074cffcf058fff1e0781ff910591ff840556ffc903d7001f
07f2ffb90504ffa5084cffca0577002905c7ffc5040000270583ffca0400
00270239fe9b0239fe9b03b800300688ffc00438004f046b007a03ae003c
04fdffce03bbfec306aaffbd04e3010a05be003704700040031dfff10400
003c031fffe60151fefa035e010b0400000e0473fffc0239ffc60400ffab
05c500d40590ffa605d400c405f30049058100d405c4002904faffb0059e
ffa60722ffa806170055054fffb00412ffb00770ffb005de0089059a00e4
04b7ffd005cf004d05c4004905c1002f068500d505aa007b05a200b90587
005e05b8ffa6059300cb06a4003f05b5001b0657ffa605b800d505e90053
052f005b0570ffa605860068047dffb5063f0088066f000605e800800679
00670199013201fe01430154008d00f7009001a8009201da0065047501d9
05c9003e03cfff200420003f03fe002903e800410416003d0339001803fa
ffaa0516ff200442004703fdff2001ffffae05f5ff2003fc004603c80047
03e7001703d7003a03fd002903d40039040c003b01d3fe8403e6004702e9
ff0d03fa00290239ff2c05b5003c037eff670438002903fa003b03f8003d
05e0003c03faff2003d1fff70287002d05c5003b042aff2a040d00400575
003704b100410239007a02f400bf077a0045077a00450616004907f2003b
07f4003b0809003b07de003d0a01003b0000ff7d0291ff7e035700bd03ce
ffd103cbff850000003a0000ffc80400ffda000000000000006800000068
000000680000006800000116000001fe0000040c0000065e000007ec0000
099c00000a0e00000a8e00000b1600000ce800000d5c00000dd000000e08
00000e5200000eb800000fbe000010ea0000120200001356000014e60000
16140000174c000018220000197600001ab200001b3600001be600001c9a
00001cf400001db200001eec00002140000023540000259a000026a40000
281a00002a6c00002c4800002db6000030a20000329e00003406000036a8
0000383200003af400003ce800003e0800003fbe00004196000043c00000
45c0000047580000494800004b2200004dae00004fda000051fc0000535e
000054500000549c000055bc000056240000565a000056ca000059460000
5ac200005c4600005ebe00006032000062640000644c00006642000067e6
0000696000006bba00006d440000707e000072b2000073b8000075a60000
77860000790400007a5400007bc000007e0a00007f80000081800000835a
0000851a0000871a0000881a000088560000896400008a0c00008a400000
8a8000008aae00008af600008b2e00008b6000008b9800008bc800008bf8
00008c2800008c5a00008c8e00008cca00008cf800008d2600008d5a0000
8d8a00008dba00008dea00008e1a00008e5600008e8600008ec000008ef0
00008f2000008f5000008f8400008fba00008fec0000901a0000904c0000
907e000091b000009238000093b800009558000096c600009734000097ea
000099d600009be000009d8c0000a0340000a0920000a1280000a20e0000
a4ee0000a6ac0000a8060000a8a60000a9ae0000aaa60000ad120000aeae
0000afa60000b0de0000b1c40000b3660000b47a0000b5de0000b6560000
b7e00000b9c80000bb8a0000bc7c0000bd480000bd920000be380000bfec
0000c1200000c1aa0000c28e0000c3680000c4100000c4420000c4720000
c4a20000c6f40000c8a80000c8de0000c9160000c9f00000cac60000cb30
0000cba20000cc520000cd0c0000cd500000cd8a0000cddc0000cf3c0000
cf9e0000cffa0000d1fa0000d4020000d5d00000d6120000d6860000d75a
0000d98a0000d9ba0000d9ee0000da1e0000da520000da8e0000dac00000
daf00000db2e0000db620000db920000dbcc0000dbfc0000dc400000dc8a
0000dcc00000ddb40000de240000debe0000defc0000df780000dfc40000
e0320000e0d80000e1740000e1e20000e2520000e41e0000e57e0000e5b0
0000e5e00000e6120000e6440000e6a80000e82c0000e9a00000e9d60000
ea0a0000eba00000ed2a0000ed600000ee380000ef5e0000f0460000f142
0000f3540000f59a0000f7e00000f9ac0000f9dc0000fa0a0000fa440000
fa720000fa9e0000face0000fafe0000fb380000fb720000fd580000fd92
0000fdd80000fe080000fe360000fe5c0000fe820000feb20001008a0001
009a000100c2000100e80001011c0001016400010194000101c600010346
00010486000104bc000104fe000105300001056400010594000105d40001
06220001066e0001069e000106d80001070a0001074200010778000107b0
000107d6000107fa00010840000109a8000109dc00010a1a00010a660001
0ab200010ae200010b1c00010b5400010b8600010c9400010e520001105a
00011182000112be00011416000114fa000115fe0001177a000117e40001
180c0001195800011c6a00011ce200011d6200011ddc00011e5800011efe
00011fae00012088000120de0001218e00012218000122be0001230a0001
238e00012412000124480001246400012484000124a4000124c4000124e4
0001250a00012530000125560001257c000125ac000125d4000125fc0001
26260001265000012684000126ae000126da000127100001273800012764
00012798000127c2000127ec000128200001284e00012882000128c40001
28f4000129280001296a0001299e000129d000012a1200012a4600012a76
00012ab800012afc00012b4200012b9e00012bba00012bd600012bf00001
2c0a00012c2400012d920001303c000132ac000132c6000132e0000132fa
00013316000133320001334e000133aa000133e40001344c000135240001
35c8000136a000013720000137a800013816000138ac0001390400013944
000139a200013a0400013a4600013ac600013b0c00013b1c00013b2c0001
3ce800013e2400013e4e00013e6a00013e9600013ece00013f1a00013f5e
00013f9200013fc200013ff80001402800014056000140a0000140d20001
4102000141360001416c000141a4000141d8000142080001423800014266
0001428c000142be000142ee000143300001461e00014818000148640001
489a000148d8000149060001494c00014982000149a6000149ca000149fe
00014b4e00014b7400014b9800014d9000014db600014ddc00014e020001
4e2600014ff0000151da000152100001524000015274000152a4000152ca
000152f0000153240001535200015534000156f800015738000157680001
5798000157d60001582a0001585a00015880000158a6000158d600015906
000159360001596400015a7200015ac200015af200015b2200015b520001
5b8200015bb200015bfc00015c2c00015c5c00015c8c00015cbc00015cf0
00015d2800015d5c00015d8a00015e1000015e480001604e000161600001
63940001658800016768000169100001697400016a0c00016a1c00016ade
00016cca00016ee80001710a000172320001732800017570000177820001
79060001791600017926000179f800017a0800017a1800017a2800017a38
00017a4800017b8200017b9200017ba200017dde00017dee00017f6a0001
7f7a000180d6000180e6000180f6000181060001833a0001854200018576
000185b4000185e4000186120001864200018672000186b2000188140001
893000018a6200018bf600018cfc00018d0c00018ef20001901c0001916c
0001917c0001930e0001931e0001944e0001957000019690000198000001
9a0a00019b6800019b9800019bec00019c1c00019c5200019c8600019cba
00019eda00019f0a0001a0120001a0220001a0320001a0660001a0760001
a26c0001a5320001a7440001a7740001a9840001abfa0001ac0a0001ae26
0001ae360001ae460001afaa0001afba0001b2da0001b4000001b6d00001
b9fc0001bbba0001bd100001bd200001bd300001bd400001bd500001bd60
0001bd700001bd800001bef20001c1420001c1520001c3a80001c5720001
c7940001c9de0001cb280001cda80001cf720001d0b60001d3320001d4b6
0001d4c60001d60a0001d7200001d8120001d8ec0001d8fc0001daec0001
dc160001dc260001dece0001e05a0001e1d80001e3c60001e52c0001e53c
0001e54c0001e55c0001e56c0001e57c0001e58c0001e7b20001e7c20001
ea400001eb960001edcc0001f0540001f1b80001f3cc0001f5280001f632
0001f77c0001f9540001f9840001fafe0001fc5c0001fd800001fd900001
fda00001fdd00001fde00001ff4e0002013a0002014a0002017a00020332
00020540000206d2000207e80002081c00020a7600020c2200020c9e0002
0dc000020e5a00020f2800020f6e00020fe600021098000210c00002112a
00021170000212240002126a00021294000212bc000212e40002131e0002
1360000213a200021420000215ca000216ac000217dc0002187e000219a4
00021a3800021ae200021c0000021d2800021dd600021e7c00021f160002
20360002211000022238000222e0000223980002248c0002260e0002272a
000228320002297400022ae400022c0800022c9800022e6e00022f580002
305e0002319a000232be000233400002341e000235140002352c00023544
0002355c000235720002358e000237220002373a00023752000237720002
3792000237aa000237c2000237da000237f0000238060002381c00023834
0002384c000238640002387c00023894000238aa000238c0000238d60002
38ee000239060002391e000239360002394e000239660002397e00023994
000239ac000239c4000239dc000239f400023a0c00023a2400023c360002
3c6000023d7a00023e2c00023ed60002401c00024362000244f200024630
000247fc00024a2800024aaa00024b0000024b5800024bee00024c820002
4cda00024d9c00024ea200024f600002502c000250dc000251c20002525e
00025322000253d600025416000255de000257bc00025964000259b80002
5a0c00025a6000025ab400025b5800025bf400025ca000025d4c00025df8
00025e8c00025f2000025fb400025fc600025fd800025fea00025ffc0002
600e00026064000260bc0002615000026162000261740002618600026196
000261a8000261ba000261cc000261de000261f000026202000262e80002
63940002647a00026526000266260002665000026680000266b8000266e4
0002672c00026790000267ec0002683600026888000268f6000269480002
6998000269da00026a2c00026a7a00026aba00026b0c00026b5c00026ba6
00026bf000026c3000026c7400026cba00026d0200026d4200026d680002
6da200026dd000026e0400026e5600026ebe00026f1800026f7e00026fbe
0002701a00027090000270ec0002713200027198000271d6000272160002
724e00027290000272cc000272f2000273240002735c000273a200027402
0002745e000274bc000274fe00027556000275d400027624000276700002
76b4000277000002773c00027776000277ae000277de000278160002785c
0002788c000278c6000278ec000279200002795a00027980000279b60002
79f000027a3000027a6800027aa000027af200027b2c00027b6000027ba4
00027bdc00027c1600027c3c00027c7800027c9e00027ce600027d2c0002
7d6e00027dc600027e0c00027e5e00027e9800027ee000027f1a00027f6c
00027faa0002800e00028040000280f200028124000281ba000281ec0002
8288000282ba0002836e000284680002859a000286f40002881a00028936
00028a4400028cdc00028ef2000290c40002927e0002947e000296960002
9854000299b4000299c400029ae800029c5000029dae00029f420002a0d2
0002a2940002a4400002a5760002a5860002a68c0002a7620002a87a0002
a9500002a9680002a9b60002a9de0002a9f40002ab7e0002ad260002aea8
0002afca0002b1020002b1fc0002b34e0002b4a00002b5d60002b5e60002
b7640002b8c80002ba2e0002bb800002bd000002be2a0002bf760002c0e4
0002c26a0002c3ee0002c3fe0002c5400002c72a0002c8d40002ca060002
cb580002cda40002cf020002d01a0002d02a0002d1900002d2f80002d44e
0002d5c40002d7620002d91a0002daac0002dabc0002dba80002dd320002
de3a0002df600002e0860002e25a0002e3920002e4e80002e6300002e74a
0002e85e0002e9800002ea860002eb8a0002ecec0002edce0002eec00002
efd40002f13e0002f2660002f28e0002f2ce0002f3420002f3520002f394
0002f3d60002f4180002f43e0002f4660002f49a0002f4c20002f4ec0002
f5280002f5fa0002f6240002f6740002f6dc0002f7040002f7520002f782
0002f7b20002f95e0002fba00002fbd00002fbfe0002fc2e0002fc5e0002
fc840002fcaa0002fcec0002fd2e0002fd5e0002fd8c0002fed40002fefa
0002ff200002ff460002ff760002ffa6000301e000030318000303480003
0376000303aa000303de0003040e0003043e00030472000304a6000304d6
000305060003053a0003056e0003059e000305ce00030602000306360003
066600030696000306ca000306fe0003072e0003075e00030792000307c6
000307f6000308260003084c0003087000030894000308b800030a480003
0b7800030ba800030bd800030d3000030eb800030ff8000310c20003119e
000311ce000311fe000314240003158c000315b600031608000316c40003
16ec0003173e0003176e0003179e000317c6000318140003184400031872
000319d4000319e400031b2600031c6000031d2800031e5200031fe00003
217a00032268000323cc000324f60003262a000327c8000328ee00032a1e
00032bcc00032d2a00032e5e00032fd6000330ec0003325e000333c00003
353c000336d6000336e6000337ac0003393e00033aae00033b8000033d40
00033f80000341a4000343d8000345980003473a000348d8000348e80003
4afc00034c4400034dee00034f20000350520003519e000352c60003544c
000354cc00035564000356ce0003584200035a1600035af000035c340003
5d2800035e3800035f2000036012000362160003634800036492000365b6
0003671200036874000369c000036ad400036bfe00036d0e00036e580003
6fa0000370c0000371e8000372bc00037410000375620003767e00037818
000379b800037af200037ca000037d9400037f2c000380ba0003822e0003
843e000386c60003890600038ab600038c9800038e70000390e200039294
000393e2000395ae0003967200039824000399f800039ad200039c040003
9d5000039ea40003a0b00003a2240003a3a00003a3b00003a3c00003a3d0
0003a3e00003a3f00003a4ac0003a57a0003a6ac0003a79a0003a7aa0003
a7ba0003a81e0003a8880003a8b80003a8c80003a8d80003a9040003a934
0003a9880003a9de0003aa3c0003aa740003ab380003ac0e0003ac440003
ac7c0003acc40003acf60003ad880003ae4a0003b0480003b11e0003b35c
0003b54e0003b6640003b69a0003b6de0003b7220003b7660003b79c0003
b7ce0003b8100003b8820003b8d40003b8e40003b95c0003b9e20003ba52
0003bab40003bb3a0003bb9a0003bc040003bc780003bce80003bd460003
bdec0003be840003bef00003bf7e0003bfd80003c0460003c0f00003c196
0003c22c0003c29c0003c31e0003c3820003c42e0003c4ec0003c5980003
c62a0003c6880003c6f40003c74a0003c7cc0003c84a0003c8d00003c95c
0003c9b60003ca220003ca920003cb000003cb700003cbf40003cc840003
ccea0003cd640003cde00003ce580003cefe0003cf960003d0260003d084
0003d1220003d19e0003d2300003d2d40003d37e0003d4160003d4720003
d4c60003d52e0003d5d40003d67e0003d7480003d7ee0003d8500003d8a8
0003d9080003d9960003da1c0003daaa0003db0a0003db6e0003dbd80003
dc400003dca80003dd200003dda80003de3c0003dea80003df100003df74
0003e0200003e0e00003e18e0003e21c0003e27a0003e2e60003e3560003
e3fa0003e4a00003e5640003e6060003e66a0003e6fa0003e76c0003e804
0003e8820003e8fc0003e9680003e9f60003ea520003eab00003eb360003
ebb20003ec1a0003ec7e0003ecd20003ed400003eda80003ee260003ee9c
0003ef160003ef960003eff20003f0580003f0bc0003f15c0003f1fe0003
f2bc0003f36c0003f3c80003f4400003f49e0003f5280003f5c00003f64e
0003f6b40003f7120003f7a00003f8120003f8ac0003f9400003f9b00003
fa200003fa980003faf60003fb560003fbd00003fc2a0003fc8a0003fce4
0003fd400003fda80003fe140003fe460003fe700003febe0003ff020003
ff720003ffda0004002800040096000400c60004011000040166000401e2
0004022800040288000402f00004033e000403a6000403d80004040a0004
043e00040474000404a6000404fa000405c6000405fc0004063000040676
000406a60004072a000407b40004082000040884000408d6000409440004
09b0000409de00040a2200040a8e00040b0000040b7000040bc000040c0c
00040c9a00040cca00040cf200040d3400040dc400040df600040e280004
0e7a00040ec200040f8400040fc800041004000410800004119a00041208
0004124c00041280000412b600041346000413ae000414400004149c0004
14e2000415260004156e0004159c000416d4000417c2000418c400041914
0004195000041c7000041cd200041d2200041d6200041e9400041f760004
2074000421840004232e000423f60004257a0004272c000429b400042ae6
00042c1600042d1800042f0a00042f1a00042f4c00042fa8000431160004
329400043406000434380004346c000435b6000436fc0004391c00043aae
00043c0a00043d0800043df800043f1a0004401200044134000441be0004
434200044462000446aa000448e800044a4800044bac00044d5000044e82
00044ffc0004510600045250000453da0004551a00045620000457b60004
58dc00045a4a00045bce00045c7800045c8800045c9800045d3200045dea
00045e1a00045e4a00045e7800045ea6000460aa000461f6000463980004
650a00046702000468e000046afa00046d0400046fd20004728800047486
00047620000478ec00047b6600047dec0004804600048234000483800004
84e8000486340004873e000488320004898c00048ad800048d0200048edc
00049064000491cc0004944a0004960c0004966c0004969c000496cc0004
98120004991a00049a4a00049ab000049b0600049b5400049bbc00049d86
00049f960004a1ba0004a3b40004a4e80004a6040004a7820004a94a0004
aaf80004ac920004ae080004af720004b1800004b3300004b52e0004b67e
0004b86c0004b99e0004bb960004bdba0004bf900004c0ee0004c25e0004
c3720004c4ba0004c7100004c8fc0004c92c0004cade0004cc4a0004cd94
0004ced40004d06c0004d1b20004d1c20004d1f20004d2220004d42a0004
d5ae0004d71c0004d8760004da740004db8a0004ddba0004df160004e0bc
0004e22a0004e4000004e5d60004e6460004e6760004e6a40004e6d80004
e70c0004e71c0004e72c0004e75c0004e78a0004e7be0004e7f00004e824
0004e8580004e88c0004e8be0004e9d80004e9e80004ea180004ea460004
ea7a0004eaac0004eae00004eb140004eb480004eb7c0004ebb00004ebe2
0004ec120004ec400004ec740004eca60004ecda0004ed0e0004ed420004
ed740004eda80004eddc0004eef40004ef040004f0820004f1fc0004f380
0004f4e00004f6760004f8140004f95e0004fa720004fc6e0004fdc20004
fef60005001c0005013e0005037a000503e000050496000505000005056c
000505fc00050640000506760005076e000507b0000507ec000508640005
08a8000508ec0005096800050b4000050be600050c4600050c7c00050cb8
00050cfc00050d7800050dec00050e3000050ed200050f3800050f740005
0faa00050fee000510c00005111c00051158000511e60005127200051346
0005144a000514ae00051554000515ee000516160005163e0005166e0005
1694000516ba000516e0000517060005172c0005176e000517b0000517e0
000518060005182c00051852000518780005189e000518c4000518ea0005
1910000519360005196a000519b2000519e600051a3600051a5c00051a82
00051aa800051ace00051afe00051b2e00051b5e00051b9a00051bca0005
1bf800051c2800051c5800051c7e00051ca400051cd800051d0c00051d34
00051d5800051d7e00051da400051dca00051df000051e2600051e7a0005
1eaa00051eda00051f0000051f2600051f4c00051f7200051f9800051fc0
0005200200052052000520780005209e000520c4000520ec0005211c0005
214c0005217c000521ac000521d2000521f800052228000522560005227c
000522a2000522c8000522ee000523140005233a0005236e000523c00005
23f60005246000052494000524dc000525100005256000052590000525c0
000525f00005261e0005264e0005267c000526a2000526c80005270a0005
274a0005277000052794000527c4000527f2000528180005283e00052872
000528be000528f20005293e00052980000529c0000529f000052a200005
2a4600052a6c00052a9200052ab600052adc00052b0200052b2a00052b52
00052b7800052b9e00052bc400052bea00052c1e00052c7000052ca60005
2d0600052d3600052d6400052d8a00052db000052de000052e1000052e36
00052e5c00052e8c00052eba00052eee00052f2000052f5000052f7e0005
2fae00052fdc00053002000530280005304e0005307200053098000530cc
00053100000531320005316000053190000531be000531ec0005321e0005
325000053284000532b8000532ea0005331c0005334c0005337c000533ae
000533e0000534120005344400053476000534a8000534d6000535040005
3536000535680005359a000535cc00053600000536460005367a000536ae
000536e2000537160005374600053776000537a8000537da0005380e0005
384200053876000538aa000538de00053912000539460005397a000539ae
000539e200053a1600053a4a00053a7800053aa600053ada00053b0e0005
3b4000053b7200053ba400053bd600053c0a00053c3e00053c7200053ca6
00053cda00053d0e00053d4200053d7600053da600053dd600053e080005
3e3a00053e6e00053ea200053ed400053f0600053f3800053f6a00053f9e
00053fd2000540000005402e0005406000054092000540c6000540fa0005
412c0005415e00054192000541c6000541fa0005422e0005425e0005428e
000542c2000542f60005432a0005435e00054392000543c6000543f80005
442a0005445c0005448e000544c2000544f6000545280005455a00054588
000545b8000545e6000546140005464200054672000546a2000546d00005
46fe0005472e0005475c0005478c000547bc000547ec0005482c0005486c
000548ae000548f00005493400054978000549ba000549fc00054a3e0005
4a8000054ac400054b0800054b4c00054b9000054bd400054c1800054c58
00054c9800054cd800054d1800054d5a00054d9c00054dde00054e200005
4e6600054eac00054ef200054f3800054f7e00054fc40005500a00055050
00055092000550d4000551180005515c000551a0000551e4000552280005
526c000552b0000552f4000553380005537c000553c2000554080005544c
00055490000554be000554ec0005552c0005555200055594000555c40005
5606000556360005566600055696000556c6000556ec00055754000557b0
000557c00005583e0005591c0005595a0005597e000559be000559ee0005
5a2e00055a6000055a9400055ac600055afa00055b2000055bb000055c52
00055d2a00055d5a00055d8a00055dbe00055df200055e2200055e560005
5e8600055eb600055ee800055f1c00055f9000056012000560ce000560fc
0005612a0005615e00056192000561c2000561f00005621e000562520005
6282000562b2000562e4000563180005634c000563e000056476000564aa
000564ec000565120005655400056584000565c6000565f6000566280005
665800056680000566a6000566dc0005672a0005694800056b5800056d52
00056f7400057294000572ba0005761e0005783c00057a0e00057cd80005
7e5200058068000580a2000580da00058126000581700005828a0005833e
00058526000587460005890c000589ee00058b8200058c9400058dca0005
8f3200058f7800058fbe000590060005904a000590b0000590e20005913a
000591940005921400059290000592c2000592f200059322000593520005
9398000593d20005943a0005947e000594d600059554000595d200059618
0005965a000596d0000597280005977a000597ac000597dc000597ec0005
97fc0005991000059aca00059c7a00059de200059ea400059f8c0005a0d6
0005a2420005a2520005a3320005a4080005a5d40005a74e0005a91c0005
aab00005aac00005ab640005ac3e0005acfc0005ae4c0005afce0005b096
0005b12a0005b1c20005b2c60005b4200005b5660005b64a0005b7900005
b8a60005ba120005bbea0005bcca0005be800005bf160005bfea0005c0e2
0005c1b20005c2740005c35c0005c4800005c4900005c6880005c7940005
c8a60005ca7e0005cc0e0005cdf00005cf200005d0740005d1a80005d2fc
0005d4fa0005d5ea0005d6de0005d8d40005d9ce0005dbf80005dda60005
df5a0005e0c60005e1f40005e33a0005e50a0005e6040005e7b20005e958
0005ea7c0005ebac0005ebbc0005eda20005eea00005f0120005f0de0005
f1a40005f3060005f44e0005f6280005f7320005f8c80005fb260005fcb4
0005fdac0005fe560005fef60005ff960006011e000602160006037a0006
04c20006069e000607b40006088a00060a4400060b1200060c4e00060dac
00060f0c00060fe20006111800061288000613a400061568000616300006
1846000619c600061b1e00061cb800061d5000061e3000061eae00061f7c
00062056000620e2000621b8000621f60006221600062236000622560006
228c000622b2000622f60006230600062316000623260006233600062346
0006235600062366000623760006238600062396000623a6000623a60006
24780006262a000627fa00062a0400062b8200062d4a00062f5000063104
000631140006327600063404000636360006371a000638340006386e0006
3926000639e600063a7e00063ace00063c2600063cf600063dfe00063f02
0006402200064176000641dc0006421e0006425c000642fa000643600006
45040006471e000648e600064bf000064e3c00065032000651c6000652f6
0006550800065682000657e2000659c800065bbe00065cf400065fde0006
610800066214000663b600066572000667620006692000066b0400066ca2
00066f1c000671000006720c00067456000675e8000677d6000679320006
7b2000067c6600067dd800067ffa0006810a0006828a0006840a00068596
000686e000068866000689f600068b5600068ca600068dbc00068ee60006
90aa000691d000069300000693c8000694e40006965000069798000698ba
000699ba00069ac600069c6600069dc200069e9200069f600006a0820006
a1900006a24a0006a33a0006a4240006a6940006a8c40006aa9a0006ac18
0006ae020006aefa0006b0c20006b2880006b35c0006b4f00006b6b00006
b8860006b9e00006bb5c0006bc980006bda40006bf200006c0ca0006c250
0006c3800006c4180006c4b00006c5ae0006c6000006c6ea0006c8180006
c8e00006c9ec0006cc140006ccdc0006cefc0006d0c40006d29e0006d446
0006d4e40006d52e0006d5780006d5c20006d60c0006d6560006d6a00006
d6ea0006d7340006d77e0006d7c80006d8120006d85c0006d8a40006d8ec
0006d9340006d97c0006d9c40006da0c0006da540006da9c0006dae40006
db2c0006db740006dbbc0006dc360006dcac0006dd300006ddb80006de30
0006dea40006df260006dfac0006e0b60006e24e0006e44a0006e45a0006
e67e0006e8240006e96e0006eaa40006ebca0006ed100006eea40006f008
0006f1d60006f34e0006f3f20006f4300006f46e0006f47e0006f5ec0006
f7540006f91a0006face0006fcca0006fed20006fee20006fff20007010a
0007021a0007025c000702a0000702e20007032600070398000704040007
0496000704de000705560007080c00070948000709ec00070b5000070c70
00070dee00070f56000710d200071258000713dc0007159a000717100007
18d200071a8c00071b3600071c3000071d4600071e6800071f1c0007204c
0007209a0007214600072196000721c60007220a0007224c0007227c0007
2400000725d4000727680007282c000728c20007295000072a2400072ac2
00072b5a00072c3a00072ca400072d7c00072e6200072ed600072ee60007
2ef600072f0600072f16000730880007309a000731e6000732ee0007348c
00073646000736bc0007370000073764000737cc0007381c0007386c0007
38da0007394a000739ba00073a2c00073ab000073ba000073c9c00073d6a
00073e5e00073fcc0007407c000741980007432e000743a20007458c0007
475200074762000747720007478200074792000747a2000747b2000747c2
000747d2000747e2000747f20007480200074abe00074e08000751620007
53940007572600075852000759d000075b2000075c5e00075dae00075eea
0007607200076208000762d0000763b20007658600076670000768460007
69b600076acc00076bf000076dba00076f36000770f4000771c400077330
00077440000775d2000777b800077914000779f400077c0800077de40007
7f4e000781100007827600078414000785bc000785ea0007861a00078648
00078678000786aa000786d0000786f60007872400078754000787840007
87b8000787e6000788140007884200078874000788a4000788d400078904
000789340007896400078998000789c8000789f800078a2800078a5c0007
8a8c00078aba00078aea00078b1000078b4000078b7000078ba000078bd0
00078c0000078c1000078c4000078c7000078ca000078cc600078cf60007
8d2400078d5400078d8400078daa00078dda00078e0a0007900a00079038
0007906600079094000790ba000790e8000791000007912e000791540007
9182000791a8000791ce000791f4000792240007924a0007927a0007940e
0007943e0007946e000794a2000794d2000794f800079528000795560007
9584000795a8000795d6000795fa00079620000796460007967600079798
000797c8000797f8000798280007985c0007989000079a5c00079a8c0007
9abc00079aec00079b2000079b5000079b8400079bb200079be200079c12
00079c4200079c7a00079caa00079cda00079cea00079cfa00079dd40007
9e5800079e6800079e7800079e880007a0340007a0440007a0540007a14c
0007a15c0007a16c0007a2b40007a2c40007a3cc0007a3dc0007a4c80007
a4d80007a4e80007a6a40007a6b40007a8c40007aa760007aaa60007aad6
0007ab060007ab340007ab640007ab940007abc40007abf60007ac2a0007
ac5e0007adc40007adf40007af5a0007af6a0007af7a0007afac0007afbc
0007b19c0007b3a80007b5320007b5620007b5900007b7260007b7360007
b8640007b8740007b8840007b9d80007b9e80007bd0c0007be320007bfd0
0007bffe0007c20e0007c3820007c3920007c3a20007c3b20007c3c20007
c3d20007c3e20007c3f20007c57e0007c71a0007c72a0007c89c0007ca3e
0007cbfa0007cdda0007cefa0007d0ca0007d1e20007d3280007d55c0007
d7060007d7c80007d8d80007d9900007da5e0007db6e0007dc1c0007dcf2
0007ddf00007de620007df8c0007e0a00007e0b20007e0c40007e0d60007
e0e80007e0fa0007e10c0007e11e0007e1300007e1420007e1540007e376
0007e5660007e5960007e5c60007e5f60007e6260007e65a0007e6a20007
e8f40007ea400007ebc40007eda60007efc20007eff20007f0220007f052
0007f0860007f2780007f4700007f7020007f8840007f8b40007f8e40007
f9140007f9480007fb6a0007fe640008002400080286000805180008076a
0008079a0008094800080978000809a8000809d800080a0800080a3c0008
0c8200080cb200080e96000810c8000813680008159e000815ce0008173c
000819380008196800081998000819c8000819fc00081b8c00081dc80008
1fe40008215800082188000821bc0008236a0008239a000826e600082716
000827460008276c0008279c000827cc000827fc0008282c0008285c0008
288c000828bc000828ec000829140008294400082974000829a400082bee
00082c1e00082c4e00082f5a00082f8a00082fba00082fea000830100008
30400008307000083096000830c6000830ec000831120008313800083168
0008318e000831be000831ee0008321e0008325200083282000832a80008
32d800083308000833380008335e00083384000833aa000833d000083586
000835b6000835e600083616000836460008367a000836ae000838ee0008
391e0008394e0008397e000839b2000839e200083a1200083a4200083a72
00083a9800083c6600083f1600083ffc000840ac00084184000842780008
438a000844b6000846bc000848280008496a00084c6000084ec6000850c0
000852f800085558000857640008595e00085ba400085d6a00085f6a0008
610c0008639600086548000866ae0008684a000869c600086b6000086d0e
00086e8800086e9800087002000871d20008734000087506000876700008
7802000879aa00087ad800087bfe00087d5600087ea600087fdc00088102
000881da000882be000884a80008857e000885a200088776000888c00008
89bc00088aaa00088ba400088c9800088d7000088e4200088f2200089044
0008912800089226000892c0000893e6000894d0000895ca000896600008
9790000898600008993600089a0e00089b3400089c2200089d1200089ddc
00089ede00089fb80008a0a80008a1a20008a26c0008a3640008a4760008
a5380008a6600008a7120008a8140008a9360008a9c60008aac40008ab16
0008ab780008aba80008ac280008ac540008acca0008ad060008ae460008
af3c0008b0240008b1180008b1fa0008b2bc0008b3600008b4600008b5b0
0008b6680008b77a0008b7f40008b9580008ba300008bb000008bbe40008
bd080008bdda0008beea0008c0380008c0ea0008c2100008c2a60008c394
0008c42c0008c5640008c63e0008c70a0008c7f20008c8f00008ca3a0008
cb4e0008cc3a0008cc9a0008ce320008cf560008cfe00008d1160008d1c8
0008d1d80008d23a0008d4b40008d7360008d8600008dac40008dce40008
df320008e1440008e3e40008e3f40008e40c0008e4240008e43c0008e454
0008e4640008e47e0008e566000100000bf900f2003c0097000600020010
002f0056000004ed02580004000200>
<0000005303ea0000000300000000021a00000000000300000001001e021a
0000000300000002000c0238000000030000000300560244000000030000
0004002c025600000003000000050018029a0000000300000006003002b2
0000000300000007007602e200000003000000080030000e000000030000
000900860358000000030000000d0d2603de0001000000000000010d1104
0001000000000001000f1211000100000000000200061220000100000000
0003002b122600010000000000040016122f0001000000000005000c1251
00010000000000060018125d0001000000000007003b1275000100000000
00080018110b0001000000000009004312b0000100000000000d069312f3
0003000104030002000e19860003000104030004002e1994000300010405
0002000e19c20003000104050004002e19d00003000104060002000c19fe
0003000104060004002c1a0a0003000104070002000c1a36000300010407
0004002c1a420003000104080002000c1a6e0003000104080004002c1a7a
0003000104090000021e1aa60003000104090001001e021a000300010409
0002000c02380003000104090003005602440003000104090004002c0256
00030001040900050018029a0003000104090006003002b2000300010409
0007007602e200030001040900080030000e000300010409000900860358
000300010409000d0d2603de00030001040a0002000e1cc400030001040a
0004002e1cd200030001040b000200141d0000030001040b000400341d14
00030001040c000200101d4800030001040c000400301d5800030001040e
000200081d8800030001040e000400281d900003000104100002000e1db8
0003000104100004002e1dc60003000104130002000e1df4000300010413
0004002e1e020003000104140002000c1a360003000104140004002c1a42
0003000104150002000e1e300003000104150004002e1e3e000300010416
0002000e1e6c0003000104160004002e1e7a0003000104190002000c1ea8
0003000104190004002c1eb400030001041b0002000e1ee000030001041b
0004002e1eee00030001041d0002000c1a3600030001041d0004002c1a42
00030001041f0002000c1f1c00030001041f0004002c1f28000300010424
0002000e1f540003000104240004002e1f6200030001042a0002000e1f90
00030001042a0004002e1f9e00030001042d0002000c1fcc00030001042d
0004002c1fd800030001080a0002000e1cc400030001080a0004002e1cd2
0003000108160002000e1e6c0003000108160004002e1e7a000300010c0a
0002000e1cc4000300010c0a0004002e1cd2000300010c0c000200101d48
000300010c0c000400301d5800a900200032003000310034002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0020
000d000d0048006500620072006500770020004f00700065006e00540079
007000650020004c00610079006f007500740020006c006f006700690063
00200063006f0070007900720069006700680074002000a9002000320030
003000330020002600200032003000300037002c002000520061006c0070
0068002000480061006e0063006f0063006b002000260020004a006f0068
006e00200048007500640073006f006e002e002000540068006900730020
006c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020006900730020006f00700065006e00200073006f00750072
0063006500200073006f00660074007700610072006500200075006e0064
0065007200200074006800650020004d004900540020004c006900630065
006e00730065003b002000730065006500200065006d0062006500640064
006500640020006c006900630065006e0073006500200064006500730063
00720069007000740069006f006e00200066006f00720020006400650074
00610069006c0073002e00540069006d006500730020004e006500770020
0052006f006d0061006e004900740061006c00690063004d006f006e006f
0074007900700065003a00540069006d006500730020004e006500770020
0052006f006d0061006e0020004900740061006c0069006300200028004d
006900630072006f0073006f00660074002900560065007200730069006f
006e00200036002e0038003700540069006d00650073004e006500770052
006f006d0061006e00500053002d004900740061006c00690063004d0054
00540069006d006500730020004e0065007700200052006f006d0061006e
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e004d
006f006e006f007400790070006500200054007900700065002000440072
006100770069006e00670020004f006600660069006300650020002d0020
005300740061006e006c006500790020004d006f007200690073006f006e
002c00200056006900630074006f00720020004c0061007200640065006e
0074002000310039003300320059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
00680065002000450055004c004100200066006f00720020007400680065
002000700072006f006400750063007400200069006e0020007700680069
006300680020007400680069007300200066006f006e0074002000690073
00200069006e0063006c007500640065006400200074006f002000640069
00730070006c0061007900200061006e00640020007000720069006e0074
00200063006f006e00740065006e0074002e002000200059006f00750020
006d006100790020006f006e006c0079002000280069002900200065006d
0062006500640020007400680069007300200066006f006e007400200069
006e00200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
0065006d00620065006400640069006e0067002000720065007300740072
0069006300740069006f006e007300200069006e0063006c007500640065
006400200069006e0020007400680069007300200066006f006e0074003b
00200061006e006400200028006900690029002000740065006d0070006f
0072006100720069006c007900200064006f0077006e006c006f00610064
0020007400680069007300200066006f006e007400200074006f00200061
0020007000720069006e0074006500720020006f00720020006f00740068
006500720020006f00750074007000750074002000640065007600690063
006500200074006f002000680065006c00700020007000720069006e0074
00200063006f006e00740065006e0074002e000d000a000d000a00540068
006500200066006f006c006c006f00770069006e00670020006c00690063
0065006e00730065002c0020006200610073006500640020006f006e0020
0074006800650020004d004900540020006c006900630065006e00730065
002000280068007400740070003a002f002f0065006e002e00770069006b
006900700065006400690061002e006f00720067002f00770069006b0069
002f004d00490054005f004c006900630065006e007300650029002c0020
006100700070006c00690065007300200074006f00200074006800650020
004f00700065006e00540079007000650020004c00610079006f00750074
0020006c006f00670069006300200066006f00720020004200690062006c
006900630061006c00200048006500620072006500770020201c004c0061
0079006f007500740020004c006f006700690063201d0020006100730020
006a006f0069006e0074006c007900200064006500760065006c006f0070
00650064002000620079002000520061006c00700068002000480061006e
0063006f0063006b00200061006e00640020004a006f0068006e00200048
007500640073006f006e002e0020000d000a000d000a005000650072006d
0069007300730069006f006e002000690073002000680065007200650062
00790020006700720061006e007400650064002c00200066007200650065
0020006f00660020006300680061007200670065002c00200074006f0020
0061006e007900200070006500720073006f006e0020006f006200740061
0069006e0069006e00670020006100200063006f007000790020006f0066
00200074006800650020004f00700065006e00540079007000650020004c
00610079006f007500740020006c006f00670069006300200066006f0072
0020004200690062006c006900630061006c002000480065006200720065
007700200061006e00640020006100730073006f00630069006100740065
006400200064006f00630075006d0065006e0074006100740069006f006e
002000660069006c00650073002000280074006800650020201c004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
0077006100720065201d0029002c00200074006f0020006400650061006c
00200069006e00200074006800650020004c00610079006f007500740020
004c006f00670069006300200053006f0066007400770061007200650020
0077006900740068006f0075007400200072006500730074007200690063
00740069006f006e002c00200069006e0063006c007500640069006e0067
00200077006900740068006f007500740020006c0069006d006900740061
00740069006f006e00200074006800650020007200690067006800740073
00200074006f0020007500730065002c00200063006f00700079002c0020
006d006f0064006900660079002c0020006d0065007200670065002c0020
007000750062006c006900730068002c0020006400690073007400720069
0062007500740065002c0020007300750062006c006900630065006e0073
0065002c00200061006e0064002f006f0072002000730065006c006c0020
0063006f00700069006500730020006f006600200074006800650020004c
00610079006f007500740020004c006f00670069006300200053006f0066
00740077006100720065002c00200061006e006400200074006f00200070
00650072006d0069007400200070006500720073006f006e007300200074
006f002000770068006f006d00200074006800650020004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
007200650020006900730020006600750072006e00690073006800650064
00200074006f00200064006f00200073006f002c0020007300750062006a
00650063007400200074006f002000740068006500200066006f006c006c
006f00770069006e006700200063006f006e0064006900740069006f006e
0073003a000d000a000d000a005400680065002000610062006f00760065
00200063006f00700079007200690067006800740020006e006f00740069
0063006500200061006e0064002000740068006900730020007000650072
006d0069007300730069006f006e0020006e006f00740069006300650020
007300680061006c006c00200062006500200069006e0063006c00750064
0065006400200069006e00200061006c006c00200063006f007000690065
00730020006f00720020007300750062007300740061006e007400690061
006c00200070006f007200740069006f006e00730020006f006600200074
006800650020004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065002e000d000a000d000a0054
0048004500200053004f0046005400570041005200450020004900530020
00500052004f005600490044004500440020002700410053002000490053
0027002c00200057004900540048004f0055005400200057004100520052
0041004e005400590020004f004600200041004e00590020004b0049004e
0044002c002000450058005000520045005300530020004f005200200049
004d0050004c004900450044002c00200049004e0043004c005500440049
004e004700200042005500540020004e004f00540020004c0049004d0049
00540045004400200054004f002000540048004500200057004100520052
0041004e00540049004500530020004f00460020004d0045005200430048
0041004e0054004100420049004c004900540059002c0020004600490054
004e00450053005300200046004f00520020004100200050004100520054
004900430055004c0041005200200050005500520050004f005300450020
0041004e00440020004e004f004e0049004e004600520049004e00470045
004d0045004e0054002e00200049004e0020004e004f0020004500560045
004e00540020005300480041004c004c0020005400480045002000410055
00540048004f005200530020004f005200200043004f0050005900520049
00470048005400200048004f004c00440045005200530020004200450020
004c004900410042004c004500200046004f005200200041004e00590020
0043004c00410049004d002c002000440041004d00410047004500530020
004f00520020004f00540048004500520020004c0049004100420049004c
004900540059002c0020005700480045005400480045005200200049004e
00200041004e00200041004300540049004f004e0020004f004600200043
004f004e00540052004100430054002c00200054004f005200540020004f
00520020004f00540048004500520057004900530045002c002000410052
004900530049004e0047002000460052004f004d002c0020004f00550054
0020004f00460020004f005200200049004e00200043004f004e004e0045
004300540049004f004e0020005700490054004800200054004800450020
0053004f0046005400570041005200450020004f00520020005400480045
00200055005300450020004f00520020004f005400480045005200200044
00450041004c0049004e0047005300200049004e00200054004800450020
0053004f004600540057004100520045002ea9203230313420546865204d
6f6e6f7479706520436f72706f726174696f6e2e20416c6c205269676874
732052657365727665642e200d0d486562726577204f70656e5479706520
4c61796f7574206c6f67696320636f7079726967687420a9203230303320
2620323030372c2052616c70682048616e636f636b2026204a6f686e2048
7564736f6e2e2054686973206c61796f7574206c6f67696320666f722042
69626c6963616c20486562726577206973206f70656e20736f7572636520
736f66747761726520756e64657220746865204d4954204c6963656e7365
3b2073656520656d626564646564206c6963656e73652064657363726970
74696f6e20666f722064657461696c732e54696d6573204e657720526f6d
616e4974616c69634d6f6e6f747970653a54696d6573204e657720526f6d
616e204974616c696320284d6963726f736f66742956657273696f6e2036
2e383754696d65734e6577526f6d616e50532d4974616c69634d5454696d
6573204e657720526f6d616e20697320612074726164656d61726b206f66
20546865204d6f6e6f7479706520436f72706f726174696f6e2e4d6f6e6f
7479706520547970652044726177696e67204f6666696365202d20537461
6e6c6579204d6f7269736f6e2c20566963746f72204c617264656e742031
393332596f75206d617920757365207468697320666f6e74206173207065
726d6974746564206279207468652045554c4120666f7220746865207072
6f6475637420696e207768696368207468697320666f6e7420697320696e
636c7564656420746f20646973706c617920616e64207072696e7420636f
6e74656e742e2020596f75206d6179206f6e6c792028692920656d626564
207468697320666f6e7420696e20636f6e74656e74206173207065726d69
747465642062792074686520656d62656464696e67207265737472696374
696f6e7320696e636c7564656420696e207468697320666f6e743b20616e
6420286969292074656d706f726172696c7920646f776e6c6f6164207468
697320666f6e7420746f2061207072696e746572206f72206f7468657220
6f75747075742064657669636520746f2068656c70207072696e7420636f
6e74656e742e0d0a0d0a54686520666f6c6c6f77696e67206c6963656e73
652c206261736564206f6e20746865204d4954206c6963656e7365202868
7474703a2f2f656e2e77696b6970656469612e6f72672f77696b692f4d49
545f4c6963656e7365292c206170706c69657320746f20746865204f7065
6e54797065204c61796f7574206c6f67696320666f72204269626c696361
6c2048656272657720d24c61796f7574204c6f676963d3206173206a6f69
6e746c7920646576656c6f7065642062792052616c70682048616e636f63
6b20616e64204a6f686e20487564736f6e2e200d0a0d0a5065726d697373
696f6e20697320686572656279206772616e7465642c2066726565206f66
206368617267652c20746f20616e7920706572736f6e206f627461696e69
6e67206120636f7079206f6620746865204f70656e54797065204c61796f
7574206c6f67696320666f72204269626c6963616c204865627265772061
6e64206173736f63696174656420646f63756d656e746174696f6e206669
6c6573202874686520d24c61796f7574204c6f67696320536f6674776172
65d3292c20746f206465616c20696e20746865204c61796f7574204c6f67
696320536f66747761726520776974686f7574207265737472696374696f
6e2c20696e636c7564696e6720776974686f7574206c696d69746174696f
6e207468652072696768747320746f207573652c20636f70792c206d6f64
6966792c206d657267652c207075626c6973682c20646973747269627574
652c207375626c6963656e73652c20616e642f6f722073656c6c20636f70
696573206f6620746865204c61796f7574204c6f67696320536f66747761
72652c20616e6420746f207065726d697420706572736f6e7320746f2077
686f6d20746865204c61796f7574204c6f67696320536f66747761726520
6973206675726e697368656420746f20646f20736f2c207375626a656374
20746f2074686520666f6c6c6f77696e6720636f6e646974696f6e733a0d
0a0d0a5468652061626f766520636f70797269676874206e6f7469636520
616e642074686973207065726d697373696f6e206e6f7469636520736861
6c6c20626520696e636c7564656420696e20616c6c20636f70696573206f
72207375627374616e7469616c20706f7274696f6e73206f662074686520
4c61796f7574204c6f67696320536f6674776172652e0d0a0d0a54484520
534f4654574152452049532050524f564944454420274153204953272c20
574954484f55542057415252414e5459204f4620414e59204b494e442c20
45585052455353204f5220494d504c4945442c20494e434c5544494e4720
425554204e4f54204c494d4954454420544f205448452057415252414e54
494553204f46204d45524348414e544142494c4954592c204649544e4553
5320464f52204120504152544943554c415220505552504f534520414e44
204e4f4e494e4652494e47454d454e542e20494e204e4f204556454e5420
5348414c4c2054484520415554484f5253204f5220434f50595249474854
20484f4c44455253204245204c4941424c4520464f5220414e5920434c41
494d2c2044414d41474553204f52204f54484552204c494142494c495459
2c205748455448455220494e20414e20414354494f4e204f4620434f4e54
524143542c20544f5254204f52204f54484552574953452c204152495349
4e472046524f4d2c204f5554204f46204f5220494e20434f4e4e45435449
4f4e20574954482054484520534f465457415245204f5220544845205553
45204f52204f54484552204445414c494e475320494e2054484520534f46
54574152452e006300750072007300690076006100540069006d00650073
0020004e0065007700200052006f006d0061006e00200063007500720073
006900760061006b00750072007a00ed0076006100540069006d00650073
0020004e0065007700200052006f006d0061006e0020006b00750072007a
00ed00760061006b0075007200730069007600540069006d006500730020
004e0065007700200052006f006d0061006e0020006b0075007200730069
0076004b0075007200730069007600540069006d006500730020004e0065
007700200052006f006d0061006e0020004b0075007200730069007603a0
03bb03ac03b303b903b100540069006d006500730020004e006500770020
0052006f006d0061006e002003a003bb03ac03b303b903b100a900200032
00300031003400200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e0020000d000a000d000a00480065006200720065
00770020004f00700065006e00540079007000650020004c00610079006f
007500740020006c006f00670069006300200063006f0070007900720069
006700680074002000a90020003200300030003300200026002000320030
00300037002c002000520061006c00700068002000480061006e0063006f
0063006b002000260020004a006f0068006e00200048007500640073006f
006e002e002000540068006900730020006c00610079006f007500740020
006c006f00670069006300200066006f00720020004200690062006c0069
00630061006c00200048006500620072006500770020006900730020006f
00700065006e00200073006f007500720063006500200073006f00660074
007700610072006500200075006e00640065007200200074006800650020
004d004900540020004c006900630065006e00730065003b002000730065
006500200065006d0062006500640064006500640020006c006900630065
006e007300650020006400650073006300720069007000740069006f006e
00200066006f0072002000640065007400610069006c0073002e00430075
0072007300690076006100540069006d006500730020004e006500770020
0052006f006d0061006e00200043007500720073006900760061004b0075
0072007300690076006f00690074007500540069006d006500730020004e
0065007700200052006f006d0061006e0020004b00750072007300690076
006f006900740075004900740061006c006900710075006500540069006d
006500730020004e0065007700200052006f006d0061006e002000490074
0061006c006900710075006500440151006c007400540069006d00650073
0020004e0065007700200052006f006d0061006e002000440151006c0074
0043006f0072007300690076006f00540069006d006500730020004e0065
007700200052006f006d0061006e00200043006f0072007300690076006f
004300750072007300690065006600540069006d006500730020004e0065
007700200052006f006d0061006e00200043007500720073006900650066
006b00750072007300790077006100540069006d006500730020004e0065
007700200052006f006d0061006e0020006b007500720073007900770061
0049007400e1006c00690063006f00540069006d006500730020004e0065
007700200052006f006d0061006e00200049007400e1006c00690063006f
041a0443044004410438043200540069006d006500730020004e00650077
00200052006f006d0061006e0020041a04430440044104380432004b0075
0072007a00ed0076006100540069006d006500730020004e006500770020
0052006f006d0061006e0020004b00750072007a00ed0076006101300074
0061006c0069006b00540069006d006500730020004e0065007700200052
006f006d0061006e0020013000740061006c0069006b0050006f01610065
0076006e006f00540069006d006500730020004e0065007700200052006f
006d0061006e00200050006f016100650076006e006f006e006700680069
00ea006e006700540069006d006500730020004e0065007700200052006f
006d0061006e0020006e00670068006900ea006e006700450074007a0061
006e006100540069006d006500730020004e0065007700200052006f006d
0061006e002000450074007a0061006e00610000410c005403cd02b0001d
001f03cd03cd03cc03cb003c001f03cbb3061d1f00410c03bc003003bc00
4003bc00a003bc00b003bc0005ffc003bbb345453240b803bbb32b2e3240
b803bbb2282932b9ffc003bbb31a263280411303bb009f03bb00af03bb00
cf03bb0004000003bb001f03bb000203bb02af0027001fffc003b9b2161b
32b9ffc003b8b2424232b9ffc003b8b2363832b9ffc003b8b32a2d32df41
0a03b800ef03b8000203b803b90028001fffc003b9b3282e32f0410f03b9
0001000003b7000103b700030800001f03be03bf002b001fffc003bfb224
2a32b903b60381b23a1f0f411703b3001003b2002003b2005003b2007003
b200e003b2000600cf03b300df03b300ef03b300ff03b30004001203a8b2
e2891fbe039f016b019a001f039800930801400c1f7f047f05027f027f03
025fbb02b00001ffc00117b2196632b8ffc0b3651a6632b9ff800173b219
6632bd038401170800001fffc002afb2313340b802afb22e3340b802afb3
28293240b802afb326273240b802afb321253240b802afb31c203240b802
afb2233340b802afb21933a0bc02af00b002af00e002afb5034003212932
b8fff2b33a263d32bc038203820382003a0800b51f40255c331eb80381b2
5c6432b8ffeeb3252e3314b80381b32b2e3269be03810001008a03810001
000e0381b32b2f3210b80381b3515b320cb80381b34e513222b80381b347
4d320eb80381b246330ab80381400926473212254358320cb80381b23233
10b80381b22a3312b80381b3373d3212bb0381003d0033fff44015253d33
1825355b32102526343206252a330c252e33b8fffe4024252d330c3a2f33
329925aa25ba25c92504052536330c25323832193a293a383a03182517b8
0381b42825382504bc0381038103810025080040101f0f1f2b2e32691f78
1f020b1f303332b8fff1b31f263d32bc038003800380001f080040151f37
5f07af07025f06af060222ac2b2e3209ac2f33b8ffdc400aac1f22322223
2b52320eb8037fb229330eb8037fb2223314b8037fb21e2032b8ffe7b71e
2b33321e2b2f32b9ffc0037fb64c4f3232262c33410affee037f00390033
fff8037f002b0033ffea037fb23a3320b8037fb33f46321eb8037fb32f3a
3212b8037fb22e331eb8037fb32a2d320eb8037fb2263304b8037fb3494a
3404b8037fb2463304b8037fb2213318b8037f400c1d3322263032322226
333832b8fff8400a262b2f3209261b21328abe037f0001037f037f037f00
260800402e1f371f062f063f06039f02af02bf02cf02049f03af03bf03cf
03046f037f038f03031f032f033f034f035f03050f413a02ed0001005f02
ed009f02ed00df02ed0003002f02ed003f02ed006f02ed000300af02af00
01004f02af009f02af0002002f02af003f02af0002003f02b00001000f02
b0001f02b00002004f02af005f02af0002002f02af003f02af0002007003
b2000103b203b202ed02ed02b002b002af02af401a370100300140010201
0100090102000800171700000012110840410b027b02230034000d013d00
34000d01370034000d011b401a340d8f340d84340d68340d59340d54340d
48340d2c340d28340d411002350020000d021b0020000d01fc0020000d01
c30020000d01500020000d012c401a200df0200dbe200d94200d79200d6a
200d61200d5f200d44200d410d013e0138000d003d0138000d0030013800
0d001d0138000d01fdb40f4d0f0009bf01fd004d000d03b1037f0015001f
0215b226341fb80214b2263f1fb80208b21ebb1f41190206001e0801001f
0205001f02ab001f0204001f02ab001f0203001f0401001f02010031019a
001f01fb00230156001f01aeb2262a1fb801adb2262a1fb801abb226341f
411501a8002602ab001f01a5001e0125001f01a400ab02ab001f01a20031
02ab001f01a1003102ab001f019db2236c1fb8019cb2236c1f4109019b00
230401001f019a0033019a001f0176b2262e1fb8016cb231721f4111016b
0023019a001f016800240401001f014500260801001f013f00230401001f
0123b21e9e1fbc0121001e0201001f0100b426791ffd1fb80125b21ffa33
b80801b21ff924b802abb21fe826b80101b21fe51fb8019ab21fe431b801
01400b1fe331e41fe231891fd226b80201b61fd026cd1fcd25b80401b21f
b731b8019ab21fae26b80801b21fac1eb80401400b1f9e315e1f97269e1f
9333b80801b21f8a24b8019ab21f831fb802ab40131f82236c1f7523e41f
7026cd1f6423721f5e25b80401b21f5d23b802abb21f55e6b80401b21f53
24b80201b21f4f33b802abb21f4e26b8040140131f4731671f4626ab1f43
31cd1f3e235e1f3a1fb80401b61f3924e41f3723b80801b21f2e23b80401
b21f2a1eb80125400b1f2923ab1f2731ab1f5537bc01c60007018a000701
2b402e077f077107690766074b074007380736072d072207210714081208
10080e080c080a080808060804080208000814b8ffe0402b000001001406
100000010006040000010004100000010010020000010002000000010000
02010802004a00b013034b024b5342b0372b4bb807ff52b0382b4bb00950
5b58b101018e59014bb0c063004b6220b0f65323b8010a515ab005234201
b0124b004b544218b0382bb00288b801005458b801ffb101018e851bb012
4358b900010140858d1bb900010159858d59590016763f183f123e113946
443e113946443e113946443e113946443e11394660443e11394660442b2b
2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b
5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b9027d027b4544b9
027c027b45445958b90146027d455258b9027d01464459594bb04753205c
58b9001e027c4544b90026027c45445958b9017f001e455258b9001e017f
4459594bb05e53205c58b9001f027d4544b90025027d45445958b901a800
1f455258b9001f01a84459594bb8010153205c58b1ab1f4544b11f1f4544
5958b9047000ab455258b900ab04704459594bb8012553205c58b1e61f45
44b11f1f45445958b9051000e6455258b900e605104459594bb01753205c
58b124244544b1312445445958b12224455258b124224459594bb0515320
5c58b124244544b1232445445958b17d24455258b1247d4459594bb06e53
205c58b124244544b1332445445958b1aa24455258b124aa4459592b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b45695342014b5058b108004259435c58b1
080042591610703eb0124358b911b53d801bba011c03d9000b2b59b00a23
42b00b2342003f3f182b103c012f5d060cb0062342b0072342b0124358b9
3b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d
411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba
01a80400000b2b59b0102342b0112342002b4bb02e5358b8016b45b02a60
b8016b234459001845694445694418456944456944737373737375757573
737475757575752b4bb026534bb03d515a58b1262645b0196044592b4518
6944742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
004bb02a534bb03f515a58b1070745b04060445973732b2b451869442b2b
752b2b4518694475752b2b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
74752b2b2b2b2b451869442b002b732b2b2b2b2b2b2b2b2b012b2b2b0073
73732b2b2b01435c58b8ffdeb31e1c3318b8037fb52b3318262b33b9fff0
0381b112332b2b2b2b590173742b2b2b002b73752b2b732b2b2b2b2b7375
2b2b2b2b73002b2b4569442b2b0000>
[15881 15801 15881 16357 16281 15405 16017 16333 16245 16357 16089 15833 15353
16137 16289 16117 15813 15469 14373 16057 16361 16065 16373 16325 15709 16089
16349 15329 15277 14621 16009 15293 16021 15413 15321 16377 12031 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 13482 82 <0002003cffe803b30389000d001900ad404108020903060a03a413ae18a0
1bb212b216be18065b18591985138c1895139d18a5120736133a19471349
19570856125413070a0c0c11240b070305051724040b14b8038140120780
4b5334078043358f079f070207191a0eb8038140270040170e3f00404b53
34004043350040323500401e350000200030004000a0000500c31b2bc318
2b4e10f65d2b2b2b2b2b4de94e10f45d2b2b4de9003fed3c103c3fed3c10
3c3130015d5d5d005d011402042322263534122433321607342623220215
141633321203b39ffee48689ada9011b8484aba65b4893f760498df70250
96fedaacaf8b930128acae465d63fe5bd05f6701a300>TimesNewRomanPS-ItalicMT AddT42Char 
4 1472 91 <0001ffb8ffe8038003890046010840630d40120b3f0700072a003d013e14
001601240023014a1b56018919a301a919aa2aa83daf3f10484010351017
63217321c919cb210509230c2a52230304191a1a022a2a2b3e403e3c4028
2122021a1a1f2840142828403e2a1904041135428a46c60011b80395401f
153a0a0a000735c639272e2e260b042a193e218a9f22cf220222c90d02e4
45ba014700400124b21a8228b8019f401d19e43e403b4b343e401d353e3e
47200d400d8f0daf0d040d1a48321947b80114b1de182b4e10e410e65d12
392f2b2b4dedf4edf4e6ed10f45ded11123939003f3c10fde43f3c10fde4
10f4ed11121739870e2e2b0e7d10c40110c90708103c083c870e10c4c431
30005d5d012b5d2b01161716173736363736333216151407062322272623
220706071316163332373637170607062322272603020706232227263534
363332171633323736363726272626232207350163311912295823642618
1d2b330f1c2415182f1018213e5652131a0d151c3727233f613726382115
429c5e3d392821182c2020241a0e0c132fa2193e05174a48171e03893434
2499843057100a2e21260e1909101c3495fea84f1f172e4a12764e2c3f27
0129fef14e321d1625212c20171026fc38f30e4136022400>TimesNewRomanPS-ItalicMT AddT42Char 
4 1946 92 <0001ff60fe460386038900380113405b9b310131183a3509191a1929193d
19a602b402ba1ab428b832c603c604ca19ca1a0d491b591b691b03043130
2f2f051d2b1e1a311a1104302f2e2d2b281c1b08213105060708090a0b0c
081704358a38c614000724c92b271e0f21b801c040373111400b12340f11
1f110211280c751740170e3f9017a0170250178017b01703201730174017
0317493a3849bf37013f374f375f370337b80323400d04e531401c113f31
401e123f31b8ffc040172529349031a031ef310350318031022031303140
310331b8021cb33932de182b10f65d5d5d2b2b2bedf65d5de410f45d5d5d
2bfde45d2b10e4003ffdec3f3cf4ed011112173911121739111239001239
111239870e7d10c404c43c3130015d5d2b01720116161713363736373637
3635342e0235343633321615140600070606232226353436333217161617
163332373637363703262623220727014b221a0d2c3c723751310b060e3b
2730242c3e6cfeccdb9792341f2f4126140d0813080507060f3749602e38
0e384215360903893a6594fe14489c4c83502010110b0e13332129324940
4fcbfe5cf8ab592f1f274009052f08050a224a623e027a9d44062500>TimesNewRomanPS-ItalicMT AddT42Char 
2 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>TimesNewRomanPS-ItalicMT AddT42Char 
TimesNewRomanPS-ItalicMT /CharStrings get begin
/o 82 def
/x 91 def
/y 92 def
end
TimesNewRomanPS-ItalicMT /Encoding get
dup 111 /o put
dup 120 /x put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/UKNMJA+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/UKNMJA+TimesNewRomanPS-ItalicMT*1 
[111{/.notdef}rp /o 8{/.notdef}rp /x /y 134{/.notdef}rp]
UKNMJA+TimesNewRomanPS-ItalicMT nf
UKNMJA+TimesNewRomanPS-ItalicMT*1 [12.0002 0 0 -12.0002 0 0 ]msf
432.46 143.656 mo
(x)sh
284.34 18.9256 mo
(y)sh
294.78 148.756 mo
(o)sh
/UKNMJA+TimesNewRomanPS-ItalicMT*1 uf
/UKNMJA+TimesNewRomanPS-ItalicMT uf
/TimesNewRomanPS-ItalicMT uf
.25 lw
[.25 .5 ] 0 dsh
357.85 50.5156 mo
360.3 58.6656 357.39 62.9056 351 66.2556 cv
350.96 65.9356 li
347.2 67.7056 342.23 69.0556 338.25 70.7556 cv
338.18 70.7656 li
335.2 72.0156 332.71 73.4656 330.75 75.2556 cv
330.77 75.6056 li
327.68 79.0356 325.98 84.2556 325.5 89.5056 cv
325.41 89.3656 li
325.11 92.0756 325.12 94.7556 325.5 97.7556 cv
325.3 97.7956 li
325.47 100.666 325.79 103.876 327 105.256 cv
326.88 105.606 li
327.65 106.826 328.8 107.316 330 108.256 cv
329.86 108.606 li
330.79 109.746 331.65 111.486 331.5 112.756 cv
331.62 112.736 li
331.57 114.436 329.84 115.196 329.25 116.506 cv
328.96 116.766 li
327.85 118.746 328.11 122.026 329.25 124.006 cv
329.26 124.216 li
330.77 127.076 333.79 128.106 337.5 128.506 cv
337.2 128.866 li
341.8 129.886 347.1 130.416 351 129.256 cv
351.37 128.896 li
354.33 127.846 356.8 125.806 359.25 124.006 cv
359.46 123.916 li
364.09 120.616 369.29 117.756 374.25 115.006 cv
373.95 114.806 li
379.79 111.126 384.79 107.316 390.75 103.006 cv
390.42 103.346 li
393.28 101.336 396.3 99.2956 399.75 97.7556 cv
400.04 97.6456 li
402.27 96.6656 404.76 95.8256 404.25 94.7556 cv
404.17 94.4556 li
403.66 93.2556 400.76 91.6356 399 91.0056 cv
398.81 91.1056 li
395.71 90.2556 395 92.1556 393 91.0056 cv
393.37 91.2656 li
392.27 90.6556 390.75 88.7556 390.75 87.2556 cv
390.56 87.2956 li
390.34 85.6756 391.77 84.6156 393 82.7556 cv
392.74 82.9956 li
394.2 80.5556 394.6 76.8556 394.5 73.0056 cv
394.58 73.3256 li
394.56 69.2756 393.97 65.4356 392.25 62.5056 cv
391.9 62.3756 li
390.32 60.0256 387.86 58.1256 387 55.0056 cv
387.03 55.2656 li
386.3 52.7456 386.85 49.4656 385.5 47.5056 cv
385.63 47.2656 li
384.22 44.7456 380.47 43.6456 378.75 41.5056 cv
378.55 41.2256 li
377.05 39.3456 376.66 36.6656 375 35.5056 cv
375.23 35.6456 li
374.01 34.7756 372.06 35.0956 370.5 34.7556 cv
370.77 34.8156 li
369.78 34.5956 369.18 34.0056 369 32.5056 cv
368.67 32.7956 li
367.4 29.7656 366.65 22.8156 364.5 19.7556 cv
364.31 19.6556 li
362.25 16.8856 358.97 17.0156 357 17.5056 cv
357.08 17.5656 li
355.61 17.9856 354.98 18.6556 355.5 21.2556 cv
355.25 21.3556 li
355.57 24.3956 357.03 30.0056 358.5 34.0056 cv
358.76 33.6456 li
359.89 36.0156 361.12 37.5456 361.5 38.5056 cv
361.2 38.4756 li
361.4 40.8656 353.91 39.2156 348 37.7556 cv
348.09 37.8856 li
343.69 36.8756 340.24 36.0556 337.5 36.2556 cv
337.29 35.9756 li
335.3 35.9256 333.53 36.2156 330.75 35.5056 cv
330.45 35.6656 li
329.12 35.4256 327.54 35.0356 326.25 35.5056 cv
326.62 35.1956 li
324.96 35.4756 325.42 37.5356 326.25 39.2556 cv
326.02 39.6156 li
326.89 42.6256 328.06 45.6856 330 47.5056 cv
329.94 47.5856 li
336.68 54.4356 352.57 46.3456 357.75 50.5056 cv
1 /0 /CSD get_res sepcs
.749 sep
@
325.5 130.006 mo
404.25 130.006 li
404.25 17.5056 li
325.5 17.5056 li
325.5 130.006 li
@
gsave
369.84 51.0756 mo
367.89 59.3456 363.25 61.5756 356.25 61.0056 cv
356.17 60.9756 li
352.03 60.6356 347.05 59.3156 342.75 58.7556 cv
342.68 58.7656 li
339.48 58.3656 336.6 58.3756 333.75 59.5056 cv
333.85 59.2656 li
329.45 60.6856 325.38 64.3556 322.5 68.5056 cv
322.32 68.4956 li
320.71 70.6856 319.38 73.0156 318 76.0056 cv
318.02 75.7356 li
316.73 78.3156 315.4 81.2456 315.75 83.5056 cv
315.48 83.2956 li
315.54 84.7356 316.28 85.7256 316.5 87.2556 cv
316.56 87.3856 li
316.79 88.8256 316.67 90.7756 315.75 91.7556 cv
316.02 91.8356 li
315.12 93.2856 313.24 93.0756 312 94.0056 cv
311.7 93.9956 li
309.74 95.1556 308.33 98.1256 308.25 100.756 cv
308.24 100.606 li
308.11 103.826 310.22 106.236 312.75 108.256 cv
312.78 108.596 li
316.26 111.786 320.58 114.886 324.75 115.756 cv
325.04 115.706 li
328.13 116.276 331.29 115.746 334.5 115.756 cv
334.54 115.436 li
340.2 114.896 346.13 115.016 351.75 115.006 cv
351.64 114.796 li
358.54 114.526 364.77 113.726 372 112.756 cv
371.64 113.116 li
375.12 112.796 378.75 112.536 382.5 112.756 cv
382.81 112.976 li
385.24 113.246 387.81 113.766 387.75 112.006 cv
387.99 112.286 li
388.15 110.986 386.45 108.136 384.75 106.756 cv
385.02 106.696 li
382.76 104.416 381.19 105.706 380.25 103.756 cv
380.24 104.116 li
379.59 103.036 379.22 100.636 379.5 99.2556 cv
379.78 99.2756 li
380.4 97.7656 382.17 97.5556 384 97.0056 cv
383.82 96.6356 li
386.3 95.2556 388.5 92.2556 390 89.5056 cv
390.25 89.1856 li
392.25 85.6656 393.66 82.0556 393.75 78.2556 cv
393.41 78.3656 li
393.21 75.5356 392.03 72.6556 393 70.0056 cv
392.74 69.7756 li
393.37 67.2256 395.48 64.6556 395.25 62.5056 cv
395.52 62.1456 li
395.57 59.2556 392.87 56.4256 392.25 53.5056 cv
392.41 53.3656 li
392.06 50.9956 393.06 48.4756 392.25 46.7556 cv
392.33 46.8756 li
391.71 45.5256 389.86 44.8156 389.25 43.7556 cv
388.89 43.9356 li
388.13 43.2456 387.91 42.4356 387.75 40.7556 cv
388.08 41.1256 li
388.49 37.8756 391.32 31.4856 390.75 27.2556 cv
390.86 27.5656 li
390.47 24.1456 387.56 22.6156 385.5 22.0056 cv
385.65 22.1456 li
384.17 21.7756 383.28 22.0456 382.5 24.2556 cv
382.18 24.5156 li
380.93 27.3056 379.39 32.8956 378.75 37.0056 cv
379.07 36.9156 li
378.86 39.5256 379.16 41.4756 378.75 42.2556 cv
378.77 42.3156 li
377.75 44.4856 372.09 39.3156 367.5 35.5056 cv
367.71 35.2556 li
364.4 32.1856 361.83 29.7356 359.25 28.0056 cv
359.31 28.1956 li
357.61 27.1556 355.93 26.5256 353.25 24.2556 cv
353.54 24.5056 li
352.5 23.6356 351.33 22.5056 350.25 22.0056 cv
350.46 22.1856 li
348.88 21.5956 348.25 23.6056 348 25.7556 cv
347.73 25.7156 li
346.98 28.7556 346.46 31.9856 347.25 34.7556 cv
347.14 34.5756 li
349.55 43.8756 367.36 44.8156 369.75 51.2556 cv
cp
eclp
303.95 109.026 mo
379.94 136.686 li
417.68 33.0056 li
341.68 5.34564 li
cp
level3{
gsave
[1 0 0 -1 0 525.256 ]ct
<<
/PatternType 2
/Shading
/1 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [341.94 402.4 379.68 506.08 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~$jd4?$jd4?$jd4?$OI+>$OI+>$O@"<$O@"<$4$n;$4$n;$4$n;$3pe9$3pe9#mU\8#mU\8#mU\8#mLS6
#R1J5#R1J5#R1J5#R1J5#R1J5#6b82#6b82#6b82#6b82"pG/1"pG/1"p>&/"p>&/"U"r."U"r."U"r.
"U"r."U"r."U"r."Tni,"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+"9JW)!s/N(!s/N(!s/N(!s/N(!WiE'
!W`<%!W`<%!W`<%!W`<%!<E3$!<E3$!<<*"!<<*"zzzzzzz!!!!!~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 0 525.256 ]ct
/1 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~$O[=M$O[=M$O[=M$OR4J$47+I$47+I$47+I$4."F#mgnE#mgnE#mgnE#mgnE#m^eB#RC\A#RC\A#RC\A
#RCY?#6tJ=#6tJ=#6tJ=#6tJ=#6tG;"pP89"pP89"pP89"pP57"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1
"9\i1"9\i1"9\i1"9\i1"9\i0!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE(
!<E3%!<E3%!<E3%!<E3%!<E3%zzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89"pG/6
"U,&5"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%zzzzzzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89"pG/6
"U,&5"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%zzzzzzzzzzzzzz!!!!!~>
0 ]
>>
341.94 402.4 379.68 506.08 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
[] 0 dsh
369.84 51.0756 mo
367.89 59.3456 363.25 61.5756 356.25 61.0056 cv
356.17 60.9756 li
352.03 60.6356 347.05 59.3156 342.75 58.7556 cv
342.68 58.7656 li
339.48 58.3656 336.6 58.3756 333.75 59.5056 cv
333.85 59.2656 li
329.45 60.6856 325.38 64.3556 322.5 68.5056 cv
322.32 68.4956 li
320.71 70.6856 319.38 73.0156 318 76.0056 cv
318.02 75.7356 li
316.73 78.3156 315.4 81.2456 315.75 83.5056 cv
315.48 83.2956 li
315.54 84.7356 316.28 85.7256 316.5 87.2556 cv
316.56 87.3856 li
316.79 88.8256 316.67 90.7756 315.75 91.7556 cv
316.02 91.8356 li
315.12 93.2856 313.24 93.0756 312 94.0056 cv
311.7 93.9956 li
309.74 95.1556 308.33 98.1256 308.25 100.756 cv
308.24 100.606 li
308.11 103.826 310.22 106.236 312.75 108.256 cv
312.79 108.596 li
316.26 111.786 320.58 114.886 324.75 115.756 cv
325.04 115.706 li
328.13 116.276 331.29 115.746 334.5 115.756 cv
334.54 115.436 li
340.2 114.896 346.13 115.016 351.75 115.006 cv
351.64 114.796 li
358.54 114.526 364.77 113.726 372 112.756 cv
371.64 113.116 li
375.12 112.796 378.75 112.536 382.5 112.756 cv
382.81 112.976 li
385.24 113.246 387.81 113.766 387.75 112.006 cv
387.99 112.286 li
388.15 110.986 386.45 108.136 384.75 106.756 cv
385.02 106.696 li
382.76 104.416 381.19 105.706 380.25 103.756 cv
380.24 104.116 li
379.59 103.036 379.22 100.636 379.5 99.2556 cv
379.78 99.2756 li
380.4 97.7656 382.17 97.5556 384 97.0056 cv
383.82 96.6356 li
386.3 95.2556 388.5 92.2556 390 89.5056 cv
390.25 89.1856 li
392.25 85.6656 393.66 82.0556 393.75 78.2556 cv
393.41 78.3656 li
393.21 75.5356 392.03 72.6556 393 70.0056 cv
392.74 69.7756 li
393.37 67.2256 395.48 64.6556 395.25 62.5056 cv
395.52 62.1456 li
395.57 59.2556 392.87 56.4256 392.25 53.5056 cv
392.41 53.3656 li
392.06 50.9956 393.06 48.4756 392.25 46.7556 cv
392.33 46.8756 li
391.71 45.5256 389.86 44.8156 389.25 43.7556 cv
388.89 43.9356 li
388.13 43.2456 387.91 42.4356 387.75 40.7556 cv
388.08 41.1256 li
388.49 37.8756 391.32 31.4856 390.75 27.2556 cv
390.86 27.5656 li
390.47 24.1456 387.56 22.6156 385.5 22.0056 cv
385.65 22.1456 li
384.17 21.7756 383.28 22.0456 382.5 24.2556 cv
382.18 24.5156 li
380.93 27.3056 379.39 32.8956 378.75 37.0056 cv
379.07 36.9156 li
378.86 39.5256 379.16 41.4756 378.75 42.2556 cv
378.77 42.3156 li
377.75 44.4856 372.09 39.3156 367.5 35.5056 cv
367.71 35.2556 li
364.4 32.1856 361.83 29.7356 359.25 28.0056 cv
359.31 28.1956 li
357.61 27.1556 355.93 26.5256 353.25 24.2556 cv
353.54 24.5056 li
352.5 23.6356 351.33 22.5056 350.25 22.0056 cv
350.46 22.1856 li
348.88 21.5956 348.25 23.6056 348 25.7556 cv
347.73 25.7156 li
346.98 28.7556 346.46 31.9856 347.25 34.7556 cv
347.14 34.5756 li
349.55 43.8756 367.36 44.8156 369.75 51.2556 cv
cp
@
301.5 103.756 mo
370.5 142.756 li
426.75 45.2556 li
358.5 6.25562 li
301.5 103.756 li
@
1 lw
301.5 143.506 mo
426.75 143.506 li
426.75 5.50562 li
301.5 5.50562 li
301.5 143.506 li
1 /0 /CSD get_res sepcs
1 sep
@
.25 lw
325.13 50.7556 mo
327.82 50.7556 329.99 52.5056 329.99 54.6656 cv
@
%ADOBeginSubsetFont: PBAAAA+Times#20New#20Roman,Italic Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Times#20New#20Roman,Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f32f30f7b38000000cc000000606376
74200509a8570000012c000007966670676d015abb92000008c4000005cd
676c796676f57743000053e400000e5c68656164d9c348bb00000e940000
0036686865610e31050200000ecc00000024686d74782d11029400000ef0
000018026c6f63612b8c278b000026f4000013ce6d6178700f280b650000
3ac4000000206e616d65037ec8a000003ae400000e0e707265705d6c7e16
000048f400000aed67646972000000000000000000000000000303370190
00050008059a0533002c0125059a0533004c03a000660212010502020503
050405090304e0000aff000078430000000100000000544d432000010020
03b8058efe460133072101bb400001bfdff700000371054c000000200004
058e0000054c001f054c001c037100180000ffe10000ffe80000ffe8fe4a
fffc056b0023fe68ffe2033e000000950000009500000000000000000025
00a8008e010b007d00820045003200a400ca006b0070005100af003c00f0
01d700470004002500770029004000fd00160161004601370029008e0017
ffca0025005bffe902e600020099008100f2007500d6006300c60006009a
01330024003800cc003dff67001305d8003600860095ffdb0007043400a5
00d8ffdcfffe004800a200d8013c01530380053e0057007a007c008c0117
012a0138017c0026003c007800bd00c0021009b5000c004d004e00540058
006700b4040100020005005000af01d5034300240058008b013501c0ffac
002000250026002d00410136022bffba001e002a0034003b003f00850094
009800d7012e013d033104b900170040006100b9010e0116012201bfff9c
001f001f004d005c0086008c009600aa00cb00cb011f0154022f036005a9
fee8000e006f007c007d008b00d500f1010a0157017802b803adfe3fff6a
ffb3ffc4001f0037003f0044004a0078007d009700a200a700b600c000c1
00c600d8011d0150019701ee04740532fd81fed1fee0ff16fff1000f002d
00550068006e007f00890095009e00c200da00e400f801040108011101c2
023002da030e049e0517ff00ff8700000020002f00410057007800870088
008800b900c200c5012001280133017401d6020e020f026c027e02ab02ec
038903b103e304e7ff43ffa8ffc3ffdcffe9000700230023002600520077
007d0081008f009900ac00ae00b500b800c800ea00f000f40135016a018b
01b101b501f7021402ad02d504fc05d805f0ff9dfffc000b00240025002c
0030003000330040004700490057006e009a00bd00c900cd00dc00fa00fa
011b0139017e0187018a018e0195019601df01f6028602cf02de039603a9
03b003c804010432046a058b05e006510761fe96fe9aff4bff8700130025
00340038003e004a0065006b0073007a009c00a200b200b700bf00f000f7
00fb0104011301200124013b01520178017c0181018f01a001d90248026a
026f02700301031d032303270388041f04ab04d104da057a058bfe26fe59
ff2e00010002000a003b003b004700580058005f0066006b007a007a008b
009900af00bc00c000c700cc00e900f200f500fb00fb0102010a010b0115
0121012701450145015501570158015e01610168017d01a301ab01da01ee
021002180222028f029402a302d202e703710393039b03b303d303fe04ff
050b05320532054b0559058b05ab05f2065506890742076207a708ccfd2a
fdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffaf
ffc00000000000030094001d001f002000200027002e0048004b004c005e
005f006b0071007c008a00900091009100a700af00b300b400c400c600d1
00d200de00df00df00e600e800ea00eb00f200f500f500fc010201180123
013101330137015c016201660170017a017a017a018201980199019b01b0
01bf01c001ca01d301d701d801e001e001f601f701f802120213022f0237
02440247024f0252026302650270027f0298029b02a602b702ba02c502cf
02d602d702e502fe031c031d03450348035d035e03710379038103a103b7
03d403d503d803e103f803fe0404041f042104230425043a0467048304e0
0528054b0564056a059f059f05c2060b066a06af06b306cb06e807060728
0748075007a607b207ff009500af00920096000000000000000000000000
017e01a80129025b0212020301c302b4019301cd02b204ed020e0159017a
0300022d042c00c8004d00e602890325013e0378011b00f1018d00490203
007c000e029d02470024000000000052004400330038005405d3041501a7
000002860168005000cf0002004b0024008800ba0025ffd800110091ff6b
00b5011700260065ff9900490080014b01c000f40167027102ea04fc0310
017c01e103d9015501e601ee0434019606cb005c022b0099003d009f0016
0039002700de00790120022e005a00990388009400210019002a046c05e8
000001f203b200aa0296028902b4ffc9020000ec0005005a0447010004e0
0000052a001f01eb00ae016800ca02d3028901b5040601a1014f014b011c
0308005e00c70024029d006503750104028002f304d800d90239025a032c
01f204310303005002e50283005901eb010800ac019602f8012100950180
004400e501eb02e5007400f301ff02fd038f026801c801c70116022b0142
033000fe02e101620200002400ee05170108023700660006010201e602aa
0366019b00d305c203dc044d03b6000401be013702fc03200244014d0338
ffed002506f8030dfed5ff43004402ffff92040bfdef0155017100d9ffc4
032d0461044afbb5fbcf02170192036d0558fff2fe7d0583023e006605e9
073d00790243002500cf00fd00af002a01ef021a0026001f0025003a0000
01170490fbfb0251001d02f001f50078018f005f00240044005400bf00af
006701a8002600050006003f009800fa02ab00c2004d0375004a00b600c4
01bf017c006f00130263000c006801520002012e0104001f001f009a0000
00f1046900790080005000bd056b00ab0080001e05a5fe4000ce006e0056
004800db018b00b300480239045800530082008200220000404154403f3e
3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f
1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b09051582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845
441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d
2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062
602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c
45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a
45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b0
177ae45959182d2c2d2cb0022546608a46b040618c482d2c01182f2d2c20
b0032545b019234445b01a23444565234520b00325606a20b00923422368
8a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b0
3f1b235961441cb114008a5279b31940201945208a54582321b03f1b2359
61442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d
2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d
2c4b525845441b2121592d2c0120b003252349b04060b0206320b0005258
23b002253823b002256538008a63381b212121212159012d2c4bb0645158
4569b00943608a103a1b212121592d2c01b005251023208af500b0016023
edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500ed
ec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2b
b02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802ee2370
1020b802ee4520b0005058b00161593a2f182d2c21210c6423648bb84000
622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21
b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648b
b84000626023212d2cb4000100000015b00826b00826b00826b008260f10
161345683ab001162d2cb4000100000015b00826b00826b00826b008260f
1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b54
58381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54
b012435c5a58381b2121592d2cb012435c580cb00425b00425060c642364
6164b807085158b00425b00425012046b01060482046b0106048590a2121
1b2121592d2cb012435c580cb00425b00425060c6423646164b807085158
b00425b00425012046b8fff060482046b8fff06048590a21211b2121592d
2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121
592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426
024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46232046
8a608a61b8ff8062232010238ab903b003b08a70456020b0005058b00161
b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1400188
535a58b910000020885458b202010243604259b12401885158b920000040
885458b202020243604259b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
02436042595959592d00000000010000000511ec2c438c345f0f3cf50819
080000000000a31fb8bd00000000c8c23358fc05fd8c0aaa083000020009
0001000000000000000100000721fe4500570a3afc05fa500aaa00180007
000000000000000000000000021b0639011c000000000200000002000000
02aa009a035c012600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000006aaffbd
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000400
002700000000000000000000000000000000000000000000000000000000
0000000000000000000000000400003c0000000000000000031d002a0000
000000000000000000000000000000000000038dffb8038dff5c00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000003ee005a000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000034003400340034008b00ff00ff00ff
00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff
00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff
00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff02600260026002600260
026002600260026002600260026002600260026002600260026002600260
026002600260039c039c039c039c039c039c039c039c039c039c039c041f
041f041f04de04de04de04de04de04de05cb06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e072e072e072e072e072e072e072e072e072e
072e072e072e072e072e072e00000001000009e600470003000000000002
0010002f0055000004d90aed000000000000005303ea0000000300000000
006a00000000000300000001001e006a0000000300000002000c01120000
000300000003007000e00000000300000004002c00f20000000300000005
0018012000000003000000060030015000000003000000070076006a0000
000300000008003000ae000000030000000900860180000000030000000d
029a02060001000000000000003504a00001000000000001000f04d50001
000000000002000605290001000000000003003805100001000000000004
001605190001000000000005000c05300001000000000006001805480001
000000000007003b04d50001000000000008001804f70001000000000009
00430560000100000000000d014d05a30003000104030002000e07100003
000104030004002e06f00003000104050002000e073e0003000104050004
002e071e0003000104060002000c076c0003000104060004002c074c0003
000104070002000c07980003000104070004002c07780003000104080002
000c07cc0003000104080004002c07ac0003000104090000006a00000003
000104090001001e006a0003000104090002000c01120003000104090003
007000e00003000104090004002c00f20003000104090005001801200003
0001040900060030015000030001040900070076006a0003000104090008
003000ae000300010409000900860180000300010409000d029a02060003
0001040a0002000e07f800030001040a0004002e07d800030001040b0002
0014079800030001040b00040034077800030001040c0002001008260003
0001040c00040030080600030001040e00020008085600030001040e0004
002808360003000104100002000e087e0003000104100004002e085e0003
000104130002000e08ac0003000104130004002e088c0003000104140002
000c07980003000104140004002c07780003000104150002000e08da0003
000104150004002e08ba0003000104160002000e09080003000104160004
002e08e80003000104190002000c09360003000104190004002c09160003
0001041b0002000e096200030001041b0004002e094200030001041d0002
000c079800030001041d0004002c077800030001041f0002000c09900003
0001041f0004002c09700003000104240002000e09bc0003000104240004
002e099c00030001042a0002000e09ea00030001042a0004002e09ca0003
0001042d0002000c0a1800030001042d0004002c09f800030001080a0002
000e07f800030001080a0004002e07d80003000108160002000e09080003
000108160004002e08e8000300010c0a0002000e07f8000300010c0a0004
002e07d8000300010c0c000200100826000300010c0c00040030080600a9
0020003200300031003000200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
002e00200041006c006c0020005200690067006800740073002000520065
007300650072007600650064002e00540069006d006500730020004e0065
007700200052006f006d0061006e00200069007300200061002000740072
006100640065006d00610072006b0020006f006600200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e004d006f006e006f0074007900700065003a
00540069006d006500730020004e0065007700200052006f006d0061006e
0020004900740061006c00690063003a00560065007200730069006f006e
00200035002e0030003700200028004d006900630072006f0073006f0066
0074002900540069006d00650073004e006500770052006f006d0061006e
00500053002d004900740061006c00690063004d0054004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d0020005300740061
006e006c006500790020004d006f007200690073006f006e002c00200056
006900630074006f00720020004c0061007200640065006e007400200031
0039003300320059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
00450055004c004100200066006f00720020007400680065002000700072
006f006400750063007400200069006e0020007700680069006300680020
007400680069007300200066006f006e007400200069007300200069006e
0063006c007500640065006400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e0074002e002000200059006f00750020006d00610079
0020006f006e006c0079002000280069002900200065006d006200650064
0020007400680069007300200066006f006e007400200069006e00200063
006f006e00740065006e00740020006100730020007000650072006d0069
0074007400650064002000620079002000740068006500200065006d0062
0065006400640069006e0067002000720065007300740072006900630074
0069006f006e007300200069006e0063006c007500640065006400200069
006e0020007400680069007300200066006f006e0074003b00200061006e
006400200028006900690029002000740065006d0070006f007200610072
0069006c007900200064006f0077006e006c006f00610064002000740068
0069007300200066006f006e007400200074006f00200061002000700072
0069006e0074006500720020006f00720020006f00740068006500720020
006f00750074007000750074002000640065007600690063006500200074
006f002000680065006c00700020007000720069006e007400200063006f
006e00740065006e0074002ea9203230313020546865204d6f6e6f747970
6520436f72706f726174696f6e2e20416c6c205269676874732052657365
727665642e54696d6573204e657720526f6d616e20697320612074726164
656d61726b206f6620546865204d6f6e6f7479706520436f72706f726174
696f6e2e4d6f6e6f747970653a54696d6573204e657720526f6d616e2049
74616c69633a56657273696f6e20352e303720284d6963726f736f667429
54696d65734e6577526f6d616e50532d4974616c69634d544d6f6e6f7479
706520547970652044726177696e67204f6666696365202d205374616e6c
6579204d6f7269736f6e2c20566963746f72204c617264656e7420313933
32596f75206d617920757365207468697320666f6e74206173207065726d
6974746564206279207468652045554c4120666f72207468652070726f64
75637420696e207768696368207468697320666f6e7420697320696e636c
7564656420746f20646973706c617920616e64207072696e7420636f6e74
656e742e2020596f75206d6179206f6e6c792028692920656d6265642074
68697320666f6e7420696e20636f6e74656e74206173207065726d697474
65642062792074686520656d62656464696e67207265737472696374696f
6e7320696e636c7564656420696e207468697320666f6e743b20616e6420
286969292074656d706f726172696c7920646f776e6c6f61642074686973
20666f6e7420746f2061207072696e746572206f72206f74686572206f75
747075742064657669636520746f2068656c70207072696e7420636f6e74
656e742e00540069006d006500730020004e0065007700200052006f006d
0061006e0020006300750072007300690076006100540069006d00650073
0020004e0065007700200052006f006d0061006e0020006b00750072007a
00ed0076006100540069006d006500730020004e0065007700200052006f
006d0061006e0020006b0075007200730069007600540069006d00650073
0020004e0065007700200052006f006d0061006e0020004b007500720073
00690076006f00690074007500540069006d006500730020004e00650077
00200052006f006d0061006e002003a003bb03ac03b303b903b100540069
006d006500730020004e0065007700200052006f006d0061006e00200043
00750072007300690076006100540069006d006500730020004e00650077
00200052006f006d0061006e0020004900740061006c0069007100750065
00540069006d006500730020004e0065007700200052006f006d0061006e
002000440151006c007400540069006d006500730020004e006500770020
0052006f006d0061006e00200043006f0072007300690076006f00540069
006d006500730020004e0065007700200052006f006d0061006e00200043
00750072007300690065006600540069006d006500730020004e00650077
00200052006f006d0061006e0020006b0075007200730079007700610054
0069006d006500730020004e0065007700200052006f006d0061006e0020
0049007400e1006c00690063006f00540069006d006500730020004e0065
007700200052006f006d0061006e0020041a044304400441043804320054
0069006d006500730020004e0065007700200052006f006d0061006e0020
004b00750072007a00ed0076006100540069006d006500730020004e0065
007700200052006f006d0061006e0020013000740061006c0069006b0054
0069006d006500730020004e0065007700200052006f006d0061006e0020
0050006f016100650076006e006f00540069006d006500730020004e0065
007700200052006f006d0061006e0020006e00670068006900ea006e0067
00540069006d006500730020004e0065007700200052006f006d0061006e
002000450074007a0061006e00610000b15400410c03bc003003bc004003
bc00a003bc00b003bc0005ffc003bbb345453240b803bbb32b2e3240b803
bbb2282932b9ffc003bbb31a263280411303bb009f03bb00af03bb00cf03
bb0004000003bb001f03bb000203bb02af0027001fffc003b9b2161b32b9
ffc003b8b2424232b9ffc003b8b2363832b9ffc003b8b32a2d32df410a03
b800ef03b8000203b803b90028001fffc003b9b3282e32f0410f03b90001
000003b7000103b700030800001f03be03bf002b001fffc003bfb2242a32
b903b60381b23a1f0f411703b3001003b2002003b2005003b2007003b200
e003b2000600cf03b300df03b300ef03b300ff03b30004001203a8b2e289
1fbe039f016b019a001f039800930801400c1f7f047f05027f027f03025f
bb02b00001ffc00117b2196632b8ffc0b3651a6632b9ff800173b2196632
bd038401170800001fffc002afb2313340b802afb22e3340b802afb32829
3240b802afb326273240b802afb321253240b802afb31c203240b802afb2
233340b802afb21933a0bc02af00b002af00e002afb5034003212932b8ff
f2b33a263d32bc038203820382003a0800b51f40255c331eb80381b25c64
32b8ffeeb3252e3314b80381b32b2e3269be03810001008a03810001000e
0381b32b2f3210b80381b3515b320cb80381b34e513222b80381b3474d32
0eb80381b246330ab80381400926473212254358320cb80381b2323310b8
0381b22a3312b80381b3373d3212bb0381003d0033fff44015253d331825
355b32102526343206252a330c252e33b8fffe4024252d330c3a2f333299
25aa25ba25c92504052536330c25323832193a293a383a03182517b80381
b42825382504bc0381038103810025080040101f0f1f2b2e32691f781f02
0b1f303332b8fff1b31f263d32bc038003800380001f080040151f375f07
af07025f06af060222ac2b2e3209ac2f33b8ffdc400aac1f223222232b52
320eb8037fb229330eb8037fb2223314b8037fb21e2032b8ffe7b71e2b33
321e2b2f32b9ffc0037fb64c4f3232262c33410affee037f00390033fff8
037f002b0033ffea037fb23a3320b8037fb33f46321eb8037fb32f3a3212
b8037fb22e331eb8037fb32a2d320eb8037fb2263304b8037fb3494a3404
b8037fb2463304b8037fb2213318b8037f400c1d33222630323222263338
32b8fff8400a262b2f3209261b21328abe037f0001037f037f037f002608
00402e1f371f062f063f06039f02af02bf02cf02049f03af03bf03cf0304
6f037f038f03031f032f033f034f035f03050f413502ed0001005f02ed00
9f02ed00df02ed0003002f02ed003f02ed006f02ed000300af02af000100
4f02af009f02af0002002f02af003f02af0002003f02b00001004f02af00
5f02af0002002f02af003f02af0002007003b2000103b203b202ed02ed02
b002b002af02af401a370100300140010201010009010200080017170000
0012110840410b027b02230034000d013d0034000d01370034000d011b40
1a340d8f340d84340d68340d59340d54340d48340d2c340d28340d411002
350020000d021b0020000d01fc0020000d01c30020000d01500020000d01
2c401a200df0200dbe200d94200d79200d6a200d61200d5f200d44200d41
0d013e0138000d003d0138000d00300138000d001d0138000d01fdb40f4d
0f0009bf01fd004d000d03b1037f0015001f0215b226341fb80214b2263f
1fb80208b21ebb1f41190206001e0801001f0205001f02ab001f0204001f
02ab001f0203001f0401001f02010031019a001f01fb00230156001f01ae
b2262a1fb801adb2262a1fb801abb226341f411501a8002602ab001f01a5
001e0125001f01a400ab02ab001f01a2003102ab001f01a1003102ab001f
019db2236c1fb8019cb2236c1f4109019b00230401001f019a0033019a00
1f0176b2262e1fb8016cb231721f4111016b0023019a001f016800240401
001f014500260801001f013f00230401001f0123b21e9e1fbc0121001e02
01001f0100b426791ffd1fb80125b21ffa33b80801b21ff924b802abb21f
e826b80101b21fe51fb8019ab21fe431b80101400b1fe331e41fe231891f
d226b80201b61fd026cd1fcd25b80401b21fb731b8019ab21fae26b80801
b21fac1eb80401400b1f9e315e1f97269e1f9333b80801b21f8a24b8019a
b21f831fb802ab40131f82236c1f7523e41f7026cd1f6423721f5e25b804
01b21f5d23b802abb21f55e6b80401b21f5324b80201b21f4f33b802abb2
1f4e26b8040140131f4731671f4626ab1f4331cd1f3e235e1f3a1fb80401
b61f3924e41f3723b80801b21f2e23b80401b21f2a1eb80125400b1f2923
ab1f2731ab1f5537bc01c60007018a0007012b402e077f07710769076607
4b074007380736072d07220721071408120810080e080c080a0808080608
04080208000814b8ffe0402b000001001406100000010006040000010004
10000001001002000001000200000001000002010802004a00b013034b02
4b5342b0372b4bb807ff52b0382b4bb009505b58b101018e59014bb0c063
004b6220b0f65323b8010a515ab005234201b0124b004b544218b0382bb0
0288b801005458b801ffb101018e851bb0124358b900010140858d1bb900
010159858d59590016763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0
ff1d594bb04753205c58b9027d027b4544b9027c027b45445958b9014602
7d455258b9027d01464459594bb04753205c58b9001e027c4544b9002602
7c45445958b9017f001e455258b9001e017f4459594bb05e53205c58b900
1f027d4544b90025027d45445958b901a8001f455258b9001f01a8445959
4bb8010153205c58b1ab1f4544b11f1f45445958b9047000ab455258b900
ab04704459594bb8012553205c58b1e61f4544b11f1f45445958b9051000
e6455258b900e605104459594bb01753205c58b124244544b13124454459
58b12224455258b124224459594bb05153205c58b124244544b123244544
5958b17d24455258b1247d4459594bb06e53205c58b124244544b1332445
445958b1aa24455258b124aa4459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b45695342014b5058b108004259435c58b1080042591610703eb0124358
b911b53d801bba011c03d9000b2b59b00a2342b00b2342003f3f182b103c
012f5d060cb0062342b0072342b0124358b93b21187e1bba040001a8000b
2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59b0
0e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342
b0112342002b4bb02e5358b8016b45b02a60b8016b234459001845694445
6944184569444569447373737375757573737475757575752b4bb026534b
b03d515a58b1262645b0196044592b45186944742b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b004bb02a534bb03f515a58b107
0745b04060445973732b2b451869442b2b752b2b4518694475752b2b752b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b2b2b451869442b00
2b732b2b2b2b2b2b2b2b2b012b2b2b007373732b2b2b01435c58b8ffdeb3
1e1c3318b8037fb52b3318262b33b9fff00381b112332b2b2b2b59017374
2b2b2b002b73752b2b732b2b2b2b2b73752b2b2b2b732b00000000>
[3677 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 3414 537 <0003005affe8040f058e000d0015001f00934071291f560355135c1d5c1e
691d791d86168d1d8c1e93149616a404a90ea713a114a416b704bc0eb51a
c703c904ea0ef501f90ef614f615f6161c0e15c61f161606122400001b24
060b16151f0e0418103a02183a098002c00202020209804b533430094009
50096009a009050919207756182b4e10f45d2b322f5d4d10ed10ed111739
003fed3fed12392f3cfd3c3130015d012011140200232226353412122413
363534232202030702151416333236123702f90116e1fedf997d9d5ab401
0fc0438171da5b135c525143769e46058efe83e6fdd1feecd59f66016801
6ff5fd58d3c7e4feabfed739fee199647f6b0148e800>PBAAAA+Times#20New#20Roman,Italic AddT42Char 
1 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>PBAAAA+Times#20New#20Roman,Italic AddT42Char 
PBAAAA+Times#20New#20Roman,Italic /CharStrings get begin
/theta 537 def
end
PBAAAA+Times#20New#20Roman,Italic /Encoding get
dup 127 /theta put
pop
end
%ADOEndSubsetFont
/UKNMJB+Times#20New#20Roman,Italic /PBAAAA+Times#20New#20Roman,Italic findfont ct_VMDictPut
/UKNMJB+Times#20New#20Roman,Italic*1 
[127{/.notdef}rp /theta 128{/.notdef}rp]
UKNMJB+Times#20New#20Roman,Italic nf
UKNMJB+Times#20New#20Roman,Italic*1 [10.0001 0 0 -10.0001 0 0 ]msf
314.63 45.2556 mo
(\177)sh
320.31 43.9556 mo
324.42 43.9556 327.74 47.2756 327.74 51.3756 cv
1 /0 /CSD get_res sepcs
.749 sep
@
323.25 41.5056 mo
320.25 43.7556 li
323.25 46.7556 li
@
1 lw
[7 5 ] 0 dsh
308.25 115.756 mo
395.25 115.756 li
395.25 22.0056 li
308.25 22.0056 li
308.25 115.756 li
1 /0 /CSD get_res sepcs
1 sep
@
[] 0 dsh
226.5 73.7556 mo
268.5 73.7556 li
@
273.75 73.7556 mo
266.25 76.7556 li
266.5 76.9556 li
267.61 74.7456 267.61 72.1356 266.5 69.9156 cv
266.25 70.0056 li
273.75 73.7556 li
cp
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Gradient [/0 /1 ]]
] del_res
/UKNMJB+Times#20New#20Roman,Italic*1 uf
/UKNMJB+Times#20New#20Roman,Italic uf
/PBAAAA+Times#20New#20Roman,Italic uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
